buildscript {
	repositories {
	    maven {
	      name "cobra"
	      url "http://cobra.cs.uni-duesseldorf.de/artifactory/repo"
	    }
	}

 dependencies {
    classpath(group: 'de.stups', name: 'sablecc', version: '3.2.2')
 }
}




def global_version = '2.3.0'

project.version = global_version;
project.group = 'de.prob'
 
// // The real configuration
allprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  sourceCompatibility = 1.5
 
  clean {
	doLast {
      def delClos
      delClos = { 
        it.eachDir( delClos );
        it.eachFile { it.delete() }
	    it.delete()
      }
	  def build_dir = file("build")
      if (build_dir.exists()) delClos(build_dir)
      def gradle_cache = file(".gradle")
      if (gradle_cache.exists()) delClos(gradle_cache)
      def bin_dir = file("bin")
      if (bin_dir.exists()) delClos(bin_dir)
    }
  }
}

subprojects {
 apply plugin: 'eclipse'
 //apply from: 'https://raw.github.com/gist/1527604/c0376aa40de59a0481cb33f17ebe5a26ee4f59d0/emma.gradle'
 group = 'de.prob'
 version = global_version;
repositories {
    maven {
      name "cobra"
      url "http://cobra.cs.uni-duesseldorf.de/artifactory/repo"
    }
}
configurations {
	sablecc
}

 dependencies {
    compile 'com.google.code.findbugs:jsr305:1.3.9'
    testCompile 'junit:junit:4.8.2'
 }

 task deploy(dependsOn: [build])


 cleanEclipseJdt << {
	file(".settings/org.eclipse.jdt.ui.prefs").delete()
 }

 eclipseJdt {
	inputFile = file("scripts/org.eclipse.jdt.core.prefs")
 }

 eclipseJdt << {
	copy {  from 'scripts'
		into '.settings'
		include 'org.eclipse.jdt.ui.prefs'
    }
 }

}

task globaljavadoc(type: Javadoc, dependsOn: subprojects.assemble) {
    source subprojects.collect { project ->
        project.sourceSets.main.allJava
    }
    destinationDir = new File(buildDir, 'javadoc')
    classpath = files(subprojects.collect { project ->
        project.sourceSets.main.compileClasspath
    })
}


task uberjar(type: Jar, dependsOn: subprojects.deploy) { 
    baseName = 'probcliparser' 
    subprojects.each { subproject -> 
        from subproject.configurations.archives.allArtifacts.getFiles().collect { zipTree(it) } 
    } 
    manifest { attributes 'Main-Class': 'de.prob.cliparser.CliBParser' }
}

task deploy(dependsOn: [subprojects.deploy,globaljavadoc]) 

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-8'
}