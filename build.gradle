def global_version = '2.5.0-SNAPSHOT'

project.version = global_version;
project.group = 'de.hhu.stups'

// // The real configuration
allprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  sourceCompatibility = 1.7

  clean {
	doLast {
      def delClos
      delClos = {
        it.eachDir( delClos );
        it.eachFile { it.delete() }
	    it.delete()
      }
	  def build_dir = file("build")
      if (build_dir.exists()) delClos(build_dir)
//      def gradle_cache = file(".gradle")
//      if (gradle_cache.exists()) delClos(gradle_cache)
      def bin_dir = file("bin")
      if (bin_dir.exists()) delClos(bin_dir)
    }
  }



}

subprojects {
 apply plugin: 'eclipse'
 group = 'de.hhu.stups'
 version = global_version;
 repositories {
	  mavenCentral()
    maven {
      name "snapshots"
      url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

configurations {
	sablecc
}

jar {
	from sourceSets.main.allJava
}

configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    sablecc(group: 'de.hhu.stups', name: 'sablecc', version: '3.2.10')
    compile 'com.google.code.findbugs:jsr305:1.3.9'
    testCompile 'junit:junit:4.8.2'
 }

 task deploy(dependsOn: [build])


 cleanEclipseJdt << {
	file(".settings/org.eclipse.jdt.ui.prefs").delete()
 }

 eclipseJdt {
	inputFile = file("scripts/org.eclipse.jdt.core.prefs")
 }

 eclipseJdt << {
	copy {  from 'scripts'
		into '.settings'
		include 'org.eclipse.jdt.ui.prefs'
    }
 }

 if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {

 println "Configuring deployment for ${ project.name }"

 apply plugin: 'signing'
 
 artifacts {
    archives javadocJar, sourcesJar
}


signing {
    sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name project.getName()
        packaging 'jar'
        // optionally artifactId can be defined here
        description 'Part of the ProB Parser library'
        url 'https://github.com/bendisposto/probparsers'

        licenses {
          license {
            name 'Eclipse Public License, Version 1.0'
            url 'http://www.eclipse.org/org/documents/epl-v10.html'
          }
        }

        scm {
          connection 'scm:git:git://github.com/bendisposto/probparsers.git'
          developerConnection 'scm:git:git@github.com:bendisposto/probparsers.git'
          url 'https://github.com/bendisposto/probparsers'
        }


        developers {
          developer {
            id 'bendisposto'
            name 'Jens Bendisposto'
            email 'jens@bendisposto.de'
          }
        }
      }
    }
  }
}
}

}

task globaljavadoc(type: Javadoc, dependsOn: subprojects.assemble) {
    source subprojects.collect { project ->
        project.sourceSets.main.allJava
    }
    destinationDir = new File(buildDir, 'javadoc')
    classpath = files(subprojects.collect { project ->
        project.sourceSets.main.compileClasspath
    })
}


task uberjar(type: Jar, dependsOn: subprojects.deploy) {
    baseName = 'probcliparser'
    subprojects.each { subproject ->
        from subproject.configurations.archives.allArtifacts.getFiles().collect { zipTree(it) }
    }
    manifest { attributes 'Main-Class': 'de.prob.cliparser.CliBParser' }
}

task deploy(dependsOn: [subprojects.deploy,globaljavadoc])

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}
