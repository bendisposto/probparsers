Arithmetische Operatoren (5.000.000 ausführen):

Operatoren: plus, minus, multiply, divide, modulo, negative

Kleine Zahlen:

Generierter Java Code mit/ohne persistenten Datenstrukturen:
-plus: 1527.057167ms
-minus: 1552.036481ms
-multiply: 1414.812602ms
-divide: 1419.422190ms
-modulo: 1418.958096ms
-negative: 1243.497258ms


Kleine Zahlen mit Clojure Datentypen aus Clojure:
-plus: 2233.126595ms
-minus: 2362.162382ms
-multiply: 2044.505269ms
-divide: 2101.063452ms
-modulo: 2127.199113ms
-negative: 1687.380731ms


Kleine Zahlen mit Clojure Datentypen aus Java:
-plus: 686.146425ms
-minus: 865.738430ms
-multiply: 799.980884ms
-divide: 936.042921ms
-modulo: 848.377491ms
-negative: 705.351774ms

Kleine Zahlen mit Java Integer Wrapper:
-plus: 67.658470ms
-minus: 72.701664ms
-multiply: 69.248427ms
-divide: 68.829064ms
-modulo: 66.781748ms
-negative: 65.221832ms


ProB:
-plus: 37.010s
-minus: 36.490s
-multiply: 35.950s
-divide: 37.950s
-modulo: 38.090s
-negative: 36.900s





Große Zahlen:

Generierter Java Code mit/ohne persistenten Datenstrukturen: 1545.247803ms
Clojure Datentypen aus Clojure: 21116.859844ms
Clojure Datentypen aus Java: 1192.796217ms
ProB: 37.490s









Logische Operatoren (5.000.000 ausführen):

Operatoren: and, or, not, implies, equivalent

Generierter Java Code mit/ohne persistenten Datenstrukturen:
-and: 1677.647366ms
-or: 1686.817567ms
-not
-implies: 1559.410386ms
-equivalent: 1608.868035ms

Generierter Java Code mit Clojure Datentypen aus Clojure:
-and: 2315.439514ms
-or: 2198.558227ms
-not:
-implies: 2119.703294ms
-equivalent: 2352.353127ms

Generierter Java Code mit Clojure Datentypen aus Java:
-and: 804.793985ms
-or: 747.392946ms
-not
-implies: 723.029982ms
-equivalent: 925.414799ms

-> liegt an BInteger


Generierter Java Code mit Java Integer Wrapper:
-and: 54.197429ms
-or: 53.142420ms
-not
-implies: 54.602723ms
-equivalent: 57.920684ms


ProB:
-and: 22.860s
-or: 24.010s
-not
-implies: 23.540s
-equivalent: 22.740s








Vergleichsoperatoren(5.000.000 ausführen):

Operatoren: lessEqual, less, greater, greaterEqual, equal, unequal

Generierter Java Code mit/ohne persistente Datenstrukturen:
-lessEqual: 1652.718937ms
-less: 1696.567963ms
-greater: 1572.312636ms
-greaterEqual: 1589.233175ms
-equal: 1677.647366ms
-unequal: 1588.554253ms


Generierter Java Code mit Clojure Datentypen aus Clojure:
-lessEqual: 2243.109138ms
-less: 2348.651022ms
-greater: 2338.488941ms
-greaterEqual: 2223.397687ms
-equal: 2355.018106ms
-unequal: 2159.089710ms

Generierter Java Code mit Clojure Datentypen aus Java:
-lessEqual: 776.031873ms
-less: 772.053394ms
-greater: 785.064907ms
-greaterEqual: 786.180746ms
-equal: 743.042635ms
-unequal: 740.61683ms

Generierter Java Code mit Java Integer Wrapper:
-lessEqual: 53.311601ms
-less: 53.132831ms
-greater: 53.511066ms
-greaterEqual: 54.484115ms
-equal: 56.685253ms
-unequal: 56.191460ms

ProB:

-lessEqual: 21.920s
-less: 22.510s
-greater: 22.150s
-greaterEqual: 22.250s
-equal: 22.860s
-unequal: 22.150s






Mengenoperatoren (5.000.000 ausführen, kleine Mengen ohne Ranges):

Operatoren: union, intersect, complement, card, elementOf

Generierter Java Code mit persistente Datenstrukturen:

union: 1647.361595ms
intersect: 1734.017740ms
complement: 2533.768241ms
card: 1484.266153ms
elementOf: 1548.509623ms

Generierter Java Code ohne persistente Datenstrukturen:

union: 1853.601886ms
intersect: 2081.250694ms
complement: 2263.564847ms
card: 1454.037756ms
elementOf: 1360.570556ms


Generierter Java Code mit Clojure Datentypen aus Clojure:
union: 8949.446513ms
intersect: 9185.006147ms
complement: 10724.506119ms
card: 1860.234427ms
elementOf: 15234.865748ms

Generierter Java Code mit Clojure Datentypen aus Java:
union: 2694.883700ms
intersect: 2285.243840ms
complement: 3269.059326ms
card: 758.262145ms
elementOf: 949.365328ms

Generierter Java Code mit Java Integer Wrap und Java PSet:
union: 558.503020ms
intersect: 743.136668ms
complement: 1283.837833ms
card: 70.578106ms
elementOf: 115.625150ms



ProB:
union: 45.950s
intersect: 35.640s
complement: 36.010s
card: 33.440s
elementOf: 23.260s



Mengenoperatoren (10.000 ausführen, große Mengen ohne Ranges):

Operatoren: union, intersect, complement, card, elementOf

Generierter Java Code mit persistente Datenstrukturen:


union: 64.716832ms
intersect: 7572.680996ms
complement: 22.031298ms
card: 13.551253ms
elementOf: 15.760034ms


Generierter Java Code ohne persistente Datenstrukturen:
union: 50872.899619ms
intersect: 4903.573794ms
complement: 41479.623889ms
card: 16.222380ms
elementOf: 13.518733ms

Generierter Java Code mit Clojure Datentypen aus Clojure:
union: 188.331214ms
intersect: 4813.251498ms
complement: 135.697940ms
card: 59.265900ms
elementOf: 213.062498ms

Generierter Java Code mit Clojure Datentypen aus Java:
union: 65.057699ms
intersect: 3828.922497ms
complement: 47.440729ms
card: 27.947120ms
elementOf: 29.269413ms

Generierter Java Code mit Java Integer Wrapper und Java PSet:
union: 27.739418ms
intersect: 6484.400547ms
complement: 14.454555ms
card: 3.146903ms
elementOf: 7.835211ms


ProB:
union: 0.26s
intersect: 0.22s
complement: 0.18s
card: 0.15s
elementOf: 0.13s












Mengenoperatoren (5.000.000 ausführen, kleine Mengen mit Ranges):

Operatoren: range, union, intersect, complement, card, elementOf

Generierter Java Code mit persistente Datenstrukturen:

range: 12428.453485ms
union: 7050.633808ms
intersect: 16263.049219ms
complement: 6594.979881ms
card: 1461.366702ms
elementOf: 1587.415583ms

Generierter Java Code ohne persistente Datenstrukturen:

range: 11780.257055ms
union: 9188.658630ms
intersect: 15755.713670ms
complement: 7692.083505ms
card: 1483.828577ms
elementOf: 1484.194575ms


Generierter Java Code mit Clojure Datentypen aus Clojure:

range: 86411.389776ms
union: 85089.306329ms
intersect: 168812.167635ms
complement: 63655.003015ms
card: 2015.363863ms
elementOf: 13352.635534ms

Generierter Java Code mit Clojure Datentypen aus Java:

range: 3104.585664ms
union: 2284.823593ms
intersect: 6282.998885ms
complement: 1957.995378ms
card: 68.026678ms
elementOf: 122.179067ms

Generierter Java Code mit Java Integer Wrapper und Java PSet:

range: 7085.525058ms
union: 6399.147237ms
intersect: 11283.646130ms
complement: 6035.415721ms
card: 733.990095ms
elementOf: 856.638124ms


ProB:

range: 34520ms
union: 70120ms
intersect: 47220ms
complement: 160580ms
card: 33940ms
elementOf: 24500ms



Mengenoperatoren (10.000 ausführen, große Mengen mit Ranges):

Operatoren: range, union, intersect, complement, card, elementOf

Generierter Java Code mit persistente Datenstrukturen:

range: 25996.246108ms
union: 71.682175ms
intersect: 7745.552150ms
complement: 25.488182ms
card: 13.361278ms
elementOf: 16.423271ms


Generierter Java Code ohne persistente Datenstrukturen:

range: 19323.951050ms
union: 43832.155634ms
intersect: 4800.576195ms
complement: 44009.160866ms
card: 17.071416ms
elementOf: 14.014292ms

Generierter Java Code mit Clojure Datentypen aus Clojure:

range: 61214.104797ms
union: 154.344680ms
intersect: 4447.759489ms
complement: 109.475493ms
card: 42.744554ms
elementOf: 141.461317ms

Generierter Java Code mit Clojure Datentypen aus Java:

range: 9284.461388ms
union: 72.002571ms
intersect: 4016.935678ms
complement: 50.195569ms
card: 24.820377ms
elementOf: 24.057717ms


Generierter Java Code mit Java Integer Wrapper und Java PSet:

range: 15170.752846ms
union: 30.139662ms
intersect: 6602.528270ms
complement: 16.795773ms
card: 2.803463ms
elementOf: 7.597548ms


ProB:

range: 130ms
union: 220ms
intersect: 150ms
complement: 150ms
card: 180ms
elementOf: 120ms
