keywords() ::= <<
Asm, auto, and, and_eq, bool, bitor, bitand, break, case, catch, char, class, compl, const, const_cast, continue, default, #define, delete, do, double, dynamic_cast, else, enum, exit(), explicit, export
extern, extern "C", false, float, for, union, unsigned, using, friend, goto, if, inline, int, long, mutable, virtual, namespace, new, not, not_eq, operator, or, or_eq, private, protected, public, register, void, reinterpret_cast,
return, short, signed, sizeof, static, static_cast, volatile, struct, switch, template, this, throw, true, try, typedef, typeid, union, unsigned, using, wchar_t, while, xor, xor_eq
>>


machine(imports, includedMachines, machine, includes, constants, values, enums, sets, declarations, initialization, operations, addition) ::= <<
#include \<iostream>
#include \<string>
#include "BUtils.cpp"
<imports; separator="\n">
<includedMachines; separator="\n">

#ifndef <machine>_H
#define <machine>_H

using namespace std;

class <machine> {

    <enums; separator="\n\n">


    private:

        <includes; separator="\n">

        <sets; separator="\n">

        <declarations; separator="\n">

        bool initialized = false;

    public:

        <machine>(){}

        <initialization>

        <operations; separator="\n\n">

};
#endif

<addition>
>>

initialization(machine, body, machines) ::= <<
void initialize() {
    if(initialized) {
        throw runtime_error("Machine is already initialized");
    }
    <machines : {m | <include_initialization(m)>}; separator="\n">
    <body>
    initialized = true;
}
>>

include_initialization(machine) ::= <<
<machine>.initialize();
>>

operation(machine, returnType, isTyped, operationName, parameters, returnParameters, locals, body, return) ::= <<
<returnType> <operationName>(<parameters; separator=", ">) {
    if(!initialized) {
        throw runtime_error("Machine was not initialized");
    }
    <locals; separator="\n">
    <body>
    <return>
}
>>

return(identifier) ::= <<
return <identifier>;
>>

no_return() ::=<<
>>

set_declaration(identifier, type, enums) ::= <<
#define <identifier> <set_enumeration(type, enums)>
>>

set_enumeration(type, enums) ::= <<
(BSet\<<type> >(<enums; separator=", ">))
>>

enum_call(class, identifier) ::= <<
(<class>(<class>::<identifier>))
>>

set_enum_declaration(name,enums) ::= <<
class <name> : public BObject {
    public:

        enum <name>_type {
            <enums;separator=", \n">
        };

        <name>_type value;

        <name>(){}

        <name>(<name>_type type) {
            this->value = type;
        }

        BBoolean equal(const <name>& o) {
            return value == o.value;
        }

        BBoolean unequal(const <name>& o) {
            return value != o.value;
        }

        friend bool operator ==(const <name>& p1, const <name>& p2) {
            return p1.value == p2.value;
        }

        friend bool operator !=(const <name>& p1, const <name>& p2) {
            return p1.value != p2.value;
        }

        int hashCode() const {
            return static_cast\<int>(value);
        }
};
>>

bool() ::= <<
(BOOL)
>>

include_declaration(type, identifier) ::= <<
<declaration(type, identifier)>;
>>

global_declaration(type, identifier) ::= <<
<declaration(type, identifier)>;
>>

local_declaration(type, identifier) ::= <<
<declaration(type, identifier)>;
>>

declaration(type, identifier) ::= <<
<type> <identifier>
>>

constant(type, identifier, val) ::= <<
>>

values(assignments) ::= <<
>>

parameter(type, identifier, isReturn) ::= <<
<type> <identifier>
>>

parallel(loads, others, stores) ::=<<
<loads; separator="\n">
<others; separator="\n">
<stores; separator="\n">
>>

parallel_load(type, identifier, typeCast) ::= <<
<type> _ld_<identifier> = static_cast\<<typeCast> >(<identifier>);
>>

parallel_store(identifier, isPrivate, typeCast, val) ::= <<
<identifier> = static_cast\<<typeCast> >(<val>);
>>

assignment(identifier, isPrivate, typeCast, val) ::= <<
<identifier> = static_cast\<<typeCast> >(<val>);
>>

assignments(assignments) ::= <<
<assignments; separator="\n">
>>

nondeterminism(identifier, isPrivate, typeCast, set) ::= <<
<identifier> = static_cast\<<typeCast> >(<set>.nondeterminism());
>>

void() ::= <<
void
>>

type(type, cast) ::= <<
<type>
>>

set_type(type, cast) ::=<<
BSet\<<type> >
>>

import_type(type) ::= <<
#include "<type>.cpp"
>>


interval(arg1, arg2) ::= <<
(BSet\<BInteger>::range(<arg1>,<arg2>))
>>

couple_create(arg1, arg2) ::= <<
(BCouple(<arg1>, <arg2>))
>>


binary(arg1,operator,arg2) ::= <<
<arg1>.<operator>(<arg2>)
>>

unary(operator, obj, args) ::= <<
<obj>.<operator>(<args; separator=", ">)
>>

select(predicate, then) ::= <<
if((<predicate>).booleanValue()) {
    <then>
} else {
    throw runtime_error("Invocation of the operation is not possible");
}
>>

if(predicate, then, else1) ::= <<
if((<predicate>).booleanValue()) {
    <then>
} <else1; separator=" ">
>>

elseif(predicate, then) ::= <<
else if((<predicate>).booleanValue()) {
    <then>
}
>>

else(then) ::= <<
else {
    <then>
}
>>

choice(len, then, choice1) ::= <<
int index = rand() % <len>
if(index == 0) {
    <then>
} <choice1; separator=" ">
>>


choice1(counter, then) ::= <<
else if(index == <counter>) {
    <then>
}
>>

choice2(then) ::= <<
else {
    <then>
}
>>

any(type, identifier, set, body, index) ::= <<
for(int _<index>_i = 0; _<index>_i \< (<set>.size()); _<index>_i++) {
    <type> <identifier> = static_cast\<<type> >(*(std::next(<set>.begin(), _<index>_i)));
    <body>
}
>>

any_body(predicate, body) ::= <<
if(<predicate>.booleanValue()) {
    <body>
    break;
}
>>

while(predicate, then) ::= <<
while((<predicate>).booleanValue()) {
    <then>
}
>>

var(locals, body) ::=<<
<locals; separator="\n">
<body>
>>

boolean_val(val) ::= <<
<if(val)>(BBoolean(true))<else>(BBoolean(false))<endif>
>>

identifier(identifier, isReturn, isPrivate, rhsOnLhs) ::= <<
<identifier>
>>

number(number, useBigInteger) ::= <<
(BInteger(<number>))
>>

operation_call_with_assignment(var, isPrivate, machine, function, args, this) ::= <<
<function>(<args; separator=",">, <var>);
>>

operation_call_without_assignment(machine, function, args, this) ::= <<
<if(this)>this-><else>this-><machine>.<endif><function>(<args; separator=",">);
>>