keywords() ::= <<
abstract, assert, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, extends, final, finally, float, for, if, implements, import, instanceof, int, interface, long, native, new, package, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, throws, try, void, volatile, while, true, false, null, var, const, goto
>>


machine(imports, machine, enums, sets, declarations, initialization, operations) ::= <<
<imports; separator="\n">

public class <machine> {

    <enums; separator="\n">

    <sets; separator="\n">

    <declarations; separator="\n">

    <initialization>

    <operations; separator="\n\n">

}

>>

initialization(body) ::= <<
public void initialize() {
    <body>
}
>>

operation(returnType, operationName, parameters, returnParameters, locals, body, return) ::= <<
public <returnType> <operationName>(<parameters; separator=", ">) {
    <locals; separator="\n">
    <body>
    <return>
}
>>

parameter(type, identifier) ::= <<
<declaration(type, identifier)>
>>

return(identifier) ::= <<
return <identifier>;
>>

set_declaration(identifier, enums) ::= <<
private BSet <identifier> = <set_enumeration(enums)>;
>>

set_enumeration(enums) ::= <<
new BSet(new HashSet\<BObject>(Arrays.asList(<enums; separator=", ">)))
>>

set_element(set,element) ::= <<
<set>.<element>
>>

enum_call(class, identifier) ::= <<
<class>.<identifier>
>>

set_enum_declaration(name,enums) ::= <<
public enum <name> implements BObject {
    <enums; separator=", \n">
}
>>


global_declaration(type, identifier) ::= <<
private <declaration(type, identifier)>;
>>

local_declaration(type, identifier) ::= <<
<declaration(type, identifier)>;
>>

declaration(type, identifier) ::= <<
<type> <identifier>
>>

assignment(identifier, val) ::= <<
<identifier> = <val>;
>>

void() ::= <<
void
>>

boolean(cast) ::= <<
<if(cast)>(BBoolean)<else>BBoolean<endif>
>>

boolean_import() ::= <<
import de.hhu.stups.btypes.BBoolean;
>>

integer(cast) ::= <<
<if(cast)>(BInteger)<else>BInteger<endif>
>>

integer_import() ::= <<
import de.hhu.stups.btypes.BInteger;
>>

set(cast) ::= <<
<if(cast)>(BSet)<else>BSet<endif>
>>

set_import() ::= <<
import de.hhu.stups.btypes.BSet;
>>


object_import() ::= <<
import de.hhu.stups.btypes.BObject;
>>

hashset_import() ::= <<
import java.util.HashSet;
>>

arrays_import() ::= <<
import java.util.Arrays;
>>

object(cast) ::= <<
<if(cast)>(BObject)<else>BObject<endif>
>>


binary_arithmetic(arg1,operator,arg2) ::= <<
<arg1>.<operator>(<arg2>)
>>

unary_arithmetic(operator, arg1) ::= <<
<arg1>.<operator>()
>>

if(predicate, then, else1) ::= <<
if(<predicate>) {
    <then>
} <else1; separator=" ">
>>

elseif(predicate, then) ::= <<
else if(<predicate>) {
    <then>
}
>>

else(then) ::= <<
else {
    <then>
}
>>

equal(arg1, arg2) ::= <<
<arg1>.equal(<arg2>)
>>

greater(arg1, arg2) ::= <<
<arg1>.greater(<arg2>)
>>

less(arg1, arg2) ::= <<
<arg1>.less(<arg2>)
>>

and(arg1, arg2) ::= <<
<arg1> && <arg2>
>>

or(arg1, arg2) ::= <<
<arg1> || <arg2>
>>

implies(arg1, arg2) ::= <<
!(<arg1>) || <arg2>
>>

boolean_val(val) ::= <<
<if(val)>new BBoolean(true)<else>new BBoolean(false)<endif>
>>

identifier(identifier, isReturn) ::= <<
<identifier>
>>

number(number) ::= <<
new BInteger(new java.math.BigInteger("<number>"))
>>

