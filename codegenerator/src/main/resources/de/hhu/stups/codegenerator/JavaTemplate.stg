keywords() ::= <<
abstract, assert, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, extends, final, finally, float, for, if, implements, import, instanceof, int, interface, long, native, new, package, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, throws, try, void, volatile, while, true, false, null, var, const, goto, initialized, initialize
>>


machine(imports, includedMachines, machine, constants, values, includes, enums, sets, declarations, initialization, operations, addition) ::= <<
<imports; separator="\n">

public class <machine> {

    <constants; separator="\n">

    <values>

    <includes; separator="\n">

    <enums; separator="\n\n">

    <sets; separator="\n">

    <declarations; separator="\n">

    private boolean initialized = false;

    <initialization>

    <operations; separator="\n\n">


    <addition>

}

>>

initialization(machine, body, machines) ::= <<
public void initialize() {
    if(initialized) {
        throw new RuntimeException("Machine is already initialized");
    }
    <machines : {m | <include_initialization(m)>}; separator="\n">
    <body>
    initialized = true;
}
>>

include_initialization(machine) ::= <<
<machine>.initialize();
>>

operation(machine, returnType, isTyped, operationName, parameters, returnParameters, locals, body, return) ::= <<
public <returnType> <operationName>(<parameters; separator=", ">) {
    if(!initialized) {
        throw new RuntimeException("Machine was not initialized");
    }
    <locals; separator="\n">
    <body>
    <return>
}
>>

return(identifier) ::= <<
return <identifier>;
>>

set_declaration(identifier, enums) ::= <<
private BSet <identifier> = <set_enumeration(enums)>;
>>

set_enumeration(enums) ::= <<
new BSet(<enums; separator=", ">)
>>

enum_call(class, identifier) ::= <<
<class>.<identifier>
>>

set_enum_declaration(name,enums) ::= <<
public enum <name> implements BObject {
    <enums; separator=", \n">;

    public BBoolean equal(<name> o) {
        return new BBoolean(this == o);
    }

    public BBoolean unequal(<name> o) {
        return new BBoolean(this != o);
    }
}
>>

bool() ::= <<
BSet.BOOL
>>

include_declaration(type, identifier) ::= <<
private <declaration(type, identifier)> = new <type>();
>>

global_declaration(type, identifier) ::= <<
private <declaration(type, identifier)>;
>>

local_declaration(type, identifier) ::= <<
<declaration(type, identifier)> = null;
>>

constant(type, identifier, val) ::= <<
private static final <type> <identifier>;
>>

values(assignments) ::= <<
static {
    <assignments; separator="\n">
}
>>

declaration(type, identifier) ::= <<
<type> <identifier>
>>

parameter(type, identifier, isReturn) ::= <<
<type> <identifier>
>>

parallel(loads, others, stores) ::=<<
<loads; separator="\n">
<others; separator="\n">
<stores; separator="\n">
>>

parallel_load(type, identifier, typeCast) ::= <<
<type> _ld_<identifier> = <typeCast> <identifier>;
>>

parallel_store(identifier, typeCast, val) ::= <<
<identifier> = <typeCast> <val>;
>>

assignment(identifier, typeCast, val) ::= <<
<identifier> = <typeCast> <val>;
>>

assignments(assignments) ::= <<
<assignments; separator="\n">
>>

nondeterminism(identifier, typeCast, set) ::= <<
<identifier> = <typeCast> <set>.nondeterminism();
>>

void() ::= <<
void
>>

type(type, cast) ::= <<
<if(cast)>(<type>)<else><type><endif>
>>

import_type(type) ::= <<
import de.hhu.stups.btypes.<type>;
>>


interval(arg1, arg2) ::= <<
BSet.range(<arg1>,<arg2>)
>>

couple_create(arg1, arg2) ::= <<
new BCouple(<arg1>, <arg2>)
>>


binary(arg1,operator,arg2) ::= <<
<arg1>.<operator>(<arg2>)
>>

unary(operator, obj, args) ::= <<
<obj>.<operator>(<args; separator=", ">)
>>

select(predicate, then) ::= <<
if((<predicate>).booleanValue()) {
    <then>
} else {
    throw new RuntimeException("Invocation of the operation is not possible");
}
>>

if(predicate, then, else1) ::= <<
if((<predicate>).booleanValue()) {
    <then>
} <else1; separator=" ">
>>

elseif(predicate, then) ::= <<
else if((<predicate>).booleanValue()) {
    <then>
}
>>

else(then) ::= <<
else {
    <then>
}
>>

choice(len, then, choice1) ::= <<
int index = (int) Math.floor(Math.random() * <len>);
if(index == 0) {
    <then>
} <choice1; separator=" ">
>>


choice1(counter, then) ::= <<
else if(index == <counter>) {
    <then>
}
>>

choice2(then) ::= <<
else {
    <then>
}
>>

any(type, identifier, set, body, index) ::= <<
for(int _<index>_i = 0; _<index>_i \< <set>.size(); _<index>_i++) {
    <type> <identifier> = (<type>) <set>.toArray()[_<index>_i];
    <body>
}
>>

any_body(predicate, body) ::= <<
if(<predicate>.booleanValue()) {
    <body>
    break;
}
>>

while(predicate, then) ::= <<
while((<predicate>).booleanValue()) {
    <then>
}
>>

var(locals, body) ::=<<
<locals; separator="\n">
<body>
>>

boolean_val(val) ::= <<
<if(val)>new BBoolean(true)<else>new BBoolean(false)<endif>
>>

identifier(identifier, isReturn, isPrivate, rhsOnLhs) ::= <<
<if(rhsOnLhs)>_ld_<identifier><else><identifier><endif>
>>

number(number, useBigInteger) ::= <<
<if(useBigInteger)>new BBigInteger("<number>")<else>new BInteger(<number>)<endif>
>>

operation_call_with_assignment(var, machine, function, args, this) ::= <<
<var> = <operation_call_without_assignment(machine, function, args, this)>
>>

operation_call_without_assignment(machine, function, args, this) ::= <<
<if(this)>this.<else>this.<machine>.<endif><function>(<args; separator=",">);
>>

