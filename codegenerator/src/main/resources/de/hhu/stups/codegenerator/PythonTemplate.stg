keywords() ::= <<
abstract, assert, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, extends, final, finally, float, for, if, implements, import, instanceof, int, interface, long, native, new, package, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, throws, try, void, volatile, while, true, false, null, var, const, goto
>>


machine(imports, machine, includes, enums, sets, declarations, initialization, operations) ::= <<
<imports; separator="\n">

class <machine>:

    <includes; separator="\n">

    <enums; separator="\n\n">

    <sets; separator="\n">

    <declarations; separator="\n">

    <initialization>

    <operations; separator="\n\n">

>>

initialization(body, include_initializations) ::= <<
def __init__():
    <include_initializations; separator="\n">
    <body>
>>

include_initialization(machine) ::= <<
<machine>.__init__()
>>

operation(returnType, operationName, parameters, returnParameters, locals, body, return) ::= <<
def <operationName>(<parameters; separator=", ">):
    <locals; separator="\n">
    <body>
    <return>
>>

parameter(type, identifier) ::= <<
<declaration(type, identifier)>
>>

return(identifier) ::= <<
return <identifier>
>>

set_declaration(identifier, enums) ::= <<
__<identifier> = <set_enumeration(enums)>
>>

set_enumeration(enums) ::= <<
BSet(<enums; separator=", ">)
>>

set_element(set,element) ::= <<
<set>.<element>
>>

enum_call(class, identifier) ::= <<
<class>.<identifier>
>>

set_enum_declaration(name,enums) ::= <<
<name> = Enum(<enums; separator=", ">)
>>

include_declaration(type, identifier) ::= <<
__<declaration(type, identifier)> = <type>()
>>

global_declaration(type, identifier) ::= <<
__<declaration(type, identifier)>
>>

local_declaration(type, identifier) ::= <<
<declaration(type, identifier)> = None
>>

declaration(type, identifier) ::= <<
<identifier>
>>

assignment(identifier, val) ::= <<
<identifier> = <val>
>>

assignments(assignments) ::= <<
<assignments; separator="\n">
>>

void() ::= <<
>>

type(type, cast) ::= <<
>>

import_type(type) ::= <<
import <type>
>>


interval(arg1, arg2) ::= <<
BSet.range(<arg1>,<arg2>)
>>

couple_create(arg1, arg2) ::= <<
BCouple(<arg1>, <arg2>)
>>


binary(arg1,operator,arg2) ::= <<
<arg1>.<operator>(<arg2>)
>>

unary(operator, arg1) ::= <<
<arg1>.<operator>()
>>

select(predicate, then) ::= <<
if <predicate>.booleanValue():
    <then>
else:
    raise Error("Invocation of the operation is not possible")
>>

if(predicate, then, else1) ::= <<
if <predicate>.booleanValue():
    <then>
<else1; separator=" ">
>>

elseif(predicate, then) ::= <<
else if <predicate>.booleanValue():
    <then>
>>

else(then) ::= <<
else:
    <then>
>>

while(predicate, then) ::= <<
while <predicate>.booleanValue():
    <then>
>>

boolean_val(val) ::= <<
<if(val)>BBoolean(true)<else>BBoolean(false)<endif>
>>

identifier(identifier, isReturn) ::= <<
<identifier>
>>

number(number) ::= <<
BInteger("<number>")
>>

operation_call_with_assignment(var, machine, function, args, this) ::= <<
<var> = <operation_call(machine, function, args, this)>
>>

operation_call(machine, function, args, this) ::= <<
<if(this)>self.<else><machine>.<endif><function>(<args; separator=",">)
>>

function_call(function, args) ::= <<
<function>.functionCall(<args; separator=",">)
>>

relation_image(function, args) ::= <<
<function>.relationImage(<args; separator=",">)
>>

