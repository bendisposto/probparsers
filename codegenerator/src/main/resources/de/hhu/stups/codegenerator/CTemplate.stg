keywords() ::= <<
auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, int, long, register, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void volatile, while
>>


machine(imports, machine, enums, sets, declarations, initialization, operations) ::= <<
#include \<stdint.h>
#include \<stdio.h>
<imports; separator="\n">

<enums>

<sets>

<declarations; separator="\n">

<initialization>

<operations; separator="\n">

>>

initialization(body) ::= <<
void initialize(void) {
    <body>
}
>>

operation(returnType, operationName, parameters, returnParameters, locals, body, returnIdentifier) ::= <<
void <operationName>(<parameters; separator=", "><returnParameters>) {
    <body>
}
>>

parameter(type, identifier) ::= <<
<declaration(type, identifier)>
>>

set_declaration(type, identifier) ::= <<
>>

set_enum_declaration(name,enums) ::= <<
>>


global_declaration(type, identifier) ::= <<
static <declaration(type, identifier)>;
>>

local_declaration(type, identifier) ::= <<
<declaration(type, identifier)>;
>>

declaration(type, identifier) ::= <<
<type> <identifier>
>>

assignment(identifier, val) ::= <<
<identifier> = <val>;
>>

boolean(cast) ::= <<
<if(!cast)>BBoolean<endif>
>>

boolean_import() ::= <<
#include "BBoolean.c"
>>

integer(cast) ::= <<
<if(!cast)>BInteger<endif>
>>

integer_import() ::= <<
#include "BInteger.c"
>>

set(cast) ::= <<
<if(!cast)>BSet<endif>
>>

set_import() ::= <<
#include "BSet.c"
>>


object(cast) ::= <<
<if(!cast)>BObject<endif>
>>

binary_arithmetic(arg1,operator,arg2) ::= <<
<operator>(<arg1>,<arg2>)
>>

unary_arithmetic(operator, arg) ::= <<
<operator>(<arg>)
>>

boolean_val(val) ::= <<
<if(val)>create_boolean(1)<else>create_boolean(0)<endif>
>>

identifier(identifier, isReturn) ::= <<
<if(isReturn)>(*<identifier>)<else><identifier><endif>
>>

number(number) ::= <<
create_integer(<number>)
>>

