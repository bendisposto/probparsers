keywords() ::= <<
auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, int,
long, register, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile,
while, fclose, clearerr, feof, ferror, fflush, fgetpos, fopen, fread, freopen, fseek, fsetpos, ftell, fwrite, remove,
rename, rewind, setbuf, setvbuf, tmpfile, tmpnam, fprintf, printf, sprintf, vfprintf, vprintf, vsprintf, fscanf, scanf,
sscanf, fgetc, fgets, fputc, fputs, getc, getchar, gets, putc, putchar, puts, ungetc, perror, NULL, BUFSIZ, EOF, FOPEN_MAX, FILENAME_MAX
L_tmpnam, SEEK_CUR, SEEK_END, SEEK_SET, TMP_MAX, stderr, stdin, stdout, size_t, fpos_t, FILE,, wchar_t, div_t, ldiv_t, EXIT_FAILURE, EXIT_SUCCESS,
RAND_MAX, MB_CUR_MAX, atof, atoi, atol, strtod, strtol, strtoul, calloc, free, malloc, realloc, abort, exit, getenv, system, bsearch, qsort, abs,
div, labs, ldiv, rand, srand, mblen, mbstowcs, mbtowc, wcstombs, wctomb, create_atom, main, create_boolean, boolean_value, or, and, xor, create_integer,
int_value, long_value, float_value, double_value, plus, minus, multiply, divide, modulo, next, previous, negative, positive, BInteger, BBoolean
>>


machine(imports, includedMachines, machine, constants, values, includes, enums, sets, declarations, initialization, operations, addition) ::= <<
#include \<stdint.h>
#include \<stdio.h>
#include \<stdlib.h>
<imports; separator="\n">
<includedMachines; separator="\n">

<enums>

<sets>

<declarations; separator="\n">

static int <machine>_initialized = 0;

<initialization>

<operations; separator="\n\n">

<addition>
>>

initialization(machine, body, machines) ::= <<
void <machine>_initialize(void) {
    if(<machine>_initialized) {
        fprintf(stderr, "Machine was not initialized\n");
        exit(-1);
    }
    <machines : {m | <include_initialization(m)>}; separator="\n">
    <body>
    <machine>_initialized = 1;
}
>>

include_initialization(machine) ::= <<
<machine>_initialize();
>>

operation(machine, returnType, isTyped, operationName, parameters, returnParameters, locals, body, return) ::= <<
void <operationName>(<parameters; separator=", "><returnParameters : {par |, <par>}>) {
    if(!<machine>_initialized) {
        fprintf(stderr, "Machine was not initialized\n");
        exit(-1);
    }
    <body>
}
>>

return(identifier) ::= <<
>>

set_declaration(identifier, enums) ::= <<
>>

set_enum_declaration(name,enums) ::= <<
>>

set_enumeration(enums) ::= <<
>>

enum_call(class, identifier) ::= <<
>>


include_declaration(type, identifier) ::= <<
>>

global_declaration(type, identifier) ::= <<
static <declaration(type, identifier)>;
>>

local_declaration(type, identifier) ::= <<
<declaration(type, identifier)>;
>>

declaration(type, identifier) ::= <<
<type> <identifier>
>>

constant(type, identifier, val) ::= <<
>>

values(assignments) ::= <<
>>


parameter(type, identifier, isReturn) ::= <<
<if(isReturn)><type> *<identifier><else><type> <identifier><endif>
>>

assignment(identifier, typeCast, val) ::= <<
<identifier> = <val>;
>>

assignments(assignments) ::= <<
<assignments; separator="\n">
>>

void() ::= <<
>>

type(type, cast) ::= <<
<if(!cast)><type><endif>
>>


import_type(type) ::= <<
#include "<type>.c"
>>

interval(arg1, arg2) ::= <<
>>

couple_create(arg1, arg2) ::= <<

>>



binary(arg1,operator,arg2) ::= <<
<operator>(<arg1>,<arg2>)
>>

unary(operator, obj, args) ::= <<
<operator>(<obj>,<args; separator=", ">)
>>

select(predicate, then) ::= <<
if((<predicate>).booleanValue()) {
    <then>
} else {
    fprintf(stderr, "Invocation of the operation is not possible\n");
    exit(-1);
}
>>

if(predicate, then, else1) ::= <<
if((<predicate>).booleanValue()) {
    <then>
} <else1; separator=" ">
>>

elseif(predicate, then) ::= <<
else if((<predicate>).booleanValue()) {
    <then>
}
>>

else(then) ::= <<
else {
    <then>
}
>>

while(predicate, then) ::= <<
while((<predicate>).booleanValue()) {
    <then>
}
>>

var(locals, body) ::=<<
<locals; separator="\n">
<body>
>>


boolean_val(val) ::= <<
<if(val)>create_boolean(1)<else>create_boolean(0)<endif>
>>

identifier(identifier, isReturn, isPrivate, rhsOnLhs) ::= <<
<if(isReturn)>(*<identifier>)<else><identifier><endif>
>>

number(number, useBigInteger) ::= <<
create_integer(<number>)
>>

operation_call_with_assignment(var, machine, function, args, this) ::= <<
<function>(<args; separator=",">, &<var>);
>>

operation_call_without_assignment(machine, function, args, this) ::= <<
<function>(<args; separator=",">);
>>

