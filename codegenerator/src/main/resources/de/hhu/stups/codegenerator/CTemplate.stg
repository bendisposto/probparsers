keywords() ::= <<
auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, int,
long, register, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile,
while, fclose, clearerr, feof, ferror, fflush, fgetpos, fopen, fread, freopen, fseek, fsetpos, ftell, fwrite, remove,
rename, rewind, setbuf, setvbuf, tmpfile, tmpnam, fprintf, printf, sprintf, vfprintf, vprintf, vsprintf, fscanf, scanf,
sscanf, fgetc, fgets, fputc, fputs, getc, getchar, gets, putc, putchar, puts, ungetc, perror, NULL, BUFSIZ, EOF, FOPEN_MAX, FILENAME_MAX
L_tmpnam, SEEK_CUR, SEEK_END, SEEK_SET, TMP_MAX, stderr, stdin, stdout, size_t, fpos_t, FILE,, wchar_t, div_t, ldiv_t, EXIT_FAILURE, EXIT_SUCCESS,
RAND_MAX, MB_CUR_MAX, atof, atoi, atol, strtod, strtol, strtoul, calloc, free, malloc, realloc, abort, exit, getenv, system, bsearch, qsort, abs,
div, labs, ldiv, rand, srand, mblen, mbstowcs, mbtowc, wcstombs, wctomb
>>


machine(imports, includedMachines, machine, enums, sets, declarations, initialization, operations, addition) ::= <<
#include \<stdint.h>
#include \<stdio.h>
#include \<stdlib.h>
<imports; separator="\n">
<includedMachines; separator="\n">

<enums>

<sets>

<declarations; separator="\n">

static int <machine>_initialized = 0;

<initialization>

<operations; separator="\n\n">

<addition>
>>

initialization(machine, body, machines) ::= <<
void <machine>_initialize(void) {
    if(<machine>_initialized) {
        fprintf(stderr, "Machine was not initialized\n");
        exit(-1);
    }
    <machines : {m | <include_initialization(m)>}; separator="\n">
    <body>
    <machine>_initialized = 1;
}
>>

include_initialization(machine) ::= <<
<machine>_initialize();
>>

method() ::= <<
>>

operation(machine, operationName, parameters, returnParameters, body) ::= <<
void <operationName>(<parameters; separator=", "><returnParameters : {par |, <par>}>) {
    if(!<machine>_initialized) {
        fprintf(stderr, "Machine was not initialized\n");
        exit(-1);
    }
    <body>
}
>>

return() ::= <<
>>

no_return() ::=<<
>>

set_declaration(identifier, type, enums) ::= <<
static BSet <identifier> = <set_enumeration(type, enums)>;
>>

set_enum_declaration(name,enums) ::= <<
enum <name>_type {
    <enums; separator=", \n">;
};

typedef struct <name> {
    struct BObject;
    <name>_type value;
} <name>;

<name> create_<name>(<name>_type value) {
    <name> result = {value};
    return result;
}

BBoolean equal(<name> o1, <name> o2) {
    return create_boolean(o1.value == o2.value);
}

BBoolean unequal(<name> o1, <name> o2) {
    return create_boolean(o1.value != o2.value);
}
>>

set_enumeration(type, enums) ::= <<
create_bset((<type>[]){<enums; separator=", ">})
>>

enum_call(class, identifier) ::= <<
create_<class>(<identifier>);
>>

bool() ::= <<
BOOL
>>

include_declaration(type, identifier) ::= <<
>>

global_declaration(type, identifier) ::= <<
static <declaration(type, identifier)>;
>>

local_declaration(type, identifier) ::= <<
<declaration(type, identifier)>;
>>

declaration(type, identifier) ::= <<
<type> <identifier>
>>

constant() ::= <<
>>

values() ::= <<
>>


parameter(type, identifier, isReturn) ::= <<
<if(isReturn)><type> *<identifier><else><type> <identifier><endif>
>>

parallel(loads, others, stores) ::=<<
<loads; separator="\n">
<others; separator="\n">
<stores; separator="\n">
>>

parallel_load(type, identifier, typeCast) ::= <<
<type> _ld_<identifier> = <typeCast> <identifier>;
>>

parallel_store(identifier, typeCast, val) ::= <<
<identifier> = <typeCast> <val>;
>>

assignment(identifier, val) ::= <<
<identifier> = <val>;
>>

assignments(assignments) ::= <<
<assignments; separator="\n">
>>

nondeterminism(identifier, typeCast, set) ::= <<
<identifier> = <typeCast> nondeterminism(<set>);
>>

void() ::= <<
>>

type(type, cast) ::= <<
<if(!cast)><type><endif>
>>

set_type(cast) ::=<<
<if(!cast)>BSet<endif>
>>


import_type(type) ::= <<
#include "<type>.c"
>>

interval(arg1, arg2) ::= <<
range(<arg1>, <arg2>)
>>

couple_create(arg1, arg2) ::= <<
>>


binary(arg1,operator,arg2) ::= <<
<operator>(<arg1>,<arg2>)
>>

unary(operator, obj, args) ::= <<
<operator>(<obj>,<args; separator=", ">)
>>

select(predicate, then) ::= <<
if(booleanValue(<predicate>)) {
    <then>
} else {
    fprintf(stderr, "Invocation of the operation is not possible\n");
    exit(-1);
}
>>

if(predicate, then, else1) ::= <<
if(booleanValue(<predicate>)) {
    <then>
} <else1; separator=" ">
>>

elseif(predicate, then) ::= <<
else if(booleanValue(<predicate>)) {
    <then>
}
>>

else(then) ::= <<
else {
    <then>
}
>>

choice(len, then, choice1) ::= <<
int index = (int) rand() % <len>;
if(index == 0) {
    <then>
} <choice1; separator=" ">
>>


choice1(counter, then) ::= <<
else if(index == <counter>) {
    <then>
}
>>

choice2(then) ::= <<
else {
    <then>
}
>>

any(type, identifier, set, body, index) ::= <<
for(int _<index>_i = 0; _<index>_i \< (size(<set>)); _<index>_i++) {
    <type> <identifier> = *(((<type>**) pblSetToArray(<set>.set))[_<index>_i]);
    <body>
}
>>

any_body(predicate, body) ::= <<
if(booleanValue(<predicate>)) {
    <body>
    break;
}
>>

while(predicate, then) ::= <<
while(booleanValue(<predicate>)) {
    <then>
}
>>

var(locals, body) ::=<<
<locals; separator="\n">
<body>
>>


boolean_val(val) ::= <<
<if(val)>create_boolean(1)<else>create_boolean(0)<endif>
>>

identifier(identifier, isReturn) ::= <<
<if(isReturn)>(*<identifier>)<else><identifier><endif>
>>

number(number) ::= <<
create_integer(<number>)
>>

operation_call_with_assignment(var, function, args) ::= <<
<function>(<args; separator=",">, &<var>);
>>

operation_call_without_assignment(function, args) ::= <<
<function>(<args; separator=",">);
>>

