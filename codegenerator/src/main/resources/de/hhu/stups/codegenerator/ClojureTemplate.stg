keywords() ::= <<
abstract, assert, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, extends, final, finally, float, for, if, implements, import, instanceof, int, interface, long, native, new, package, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, throws, try, void, volatile, while, true, false, null, var, const, goto
>>

machine(imports, requires, methods, includedMachines, machine, constants, values, includes, enums, sets, declarations, initialization, operations, addition) ::= <<
(ns <machine>
    <imports; separator="\n">
    (:import de.hhu.stups.btypes.BUtils)
    <requires; separator="\n">
    (:require [btypes.butils])
    (:gen-class
        :name <machine>
        :constructors {[] []}
        :init create-<machine>
        :state <machine>-state))

(gen-class
    :name <machine>
    :constructors {[] []}
    :init create-<machine>
    :state <machine>-state
    :methods [<methods; separator=" ">])

<enums; separator="\n\n">

(defn -create-<machine> []
    [[] {:initialized false
        :_locals {}
        <values; separator=" ">
        <includes; separator=" ">
        <declarations; separator=" ">
        <sets; separator=" ">
            }])

<initialization>

<operations; separator="\n\n">


<addition>
>>

initialization(machine, body, machines) ::= <<
(defn -initialize [this]
    (if (:initialized (.-<machine>-state this))
        (throw (RuntimeException. "Machine is already initialized")))
    <machines : {m | <include_initialization(m)>}; separator="\n">
    <body>
    (reset! (.-<machine>-state this) (assoc-in (.-<machine>-state this) [:initialized] true)) nil)
>>

include_initialization(machine) ::= <<
(.initialize <machine>)
>>

method(operationName, argsTypes, returnType) ::= <<
[<operationName> [<argsTypes; separator=" ">] <returnType>]
>>

operation(machine, operationName, parameters, locals, body, return) ::= <<
(defn -<operationName> [this<parameters : {param |  param}>]
    (if (not (:initialized (.-<machine>-state this)))
        (throw (RuntimeException. "Machine is already initialized")))
    (do (reset! (.-<machine>-state this) (assoc (.-<machine>-state this) :_locals {<locals : {l | :l nil}; separator=" ">}))
        <body> <return>))
>>

return(machine, identifier) ::= <<
(get-in (.-<machine>-state this) [:_locals :<identifier>])
>>

no_return() ::=<<
nil
>>

set_declaration(identifier, type, enums) ::= <<
:<identifier> <set_enumeration(type, enums)>
>>

set_enumeration(enums) ::= <<
(de.hhu.stups.btypes.BSet. <enums; separator=" ">)
>>

enum_call(identifier) ::= <<
(de.hhu.stups.btypes.BEnum :<identifier>)
>>

set_enum_declaration(name,enums) ::= <<
>>

bool() ::= <<
(de.hhu.stups.BUtils/BOOL)
>>

include_declaration(identifier) ::= <<
:<declaration(identifier)> (<type>.)
>>

global_declaration(identifier) ::= <<
:<declaration(identifier)> nil
>>

local_declaration(identifier) ::= <<
:<declaration(identifier)> nil
>>

constant() ::= <<
>>

values(assignments) ::= <<
<assignments; separator="\n">
>>

declaration(identifier) ::= <<
<identifier>
>>

parameter(identifier) ::= <<
<identifier>
>>

parallel(machine, loads, others, stores) ::=<<
(do (reset! (.-<machine>-state this) (assoc (.-<machine>-state this) :_locals {<loads : {l | :l nil}; separator=" ">}))
    <others; separator="\n">
    <stores; separator="\n">)
>>

parallel_load(identifier) ::= <<
_ld_<identifier> <identifier>
>>

parallel_store(machine, identifier, isPrivate, val) ::= <<
(reset! (.-<machine>-state this) (assoc-in (.-<machine>-state this) [<if(isPrivate)><else>:_locals<endif> :<identifier>] <val>))
>>

assignment(machine, identifier, isPrivate, val) ::= <<
(reset! (.-<machine>-state this) (assoc-in (.-<machine>-state this) [<if(isPrivate)><else>:_locals<endif> :<identifier>] <val>))
>>

assignments(assignments) ::= <<
<assignments; separator="\n">
>>

nondeterminism(machine, identifier, isPrivate, set) ::= <<
(reset! (.-<machine>-state this) (assoc-in (.-<machine>-state this) [<if(isPrivate)><else>:_locals<endif> :<identifier>] (nondeterminism <set>)))
>>

void() ::= <<
>>

type() ::= <<
>>

set_type() ::=<<
>>

import_type(type) ::= <<
(:import de.hhu.stups.btypes.<type>)
>>


interval(arg1, arg2) ::= <<
(de.hhu.stups.btypes.BSet.range. <arg1> <arg2>)
>>

couple_create(arg1, arg2) ::= <<
(de.hhu.stups.btypes.BCouple. <arg1> <arg2>)
>>


binary(arg1,operator,arg2) ::= <<
(.<operator> <arg1> <arg2>)
>>

unary(operator, obj, args) ::= <<
(.<operator> <obj> <args; separator=" ">)
>>

select(predicate, then) ::= <<
(if (.booleanValue <predicate>)
    (do <then>)
    (throw (RuntimeException. "Invocation of the operation is not possible")))
>>

if(predicate, then, else1) ::= <<
(if (.booleanValue <predicate>)
    (do <then>)
    <else1; separator=" ">)
>>

elseif(predicate, then) ::= <<
(if (.booleanValue <predicate>)
    (do <then>))
>>

else(then) ::= <<
(do <then>)
>>

choice(len, then, choice1) ::= <<
(let [index (Math/floor (* (Math/random) <len>))]
    (if (= index 0)
        (do <then>)
        <choice1; separator=" ">))
>>

choice1(counter, then) ::= <<
(if (= index <counter>)
    (do <then>))
>>

choice2(then) ::= <<
(do <then>)
>>

any(identifier, set, body, index) ::= <<
(doseq [_<index>_i (range (inc (size <set>)))]
    (let [<identifier> (nth <set> _<index>_i)]
        <body>))
>>

any_body(predicate, body) ::= <<
(if (.booleanValue <predicate>)
    (do <body>))
>>

while(predicate, then) ::= <<
(while (.booleanValue <predicate>)
    (do <then>))
>>

var(machine, locals, body) ::=<<
(do (reset! (.-<machine>-state this) (assoc (.-<machine>-state this) :_locals {<locals : {l | :l nil}; separator=" ">}))
    <body>)
>>

boolean_val(val) ::= <<
<if(val)>(de.hhu.stups.btypes.BBoolean. true)<else>(de.hhu.stups.btypes.BBoolean. false)<endif>
>>

identifier(machine, identifier, isAssigned, rhsOnLhs) ::= <<
<if(rhsOnLhs)>_ld_<identifier><elseif(isAssigned)><identifier><else>(get-in (.-<machine>-state this) :<identifier>)<endif>
>>

number(number, useBigInteger) ::= <<
<if(useBigInteger)>(de.hhu.stups.btypes.BBigInteger. "<number>")<else>(de.hhu.stups.btypes.BInteger. <number>)<endif>
>>

operation_call_with_assignment(machine, var, isPrivate, function, args, this) ::= <<
(assoc-in (.-<machine>-state this) [<if(isPrivate)><else>:_locals<endif> :<var>] <operation_call_without_assignment(machine, function, args, this)>)
>>

operation_call_without_assignment(machine, function, args, this) ::= <<
(<if(this)><else><machine>/<endif><function> <args; separator=" ">)
>>

