keywords() ::= <<
abstract, assert, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, extends, final, finally, float, for, if, implements, import, instanceof, int, interface, long, native, new, package, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, throws, try, void, volatile, while, true, false, null, var, const, goto, initialized, initialize
>>


machine(imports, includedMachines, machine, constants, values, includes, enums, sets, declarations, initialization, operations, addition) ::= <<
(ns <machine>
    <imports; separator="\n">
    (:import de.hhu.stups.btypes.BUtils))

<enums; separator="\n\n">

(defn -create_<machine> []
    [[] #{:initialized false
        <values; separator=" ">
        <includes; separator=" ">
        <declarations; separator=" ">
        <sets; separator=" ">
            }])

<initialization>

<operations; separator="\n\n">


<addition>
>>

initialization(machine, body, machines) ::= <<
(defn -initialize []
    (if initialized
        (throw (RuntimeException. "Machine is already initialized")))
    <machines : {m | <include_initialization(m)>}; separator="\n">
    <body>
    (assoc-in state [:initialized] true) nil)
>>

include_initialization(machine) ::= <<
(initialize <machine>)
>>

operation(machine, returnType, isTyped, operationName, parameters, returnParameters, locals, body, return) ::= <<
(defn -<operationName> [<parameters; separator=" ">]
    (if (not initialized)
        (throw (RuntimeException. "Machine is already initialized")))
    (let [locals #{<locals; separator=" ">}]
        <body> <return>))
>>

return(identifier) ::= <<
(get-in locals :<identifier>)
>>

no_return() ::=<<
nil
>>

set_declaration(identifier, type, enums) ::= <<
:<identifier> <set_enumeration(enums)>
>>

set_enumeration(type, enums) ::= <<
(de.hhu.stups.btypes.BSet. <enums; separator=" ">)
>>

enum_call(class, identifier) ::= <<
<class>.<identifier>
>>

set_enum_declaration(name,enums) ::= <<
public enum <name> implements BObject {
    <enums; separator=", \n">;

    public BBoolean equal(<name> o) {
        return new BBoolean(this == o);
    }

    public BBoolean unequal(<name> o) {
        return new BBoolean(this != o);
    }
}
>>

bool() ::= <<
(de.hhu.stups.BUtils/BOOL)
>>

include_declaration(type, identifier) ::= <<
:<declaration(type, identifier)> (<type>.)
>>

global_declaration(type, identifier) ::= <<
:<declaration(type, identifier)> nil
>>

local_declaration(type, identifier) ::= <<
:<declaration(type, identifier)> nil
>>

constant(type, identifier, val) ::= <<
>>

values(assignments) ::= <<
<assignments; separator="\n">
>>

declaration(type, identifier) ::= <<
<identifier>
>>

parameter(type, identifier, isReturn) ::= <<
<identifier>
>>

parallel(loads, others, stores) ::=<<
(let [locals #{<locals; separator=" ">}]
    <others; separator="\n">
    <stores; separator="\n">)
>>

parallel_load(type, identifier, typeCast) ::= <<
_ld_<identifier> <identifier>
>>

parallel_store(identifier, isPrivate, typeCast, val) ::= <<
(assoc-in <if(isPrivate)>state<else>locals<endif> [:<identifier>] <val>)
>>

assignment(identifier, isPrivate, typeCast, val) ::= <<
(assoc-in <if(isPrivate)>state<else>locals<endif> [:<identifier>] <val>)
>>

assignments(assignments) ::= <<
<assignments; separator="\n">
>>

nondeterminism(identifier, isPrivate, typeCast, set) ::= <<
(assoc-in <if(isPrivate)>state<else>locals<endif> [:<identifier>] (nondeterminism set))
>>

void() ::= <<
>>

type(type, cast) ::= <<
>>

set_type(type, cast) ::=<<
>>

import_type(type) ::= <<
(:import de.hhu.stups.btypes.<type>)
>>


interval(arg1, arg2) ::= <<
(de.hhu.stups.btypes.BSet.range. <arg1> <arg2>)
>>

couple_create(arg1, arg2) ::= <<
(de.hhu.stups.btypes.BCouple. <arg1> <arg2>)
>>


binary(arg1,operator,arg2) ::= <<
(<operator> <arg1> <arg2>)
>>

unary(operator, obj, args) ::= <<
(<operator> <obj> <args; separator=" ">)
>>

select(predicate, then) ::= <<
(if (booleanValue <predicate>)
    (do <then>)
    (throw (RuntimeException. "Invocation of the operation is not possible")))
>>

if(predicate, then, else1) ::= <<
(if (booleanValue <predicate>)
    (do <then>)
    <else1; separator=" ">)
>>

elseif(predicate, then) ::= <<
(if (booleanValue <predicate>)
    (do <then>))
>>

else(then) ::= <<
(do <then>)
>>

choice(len, then, choice1) ::= <<
(let [index Math.floor(Math.random() * <len>)]
    (if (= index 0)
        (do <then>)
        <choice1; separator=" ">))
>>

choice1(counter, then) ::= <<
(if (= index <counter>)
    (do <then>))
>>

choice2(then) ::= <<
(do <then>)
>>

any(type, identifier, set, body, index) ::= <<
(for [_<index>_i (range (inc (size <set>)))]
    (assoc-in locals [:<identifier>] (nth <set> _<index>_i))
    (do <body>))
>>

any_body(predicate, body) ::= <<
(if (booleanValue <predicate>)
    (do <body>))
>>

while(predicate, then) ::= <<
(while (booleanValue <predicate>)
    (do <then>))
>>

var(locals, body) ::=<<
(let [locals #{<locals; separator=" ">}]
    <body>)
>>

boolean_val(val) ::= <<
<if(val)>(de.hhu.stups.btypes.BBoolean. true)<else>(de.hhu.stups.btypes.BBoolean. false)<endif>
>>

identifier(identifier, isReturn, isPrivate, rhsOnLhs) ::= <<
<if(rhsOnLhs)>_ld_<identifier><else><identifier><endif>
>>

number(number, useBigInteger) ::= <<
<if(useBigInteger)>(de.hhu.stups.btypes.BBigInteger. "<number>")<else>(de.hhu.stups.btypes.BInteger. <number>)<endif>
>>

operation_call_with_assignment(var, isPrivate, machine, function, args, this) ::= <<
(assoc-in <if(isPrivate)>state<else>locals<endif>  [:<var>] <operation_call_without_assignment(machine, function, args, this)>)
>>

operation_call_without_assignment(machine, function, args, this) ::= <<
(<if(this)><else><machine>/<endif><function> <args; separator=" ">)
>>

