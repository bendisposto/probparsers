// BParser

dependsOn(':prologlib')
dependsOn(':parserbase')

sourceCompatibility = 1.5

configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    sablecc(group: 'de.stups', name: 'sablecc', version: '3.2.5', changing: true)
}


dependencies {
    compile project(path: ":prologlib", configuration: "archives") 
    compile project(path: ":parserbase", configuration: "archives") 
}

sourceSets {
    main {
        java {
          	srcDirs = ['build/temp','src/main/java']
        }
    }
}


task genPragmaArgumentLexer(type:JavaExec) {
	inputs.dir new File('src/main/resources/grammars')
	outputs.dir new File('build/temp/de/be4/classicalb/core/pragma') // prevent rebuild because the second parser replaces patchfiles
//	doFirst{ file('build/temp').mkdirs() }
	 main = 'org.sablecc.sablecc.SableCC'
	// classpath =  sourceSets.main.compileClasspath
	 classpath = configurations.sablecc
	 maxHeapSize = '1024m'
	 args = ['-d','build/temp','src/main/resources/grammars/PragmaArgumentLexer.scc']
}

task genPreparser(type:JavaExec) {
	inputs.dir new File('src/main/resources/grammars')
	outputs.dir new File('build/temp/de/be4/classicalb/core/preparser') // prevent rebuild because the second parser replaces patchfiles
//	doFirst{ file('build/temp').mkdirs() }
	 main = 'org.sablecc.sablecc.SableCC'
	// classpath =  sourceSets.main.compileClasspath
	 classpath = configurations.sablecc
	 maxHeapSize = '1024m'
	 args = ['-d','build/temp','src/main/resources/grammars/PreParser.scc']
}

task genBParser(type:JavaExec) {
	dependsOn = ['genPreparser','genPragmaArgumentLexer']
	inputs.dir new File('src/main/resources/grammars')
	outputs.dir new File('build/temp')
//	doFirst{ file('build/temp').mkdirs() }
	 main = 'org.sablecc.sablecc.SableCC'
	// classpath =  sourceSets.main.compileClasspath
	 classpath = configurations.sablecc
	 maxHeapSize = '1024m'
	 args = ['-d','build/temp','src/main/resources/grammars/BParser.scc']
}

jar {
 include '**/*.class'
 exclude '**.*.scc' 
 from 'build/temp'
 include '**/*.dat'
 include '**/*.properties'
}

task patches << {
	ant.patch(patchfile: 'parserPerformance.patch', originalfile: 'build/temp/de/be4/classicalb/core/parser/parser/Parser.java' )
	ant.patch(patchfile: 'parserSlurp.patch', originalfile: 'build/temp/de/be4/classicalb/core/parser/parser/Parser.java' )
}

compileJava { 
 dependsOn = ['genPreparser','genBParser', 'patches',':prologlib:deploy',':parserbase:deploy'] 
 doFirst {
	def buildconstants_class = """CompileDate=${new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()).toString()}"""
	File f = file("src/main/resources/revision.properties")
    f.delete()
    f <<  buildconstants_class
  }
}

sourceSets.test.runtimeClasspath += files(sourceSets.main.java.srcDirs)



