Package de.be4.classicalb.core.preparser;

/*******************************************************************
 * Helpers                                                         *
 *******************************************************************/

Helpers
  line_comment_start = '//';
  comment_start = '/*';
  comment_end = '*/';

  underscore = '_';
  semicolon = ';';
  star = '*';
  slash = '/';
  hash = '#';
  double_quotation = '"';
  triple_quote = 39 39 39 ;
  single_quate = 39 ;

  lf = 10;
  cr = 13;

  line_break = [lf + cr];

  small_letter =  ['a'..'z'];
  capital_letter = ['A' .. 'Z'];
  letter = small_letter | capital_letter;
  digit = ['0' .. '9'] ;

  all_chars = [0 .. 0xffff];
  layout_char = [[[0 .. 32] + [127..160]] + [[8206 .. 8207] + [8232 .. 8233]]];

  all_chars_without_quote_and_newline = [[all_chars - double_quotation] - line_break ];
  string_literal = double_quotation  (all_chars_without_quote_and_newline | '\' double_quotation)* double_quotation;

  all_chars_without_single_quote = [all_chars - 39];
  multiline_string_literal = (all_chars_without_single_quote| 39 all_chars_without_single_quote | 39 39 all_chars_without_single_quote  | '\' 39)*;

  word_chars = [[[[[all_chars - layout_char] - semicolon] - '('] - ')'] - slash];
  comment_char = [[all_chars - star] - slash];

  abstract_constants = 'ABSTRACT_CONSTANTS';
  abstract_variables = 'ABSTRACT_VARIABLES';
  assertions = 'ASSERTIONS';
  concrete_constants = 'CONCRETE_CONSTANTS';
  concrete_variables = 'CONCRETE_VARIABLES';
  constants = 'CONSTANTS';
  constraints = 'CONSTRAINTS';
  end = 'END';
  implementation = 'IMPLEMENTATION';
  imports = 'IMPORTS';
  extends = 'EXTENDS';
  includes = 'INCLUDES';
  initialisation = 'INITIALISATION' | 'INITIALIZATION';
  invariant = 'INVARIANT';
  local_operations = 'LOCAL_OPERATIONS';
  machine = 'MACHINE' | 'MODEL' | 'SYSTEM' | 'RULES_MACHINE';
  operations = 'OPERATIONS' | 'EVENTS'; /* EVENTS for Event-B */
  promotes = 'PROMOTES';
  properties = 'PROPERTIES';
  refines = 'REFINES';
  refinement = 'REFINEMENT';
  sees = 'SEES';
  sets = 'SETS';
  uses = 'USES';
  values = 'VALUES';
  variables = 'VARIABLES';


/*******************************************************************
 * States                                                          *
 *******************************************************************/

States

normal,
  definitions,
  definitions_rhs,
  definition_file,
  no_definitions,
  comment,
  multiline_string_state;

/*******************************************************************
 * Tokens                                                          *
 *******************************************************************/

Tokens

  {normal, definitions, definitions_rhs} comment = comment_start ;  // switch to comment state is done in PreLexer.java
  {comment} comment_end = comment_end ; // switch back to previous state is done in PreLexer.java
  {comment} comment_content = all_chars ;

  {normal, definitions_rhs} multiline_string_start = triple_quote;
  {multiline_string_state} multiline_string_end = triple_quote; // switch back to previous state is done in PreLexer.java
  {multiline_string_state} multiline_string_content =  multiline_string_literal;

  {normal, definitions, definitions_rhs} line_comment = line_comment_start [all_chars - line_break]* line_break?;

  {normal -> definitions} definitions = 'DEFINITIONS';
  {normal, definitions -> normal, definitions_rhs} other_clause_begin =
    machine |
    abstract_constants | abstract_variables | assertions | concrete_constants |
    concrete_variables | constants | constraints | implementation |
    imports | includes | initialisation | invariant | local_operations |
    operations | promotes | properties | refines | refinement | extends |
    sees | sets | uses | values | variables ;

  {normal, definitions -> normal} end_machine = end ;

  {normal} kw_definitions = '#DEFINITIONS';
  {normal -> no_definitions} kw_prefix = '#EXPRESSION' | '#PREDICATE' | '#SUBSTITUTION' ;
  {no_definitions} no_def_something = all_chars*;

  {definitions} identifier_literal = letter (letter | digit | underscore)* ;
  {definitions, definitions_rhs} left_par = '(';
  {definitions, definitions_rhs} right_par = ')';
  {definitions, definitions_rhs} slash = slash;
  {definitions} comma = ',';

  {definitions -> definitions_rhs} begin_def_body = '==';
  {definitions_rhs} rhs_body =  [word_chars - double_quotation]  | string_literal ;
  {definitions_rhs} begin_nesting =
  'BEGIN' | 'PRE' | 'ASSERT' | 'CHOICE' | 'IF' |
  'SELECT' | 'CASE' | 'ANY' | 'VAR' | 'WHILE' | 'LET' ;
  {definitions_rhs} end_nesting = end ;
  {definitions_rhs} rhs_identifier = letter (letter | digit | underscore)* ; // lex identifiers as complete words to ignore keywords within identifiers
  {definitions, definitions_rhs} semicolon = semicolon; // returning to state definitions is done by PreLexer

  {definitions -> definition_file, definition_file -> definitions} double_quotation = double_quotation;
  {definition_file} filename = all_chars_without_quote_and_newline*;
  //{definitions} filename= string_literal;

  {normal} something = letter (letter | digit | underscore)*
                       | string_literal
                       | [all_chars - double_quotation]
                       ;

  white_space = layout_char+;


/*******************************************************************
 * Ignored Tokens                                                  *
 *******************************************************************/
Ignored Tokens

  white_space, other_clause_begin, end_machine, something,
  comment, comment_content, comment_end, line_comment,
  multiline_string_start, multiline_string_end, multiline_string_content;


/*******************************************************************
 * Productions                                                     *
 *******************************************************************/
Productions

parse_unit {-> parse_unit} =
  {defs_clause} [def_clause]:def_clause {-> New parse_unit.defs([def_clause.definition])} |
  {kw_definitions} kw_definitions [list]:def_clause {-> New parse_unit.defs([list.definition])} |
  {something} kw_prefix no_def_something {-> New parse_unit.no_defs()} |
  {nothing} {-> New parse_unit.no_defs()} ;

/*
parse_unit {-> parse_unit} =
  {defs_clause} [def_clause]:def_clause? {-> New parse_unit.defs([def_clause.definition])} |
  {kw_definitions} kw_definitions [list]:def_clause {-> New parse_unit.defs([list.definition])} |
  {no_defs} kw_prefix no_def_something {-> New parse_unit.no_defs()} ;
*/

def_clause {-> definition*} = definitions [list]:definition_list semicolon? {-> [list.definition]} ;

definition_list {-> definition*} =
  {single} [def]:definition {-> [def.definition]} |
  {multi} [rest]:definition_list semicolon [def]:definition {-> [rest.definition, def.definition]} ;

definition {-> definition} =
  [def_name]:identifier_literal [parameters]:def_parameters? begin_def_body [rhs]:rhs_body {-> New definition(def_name, [parameters.identifier_literal], rhs)} |
  {file} [q1]:double_quotation [filename]:filename [q2]:double_quotation {-> New definition.file(filename)} ;

def_parameters {-> identifier_literal*} = left_par [parameters]:identifier_list right_par {-> [parameters.identifier_literal]} ;

identifier_list {-> identifier_literal*} =
  {single} [parameter]:identifier_literal {-> [parameter]} |
  {multi} [rest]:identifier_list comma [parameter]:identifier_literal {-> [rest.identifier_literal, parameter]} ;



/*******************************************************************
 * Abstract Syntax Tree                                            *
 *******************************************************************/
Abstract Syntax Tree

parse_unit =
  {defs} definition* |
  {no_defs} ;

definition =
  [def_name]:identifier_literal [parameters]:identifier_literal* [rhs]:rhs_body |
  {file} [filename]:filename;
