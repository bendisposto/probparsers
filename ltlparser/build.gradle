// LTL Parser 

//dependsOn(':prologlib')
//dependsOn(':parserbase')


configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


dependencies {
  sablecc(group: 'de.stups', name: 'sablecc', version: '3.2.5', changing: true)
 // sablecc(group: 'sablecc', name: 'sablecc', version: '3.2')
 compile project(path: ":prologlib", configuration: "archives") 
 compile project(path: ":parserbase", configuration: "archives") 
}

sourceSets {
    main {
        java {
          	srcDirs = ['build/temp','src/main/java']
        }
    }
}

task genParser(type:JavaExec) {
	doFirst{ file('build/temp').mkdirs() }
	inputs.dir new File('src/main/resources/grammars')
	outputs.dir new File('build/temp')
//	doFirst{ file('build/temp').mkdirs() }
	 main = 'org.sablecc.sablecc.SableCC'
	// classpath =  sourceSets.main.compileClasspath
	 classpath = configurations.sablecc
	 maxHeapSize = '1024m'
	 args = ['-d','build/temp','src/main/resources/LtlParser.scc']
}

task genCtlParser(type:JavaExec) {
	doFirst{ file('build/temp').mkdirs() }
	inputs.dir new File('src/main/resources/grammars')
	outputs.dir new File('build/temp')
	 main = 'org.sablecc.sablecc.SableCC'
	 classpath = configurations.sablecc
	 maxHeapSize = '1024m'
	 args = ['-d','build/temp','src/main/resources/CtlParser.scc']
}

jar {
 include '**/*.class'
 exclude '**.*.scc' 
 from 'build/temp'
 include '**/*.dat'
}

compileJava { 
 dependsOn = ['genParser','genCtlParser',':prologlib:deploy',':parserbase:deploy'] 
}

sourceSets.test.runtimeClasspath += files(sourceSets.main.java.srcDirs)


