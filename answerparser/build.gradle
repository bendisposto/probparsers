// ProB Answer Parser

//dependsOn(':prologlib')
apply plugin: 'jacoco'


dependencies {

    compile project(path: ":prologlib", configuration: "archives")
}

sourceSets {
    main {
        java {
          	srcDirs = ['build/temp','src/main/java']
        }
    }
}



task genParser(type:JavaExec) {
	doFirst{ file('build/temp').mkdirs() }
	inputs.dir new File('src/main/resources/')
	outputs.dir new File('build/temp')
//	doFirst{ file('build/temp').mkdirs() }
	 main = 'org.sablecc.sablecc.SableCC'
	// classpath =  sourceSets.main.compileClasspath
	 classpath = configurations.sablecc
	 maxHeapSize = '1024m'
	 args = ['-d','build/temp','src/main/resources/prob.scc']
}

jar {
 include '**/*.class'
 exclude '**.*.scc'
 from 'build/temp'
 include '**/*.dat'
 from sourceSets.main.toString()
 include '**/*.java'
}

compileJava {
 dependsOn = ['genParser',':prologlib:deploy']
 doLast {
	 ant.patch(patchfile: 'warnings.patch', originalfile: 'build/temp/de/prob/core/sablecc/parser/Parser.java', failonerror:'true'  )
 }
}

sourceSets.test.runtimeClasspath += files(sourceSets.main.java.srcDirs)


// type 'gradle test jacocoTestReport' in order to run the jacoco code coverage analysis
jacocoTestReport {
  reports {
      xml.enabled false
      csv.enabled false
      html.destination file("${buildDir}/jacocoHtml")
  }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/parser/node/**'
                      , '**/parser/analysis/**'
                      , '**/preparser/**'
                      , '**/lexer/**'
                    ])
        })
    }
}
deploy.dependsOn jacocoTestReport
