module Syb.StringTest where

import Test.QuickCheck

-- import Data.Data

-- data Expr = Plus Expr Expr
--           | Int

-- main = putStrLn $ show $ dataTypeOf (1::Int)

-- {-# LANGUAGE DeriveDataTypeable #-}

-- module Everywhere where

import Data.Generics.Aliases
import Data.Generics.Schemes
import Data.Data

data Program = Program String String
derive Show Program
derive Eq Program

tc_Program :: TyCon
tc_Program = mkTyCon3 "Syb" "StringTest" "Program"
instance Typeable (Program ) where
    typeOf _ = mkTyConApp tc_Program []
con_Program_Program :: Constr
con_Program_Program = mkConstr ty_Program "Program" [] Prefix
ty_Program :: DataType
ty_Program = mkDataType "Syb.StringTest.Program" [con_Program_Program]
instance Data (Program ) where
    toConstr (Program _ _) = con_Program_Program
    dataTypeOf _ = ty_Program
    gunfold k z c = case constrIndex c of
                         1 -> k (k (z Program))
                         _ -> error "gunfold(Program)"
    gfoldl f z x = case x of
                         (Program a1 a2) -> ((z Program) `f` a1) `f` a2


addStr :: String -> Program -> Program
addStr str = everywhere (mkT add)
      where
          add :: String -> String
          add = (++str)


example = Program "foo" "bar"

test :: Property
test = once $ result == Program "foo42" "bar42"
    where result = addStr "42" example
