module Data.Typeable where

import Control.Concurrent
import Data.List

import Data.Fingerprint public

--- A concrete representation of a (monomorphic) type.  'TypeRep'
--- supports reasonably efficient equality.
data TypeRep = TypeRep Fingerprint TyCon [TypeRep]

--- Compare keys for equality
instance Eq TypeRep where
  (TypeRep k1 _ _) == (TypeRep k2 _ _) = k1 == k2
  hashCode (TypeRep k _ _) = hashCode k

instance Ord TypeRep where
  (TypeRep k1 _ _) <=> (TypeRep k2 _ _) = k1 <=> k2

--- An abstract representation of a type constructor.  'TyCon' objects can
--- be built using 'mkTyCon'.
data TyCon = TyCon {
   tyConHash    :: Fingerprint,
   tyConPackage :: String,
   tyConModule  :: String,
   tyConName    :: String
 }

instance Eq TyCon where
  (TyCon t1 _ _ _) == (TyCon t2 _ _ _) = t1 == t2
  hashCode (TyCon t _ _ _) = hashCode t

instance Ord TyCon where
  (TyCon t1 _ _ _) <=> (TyCon t2 _ _ _) = t1 <=> t2

-- --------------- Construction --------------------

{-# DEPRECATED mkTyCon "either derive Typeable, or use mkTyCon3 instead" #-}
--- Backwards-compatible API
mkTyCon :: String       -- ^ unique string
        -> TyCon        -- ^ A unique 'TyCon' object
mkTyCon name = TyCon (fingerprintString name) "" "" name

--- Applies a type constructor to a sequence of types
mkTyConApp  :: TyCon -> [TypeRep] -> TypeRep
mkTyConApp (tc@TyCon tc_k _ _ _) []
  = TypeRep tc_k tc [] -- optimisation: all derived Typeable instances
                       -- end up here, and it helps generate smaller
                       -- code for derived Typeable.
mkTyConApp (tc@TyCon tc_k _ _ _) args
  = TypeRep (fingerprintFingerprints (tc_k : arg_ks)) tc args
  where
    arg_ks = [k | TypeRep k _ _ <- args]

--- A special case of 'mkTyConApp', which applies the function
--- type constructor to a pair of types.
mkFunTy  :: TypeRep -> TypeRep -> TypeRep
mkFunTy f a = mkTyConApp funTc [f,a]

--- Splits a type constructor application
splitTyConApp :: TypeRep -> (TyCon,[TypeRep])
splitTyConApp (TypeRep _ tc trs) = (tc,trs)

--- Applies a type to a function type.  Returns: @'Just' u@ if the
--- first argument represents a function of type @t -> u@ and the
--- second argument represents a function of type @t@.  Otherwise,
--- returns 'Nothing'.
funResultTy :: TypeRep -> TypeRep -> Maybe TypeRep
funResultTy trFun trArg
  = case splitTyConApp trFun of
      (tc, [t1,t2]) | tc == funTc && t1 == trArg -> Just t2
      _ -> Nothing

--- Adds a TypeRep argument to a TypeRep.
mkAppTy :: TypeRep -> TypeRep -> TypeRep
mkAppTy (TypeRep _ tc trs) arg_tr = mkTyConApp tc (trs ++ [arg_tr])
   -- Notice that we call mkTyConApp to construct the fingerprint from tc and
   -- the arg fingerprints.  Simply combining the current fingerprint with
   -- the new one won't give the same answer, but of course we want to
   -- ensure that a TypeRep of the same shape has the same fingerprint!

--- Builds a 'TyCon' object representing a type constructor.  An
--- implementation of "Data.Typeable" should ensure that the following holds:
---
--- >  A==A' ^ B==B' ^ C==C' ==> mkTyCon A B C == mkTyCon A' B' C'
---

mkTyCon3 :: String       -- ^ package name
         -> String       -- ^ module name
         -> String       -- ^ the name of the type constructor
         -> TyCon        -- ^ A unique 'TyCon' object
mkTyCon3 pkg modl name =
  TyCon (fingerprintString (pkg ++ " " ++ modl ++ " " ++ name)) pkg modl name

-- -------------- Observation ---------------------

--- Observe the type constructor of a type representation
typeRepTyCon :: TypeRep -> TyCon
typeRepTyCon (TypeRep _ tc _) = tc

--- Observe the argument types of a type representation
typeRepArgs :: TypeRep -> [TypeRep]
typeRepArgs (TypeRep _ _ args) = args

--- Observe string encoding of a type representation
{-# DEPRECATED tyConString "renamed to tyConName; tyConModule and tyConPackage are also available." #-}
tyConString :: TyCon   -> String
tyConString = TyCon.tyConName

-- ----------------------------------------------------------
--
--      The Typeable class and friends
--
-- ----------------------------------------------------------

--- The class 'Typeable' allows a concrete representation of a type to
--- be calculated.
class Typeable a where
  typeOf :: a -> TypeRep
  -- ^ Takes a value of type @a@ and returns a concrete representation
  -- of that type.  The /value/ of the argument should be ignored by
  -- any instance of 'Typeable', so that it is safe to pass 'undefined' as
  -- the argument.

--- Variant for unary type constructors
class Typeable1 t where
  typeOf1 :: t a -> TypeRep

--- For defining a 'Typeable' instance from any 'Typeable1' instance.
typeOfDefault :: (Typeable1 t, Typeable a) => t a -> TypeRep
typeOfDefault x = typeOf1 x `mkAppTy` typeOf (argType x)
 where
   argType :: t a -> a
   argType = undefined

--- Variant for binary type constructors
class Typeable2 t where
  typeOf2 :: t a b -> TypeRep

--- For defining a 'Typeable1' instance from any 'Typeable2' instance.
typeOf1Default :: (Typeable2 t, Typeable a) => t a b -> TypeRep
typeOf1Default x = typeOf2 x `mkAppTy` typeOf (argType x)
 where
   argType :: t a b -> a
   argType = undefined

--- Variant for 3-ary type constructors
class Typeable3 t where
  typeOf3 :: t a b c -> TypeRep

--- For defining a 'Typeable2' instance from any 'Typeable3' instance.
typeOf2Default :: (Typeable3 t, Typeable a) => t a b c -> TypeRep
typeOf2Default x = typeOf3 x `mkAppTy` typeOf (argType x)
 where
   argType :: t a b c -> a
   argType = undefined

--- Variant for 4-ary type constructors
class Typeable4 t where
  typeOf4 :: t a b c d -> TypeRep

--- For defining a 'Typeable3' instance from any 'Typeable4' instance.
typeOf3Default :: (Typeable4 t, Typeable a) => t a b c d -> TypeRep
typeOf3Default x = typeOf4 x `mkAppTy` typeOf (argType x)
 where
   argType :: t a b c d -> a
   argType = undefined

class Typeable5 t where
  typeOf5 :: t a b c d e -> TypeRep

--- For defining a 'Typeable4' instance from any 'Typeable5' instance.
typeOf4Default :: (Typeable5 t, Typeable a) => t a b c d e -> TypeRep
typeOf4Default x = typeOf5 x `mkAppTy` typeOf (argType x)
 where
   argType :: t a b c d e -> a
   argType = undefined

--- Variant for 6-ary type constructors
class Typeable6 t where
  typeOf6 :: t a b c d e f -> TypeRep

--- For defining a 'Typeable5' instance from any 'Typeable6' instance.
typeOf5Default :: (Typeable6 t, Typeable a) => t a b c d e f -> TypeRep
typeOf5Default x = typeOf6 x `mkAppTy` typeOf (argType x)
 where
   argType :: t a b c d e f -> a
   argType = undefined

--- Variant for 7-ary type constructors
class Typeable7 t where
  typeOf7 :: t a b c d e f g -> TypeRep

--- For defining a 'Typeable6' instance from any 'Typeable7' instance.
typeOf6Default :: (Typeable7 t, Typeable a) => t a b c d e f g -> TypeRep
typeOf6Default x = typeOf7 x `mkAppTy` typeOf (argType x)
 where
   argType :: t a b c d e f g -> a
   argType = undefined

-- -------------- Showing TypeReps --------------------

instance Show TypeRep where
  showsPrec p (TypeRep _ tycon tys) =
    case tys of
      [] -> showsPrec p tycon
      [x]   | tycon == listTc -> showChar '[' . shows x . showChar ']'
      [a,r] | tycon == funTc  -> showParen (p > 8) $
                                 showsPrec 9 a .
                                 showString " -> " .
                                 showsPrec 8 r
      xs | isTupleTyCon tycon -> showTuple xs
         | otherwise         ->
            showParen (p > 9) $
            showsPrec p tycon .
            showChar ' '      .
            showArgs tys
  show a = showsPrec 0 a ""

showsTypeRep :: TypeRep -> ShowS
showsTypeRep = shows

instance Show TyCon where
  showsPrec _ t = showString (tyConString t)
  show a = showsPrec 0 a ""

isTupleTyCon :: TyCon -> Bool
isTupleTyCon (TyCon _ _ _ (´^\(,´)) = true
isTupleTyCon _                      = false

-- Some (Show.TypeRep) helpers:

showArgs :: Show a => [a] -> ShowS
showArgs [] = id
showArgs [a] = showsPrec 10 a
showArgs (a:as) = showsPrec 10 a . showString " " . showArgs as

showTuple :: [TypeRep] -> ShowS
showTuple args = showChar '('
               . (foldr (.) id $ intersperse (showChar ',')
                               $ map (showsPrec 10) args)
               . showChar ')'

-- ----------------------------------------------------------
--
--      Instances of the Typeable classes for Prelude types
--
-- ----------------------------------------------------------

unitTc :: TyCon
unitTc = mkTyCon "()"
instance Typeable () where
  typeOf _ = mkTyConApp unitTc []

listTc = mkTyCon "[]"
instance Typeable1 [] where
 typeOf1 _ = mkTyConApp listTc []
instance Typeable a => Typeable ([] a) where
 typeOf = typeOfDefault

maybeTc = mkTyCon "Maybe"
instance Typeable1 Maybe where
  typeOf1 _ = mkTyConApp maybeTc []
instance (Typeable a) => Typeable (Maybe a) where
  typeOf = typeOfDefault

funTc = mkTyCon "->"
instance Typeable2 (->) where
  typeOf2 _ = mkTyConApp funTc []
instance Typeable a => Typeable1 ((->) a) where
  typeOf1 = typeOf1Default
instance (Typeable a, Typeable b) => Typeable ((->) a b) where
  typeOf = typeOfDefault

ioTc = mkTyCon "IO"
instance Typeable1 IO where
  typeOf1 _ = mkTyConApp ioTc []
instance Typeable a => Typeable (IO a) where
  typeOf = typeOfDefault

-- mvarTc = mkTyCon "MVar"
-- instance Typeable1 MVar where
--   typeOf1 _ = mkTyConApp mvarTc []
-- instance Typeable a => Typeable (MVar a) where
--   typeOf = typeOfDefault

pairTc = mkTyCon "(,)"
instance Typeable2 (,) where
  typeOf2 _ = mkTyConApp pairTc []
instance Typeable a => Typeable1 ((,) a) where
  typeOf1 = typeOf1Default
instance (Typeable a, Typeable b) => Typeable ((,) a b) where
  typeOf = typeOfDefault

tup3Tc = mkTyCon "(,,)"
instance Typeable3 (,,) where
  typeOf3 _ = mkTyConApp tup3Tc []
instance Typeable a => Typeable2 ((,,) a) where
  typeOf2 = typeOf2Default
instance (Typeable a, Typeable b) => Typeable1 ((,,) a b) where
  typeOf1 = typeOf1Default
instance (Typeable a, Typeable b, Typeable c) => Typeable ((,,) a b c) where
  typeOf = typeOfDefault

tup4Tc = mkTyCon "(,,,)"
instance Typeable4 (,,,) where
  typeOf4 _ = mkTyConApp tup4Tc []
instance Typeable a => Typeable3 ((,,,) a) where
  typeOf3 = typeOf3Default
instance (Typeable a, Typeable b) => Typeable2 ((,,,) a b) where
  typeOf2 = typeOf2Default
instance (Typeable a, Typeable b, Typeable c) => Typeable1 ((,,,) a b c) where
  typeOf1 = typeOf1Default
instance (Typeable a, Typeable b, Typeable c, Typeable d) => Typeable ((,,,) a b c d) where
  typeOf = typeOfDefault

tup5Tc = mkTyCon "(,,,,)"
instance Typeable5 (,,,,) where
  typeOf5 _ = mkTyConApp tup5Tc []
instance Typeable a => Typeable4 ((,,,,) a) where
  typeOf4 = typeOf4Default
instance (Typeable a, Typeable b) => Typeable3 ((,,,,) a b) where
  typeOf3 = typeOf3Default
instance (Typeable a, Typeable b, Typeable c) => Typeable2 ((,,,,) a b c) where
  typeOf2 = typeOf2Default
instance (Typeable a, Typeable b, Typeable c, Typeable d) => Typeable1 ((,,,,) a b c d) where
  typeOf1 = typeOf1Default
instance (Typeable a, Typeable b, Typeable c, Typeable d, Typeable e) => Typeable ((,,,,) a b c d e) where
  typeOf = typeOfDefault

tup6Tc = mkTyCon "(,,,,,)"
instance Typeable6 (,,,,,) where
  typeOf6 _ = mkTyConApp tup6Tc []
instance Typeable a => Typeable5 ((,,,,,) a) where
  typeOf5 = typeOf5Default
instance (Typeable a, Typeable b) => Typeable4 ((,,,,,) a b) where
  typeOf4 = typeOf4Default
instance (Typeable a, Typeable b, Typeable c) => Typeable3 ((,,,,,) a b c) where
  typeOf3 = typeOf3Default
instance (Typeable a, Typeable b, Typeable c, Typeable d) => Typeable2 ((,,,,,) a b c d) where
  typeOf2 = typeOf2Default
instance (Typeable a, Typeable b, Typeable c, Typeable d, Typeable e) => Typeable1 ((,,,,,) a b c d e) where
  typeOf1 = typeOf1Default
instance (Typeable a, Typeable b, Typeable c, Typeable d, Typeable e, Typeable f) => Typeable ((,,,,,) a b c d e f) where
  typeOf = typeOfDefault

tup7Tc = mkTyCon "(,,,,,,)"
instance Typeable7 (,,,,,,) where
  typeOf7 _ = mkTyConApp tup7Tc []
instance Typeable a => Typeable6 ((,,,,,,) a) where
  typeOf6 = typeOf6Default
instance (Typeable a, Typeable b) => Typeable5 ((,,,,,,) a b) where
  typeOf5 = typeOf5Default
instance (Typeable a, Typeable b, Typeable c) => Typeable4 ((,,,,,,) a b c) where
  typeOf4 = typeOf4Default
instance (Typeable a, Typeable b, Typeable c, Typeable d) => Typeable3 ((,,,,,,) a b c d) where
  typeOf3 = typeOf3Default
instance (Typeable a, Typeable b, Typeable c, Typeable d, Typeable e) => Typeable2 ((,,,,,,) a b c d e) where
  typeOf2 = typeOf2Default
instance (Typeable a, Typeable b, Typeable c, Typeable d, Typeable e, Typeable f) => Typeable1 ((,,,,,,) a b c d e f) where
  typeOf1 = typeOf1Default
instance (Typeable a, Typeable b, Typeable c, Typeable d, Typeable e, Typeable f, Typeable g) => Typeable ((,,,,,,) a b c d e f g) where
  typeOf = typeOfDefault


-- ----------------------------------------------------------
--
--              Type-safe cast
--
-- ----------------------------------------------------------

--- The function @unsafeCoerce_@ allows you to side-step the typechecker entirely. That
--- 	is, it allows you to coerce any type into any other type. If you use this function,
--- 	you had better get it right, otherwise segmentation faults await. It is generally
--- 	used when you want to write a program that you know is well-typed, but where Frege\'s
--- 	type system is not expressive enough to prove that it is well typed.
pure native unsafeCoerce_ java.util.Objects.requireNonNull {-{a}-} :: a -> b

--- The type-safe cast operation
cast :: (Typeable a, Typeable b) => a -> Maybe b
cast x = r
       where
         unsafeCoerce = unsafeCoerce_
         r = if typeOf x == typeOf (unJust r)
               then Just $ unsafeCoerce x
               else Nothing

--- A flexible variation parameterised in a type constructor
gcast :: (Typeable a, Typeable b) => c a -> Maybe (c b)
gcast x = r
 where
  unsafeCoerce = unsafeCoerce_
  r = if typeOf (getArg x) == typeOf (getArg (unJust r))
        then Just $ unsafeCoerce x
        else Nothing
  getArg :: c x -> x
  getArg = undefined

--- Cast for * -> *
gcast1 :: (Typeable1 t, Typeable1 t') => c (t a) -> Maybe (c (t' a))
gcast1 x = r
 where
  unsafeCoerce = unsafeCoerce_
  r = if typeOf1 (getArg x) == typeOf1 (getArg (unJust r))
       then Just $ unsafeCoerce x
       else Nothing
  getArg :: c x -> x
  getArg = undefined

--- Cast for * -> * -> *
gcast2 :: (Typeable2 t, Typeable2 t') => c (t a b) -> Maybe (c (t' a b))
gcast2 x = r
 where
  unsafeCoerce = unsafeCoerce_
  r = if typeOf2 (getArg x) == typeOf2 (getArg (unJust r))
       then Just $ unsafeCoerce x
       else Nothing
  getArg :: c x -> x
  getArg = undefined

-- ----------------------------------------------------
--
-- Generate Typeable instances for standard datatypes
--
-- ----------------------------------------------------

boolTc :: TyCon
boolTc = mkTyCon "Bool"
instance Typeable Bool where
  typeOf _ = mkTyConApp boolTc []

charTc :: TyCon
charTc = mkTyCon "Char"
instance Typeable Char where
  typeOf _ = mkTyConApp charTc []

floatTc :: TyCon
floatTc = mkTyCon "Float"
instance Typeable Float where
  typeOf _ = mkTyConApp floatTc []

doubleTc :: TyCon
doubleTc = mkTyCon "Double"
instance Typeable Double where
  typeOf _ = mkTyConApp doubleTc []

intTc :: TyCon
intTc = mkTyCon "Int"
instance Typeable Int where
  typeOf _ = mkTyConApp intTc []

longTc :: TyCon
longTc = mkTyCon "Long"
instance Typeable Long where
  typeOf _ = mkTyConApp longTc []

integerTc :: TyCon
integerTc = mkTyCon "Integer"
instance Typeable Integer where
  typeOf _ = mkTyConApp integerTc []

orderingTc :: TyCon
orderingTc = mkTyCon "Ordering"
instance Typeable Ordering where
  typeOf _ = mkTyConApp orderingTc []

tyconTc :: TyCon
tyconTc = mkTyCon "TyCon"
instance Typeable TyCon where
  typeOf _ = mkTyConApp tyconTc []

typeRepTc :: TyCon
typeRepTc = mkTyCon "TypeRep"
instance Typeable TypeRep where
  typeOf _ = mkTyConApp typeRepTc []
