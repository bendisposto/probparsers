Package de.be4.eventbalg.core.parser;

/*******************************************************************
 * Helpers                                                         *
 *******************************************************************/

Helpers

	underscore = '_';
    at = '@';
    lf = 10;
    cr = 13;
    semicolon = ';';
    space = ' ';
    slash = '/';
    comment_start = slash slash;
    multi_comment_start = slash '*';
    multi_comment_end = '*' slash;

    small_letter =  ['a'..'z'];
    capital_letter = ['A' .. 'Z'];
    letter = small_letter | capital_letter;
    digit = ['0' .. '9'] ;

	line_break = [lf + cr];
	layout_char = [[[[0 .. 32] - line_break] + [127..160]] + [[8206 .. 8207] + [8232 .. 8233]]];
	all_chars = [0 .. 0xffff];
	all_formula_chars = [[[[[all_chars - layout_char] - line_break] - at] - slash] - semicolon];

	unicode_letter =
	    [0x0041..0x005a] | [0x0061..0x007a] | [0x00aa..0x00aa] | [0x00b5..0x00b5] |
	    [0x00ba..0x00ba] | [0x00c0..0x00d6] | [0x00d8..0x00f6] | [0x00f8..0x01f5] |
	    [0x01fa..0x0217] | [0x0250..0x02a8] | [0x02b0..0x02b8] | [0x02bb..0x02c1] |
	    [0x02d0..0x02d1] | [0x02e0..0x02e4] | [0x037a..0x037a] | [0x0386..0x0386] |
	    [0x0388..0x038a] | [0x038c..0x038c] | [0x038e..0x03a1] | [0x03a3..0x03ce] |
	    [0x03d0..0x03d6] | [0x03da..0x03da] | [0x03dc..0x03dc] | [0x03de..0x03de] |
	    [0x03e0..0x03e0] | [0x03e2..0x03f3] | [0x0401..0x040c] | [0x040e..0x044f] |
	    [0x0451..0x045c] | [0x045e..0x0481] | [0x0490..0x04c4] | [0x04c7..0x04c8] |
	    [0x04cb..0x04cc] | [0x04d0..0x04eb] | [0x04ee..0x04f5] | [0x04f8..0x04f9] |
	    [0x0531..0x0556] | [0x0559..0x0559] | [0x0561..0x0587] | [0x05d0..0x05ea] |
	    [0x05f0..0x05f2] | [0x0621..0x063a] | [0x0640..0x064a] | [0x0671..0x06b7] |
	    [0x06ba..0x06be] | [0x06c0..0x06ce] | [0x06d0..0x06d3] | [0x06d5..0x06d5] |
	    [0x06e5..0x06e6] | [0x0905..0x0939] | [0x093d..0x093d] | [0x0958..0x0961] |
	    [0x0985..0x098c] | [0x098f..0x0990] | [0x0993..0x09a8] | [0x09aa..0x09b0] |
	    [0x09b2..0x09b2] | [0x09b6..0x09b9] | [0x09dc..0x09dd] | [0x09df..0x09e1] |
	    [0x09f0..0x09f1] | [0x0a05..0x0a0a] | [0x0a0f..0x0a10] | [0x0a13..0x0a28] |
	    [0x0a2a..0x0a30] | [0x0a32..0x0a33] | [0x0a35..0x0a36] | [0x0a38..0x0a39] |
	    [0x0a59..0x0a5c] | [0x0a5e..0x0a5e] | [0x0a72..0x0a74] | [0x0a85..0x0a8b] |
	    [0x0a8d..0x0a8d] | [0x0a8f..0x0a91] | [0x0a93..0x0aa8] | [0x0aaa..0x0ab0] |
	    [0x0ab2..0x0ab3] | [0x0ab5..0x0ab9] | [0x0abd..0x0abd] | [0x0ae0..0x0ae0] |
	    [0x0b05..0x0b0c] | [0x0b0f..0x0b10] | [0x0b13..0x0b28] | [0x0b2a..0x0b30] |
	    [0x0b32..0x0b33] | [0x0b36..0x0b39] | [0x0b3d..0x0b3d] | [0x0b5c..0x0b5d] |
	    [0x0b5f..0x0b61] | [0x0b85..0x0b8a] | [0x0b8e..0x0b90] | [0x0b92..0x0b95] |
	    [0x0b99..0x0b9a] | [0x0b9c..0x0b9c] | [0x0b9e..0x0b9f] | [0x0ba3..0x0ba4] |
	    [0x0ba8..0x0baa] | [0x0bae..0x0bb5] | [0x0bb7..0x0bb9] | [0x0c05..0x0c0c] |
	    [0x0c0e..0x0c10] | [0x0c12..0x0c28] | [0x0c2a..0x0c33] | [0x0c35..0x0c39] |
	    [0x0c60..0x0c61] | [0x0c85..0x0c8c] | [0x0c8e..0x0c90] | [0x0c92..0x0ca8] |
	    [0x0caa..0x0cb3] | [0x0cb5..0x0cb9] | [0x0cde..0x0cde] | [0x0ce0..0x0ce1] |
	    [0x0d05..0x0d0c] | [0x0d0e..0x0d10] | [0x0d12..0x0d28] | [0x0d2a..0x0d39] |
	    [0x0d60..0x0d61] | [0x0e01..0x0e2e] | [0x0e30..0x0e30] | [0x0e32..0x0e33] |
	    [0x0e40..0x0e46] | [0x0e81..0x0e82] | [0x0e84..0x0e84] | [0x0e87..0x0e88] |
	    [0x0e8a..0x0e8a] | [0x0e8d..0x0e8d] | [0x0e94..0x0e97] | [0x0e99..0x0e9f] |
	    [0x0ea1..0x0ea3] | [0x0ea5..0x0ea5] | [0x0ea7..0x0ea7] | [0x0eaa..0x0eab] |
	    [0x0ead..0x0eae] | [0x0eb0..0x0eb0] | [0x0eb2..0x0eb3] | [0x0ebd..0x0ebd] |
	    [0x0ec0..0x0ec4] | [0x0ec6..0x0ec6] | [0x0edc..0x0edd] | [0x0f40..0x0f47] |
	    [0x0f49..0x0f69] | [0x10a0..0x10c5] | [0x10d0..0x10f6] | [0x1100..0x1159] |
	    [0x115f..0x11a2] | [0x11a8..0x11f9] | [0x1e00..0x1e9b] | [0x1ea0..0x1ef9] |
	    [0x1f00..0x1f15] | [0x1f18..0x1f1d] | [0x1f20..0x1f45] | [0x1f48..0x1f4d] |
	    [0x1f50..0x1f57] | [0x1f59..0x1f59] | [0x1f5b..0x1f5b] | [0x1f5d..0x1f5d] |
	    [0x1f5f..0x1f7d] | [0x1f80..0x1fb4] | [0x1fb6..0x1fbc] | [0x1fbe..0x1fbe] |
	    [0x1fc2..0x1fc4] | [0x1fc6..0x1fcc] | [0x1fd0..0x1fd3] | [0x1fd6..0x1fdb] |
	    [0x1fe0..0x1fec] | [0x1ff2..0x1ff4] | [0x1ff6..0x1ffc] | [0x207f..0x207f] |
	    [0x2102..0x2102] | [0x2107..0x2107] | [0x210a..0x2113] | [0x2115..0x2115] |
	    [0x2118..0x211d] | [0x2124..0x2124] | [0x2126..0x2126] | [0x2128..0x2128] |
	    [0x212a..0x2131] | [0x2133..0x2138] | [0x3005..0x3005] | [0x3031..0x3035] |
	    [0x3041..0x3094] | [0x309b..0x309e] | [0x30a1..0x30fa] | [0x30fc..0x30fe] |
	    [0x3105..0x312c] | [0x3131..0x318e] | [0x4e00..0x9fa5] | [0xac00..0xd7a3] |
	    [0xf900..0xfa2d] | [0xfb00..0xfb06] | [0xfb13..0xfb17] | [0xfb1f..0xfb28] |
	    [0xfb2a..0xfb36] | [0xfb38..0xfb3c] | [0xfb3e..0xfb3e] | [0xfb40..0xfb41] |
	    [0xfb43..0xfb44] | [0xfb46..0xfbb1] | [0xfbd3..0xfd3d] | [0xfd50..0xfd8f] |
	    [0xfd92..0xfdc7] | [0xfdf0..0xfdfb] | [0xfe70..0xfe72] | [0xfe74..0xfe74] |
	    [0xfe76..0xfefc] | [0xff21..0xff3a] | [0xff41..0xff5a] | [0xff66..0xffbe] |
	    [0xffc2..0xffc7] | [0xffca..0xffcf] | [0xffd2..0xffd7] | [0xffda..0xffdc];

	unicode_digit =
	    [0x0030..0x0039] | [0x0660..0x0669] | [0x06f0..0x06f9] | [0x0966..0x096f] |
	    [0x09e6..0x09ef] | [0x0a66..0x0a6f] | [0x0ae6..0x0aef] | [0x0b66..0x0b6f] |
	    [0x0be7..0x0bef] | [0x0c66..0x0c6f] | [0x0ce6..0x0cef] | [0x0d66..0x0d6f] |
	    [0x0e50..0x0e59] | [0x0ed0..0x0ed9] | [0x0f20..0x0f29] | [0xff10..0xff19];

	tick = 39;
	identifier = (underscore | unicode_letter) (unicode_letter | unicode_digit | underscore)* tick?;
	label = [all_chars - layout_char]+ tick?;


/*******************************************************************
 * States                                                          *
 *******************************************************************/

States

	normal,
	formula,
	label,
	comment,
	multi_comment;


/*******************************************************************
 * Tokens                                                          *
 *******************************************************************/

Tokens

	// single line comments
	{normal -> comment, formula -> normal} comment_start = comment_start space*;
	{comment} comment = [all_chars - line_break]*;
	{comment -> normal} comment_end = line_break;

	// multiline comments: a lot of it is handle in the lexer
	{normal -> multi_comment, formula -> multi_comment} multi_comment_start = multi_comment_start space*;
	{multi_comment} multi_comment_body = [all_chars - ['*' + '/']]*;
	{multi_comment} star = '*';
	{multi_comment, formula} slash = slash;
	{multi_comment} multi_comment_end = multi_comment_end; // return to state 'normal' is done in Lexer

	{normal -> label, formula -> normal} at = at;
	{normal} comma = ',';
	{normal} paranl = '(';
	{normal} paranr = ')';
	{normal} returns = '=>';
	{normal -> formula} colon = ':';
  {normal, formula -> normal} semicolon = ';';
  {normal -> formula} bcmeq = ':=' | 0x2254;

	{normal} equal = '=';

	{normal, formula -> normal} ordinary = 'ordinary';
	{normal, formula -> normal} convergent = 'convergent';
	{normal, formula -> normal} anticipated = 'anticipated';

	// structural keywords
	{normal, formula -> normal} machine = 'machine' ;
	{normal, formula -> normal} refines = 'refines' ;
	{normal, formula -> normal} sees = 'sees' ;
	{normal, formula -> normal} variables = 'variables' ;
	{normal, formula -> normal} invariants = 'invariants' ;
	{normal, formula -> normal} theorem = 'theorem' ;
	{normal, formula -> normal} events = 'events' ;
	{normal -> formula, formula -> normal} variant = 'variant' ;
  {normal -> formula, formula -> normal} invariant = 'invariant';
	{normal, formula -> normal} end = 'end' ;

	{normal, formula -> normal} context = 'context' ;
	{normal, formula -> normal} extends = 'extends' ;
	{normal, formula -> normal} sets = 'sets' ;
	{normal, formula -> normal} constants = 'constants' ;
	{normal, formula -> normal} axioms = 'axioms' ;

	{normal, formula -> normal} event = 'event' ;
	{normal, formula -> normal} any = 'any' ;
	{normal, formula -> normal} where = 'where' | 'when' ;
	{normal, formula -> normal} with = 'with' ;
	{normal, formula -> normal} then = 'then' | 'begin';

  {normal, formula -> normal} do = 'do' ;
  {normal, formula -> normal} assert = 'assert';
  {normal, formula -> normal} assume = 'assume';
  {normal, formula -> normal} assign = 'assign';
  {normal, formula -> normal} return = 'return';

  {normal, formula -> normal} algorithm = 'algorithm';
  {normal, formula -> normal} while = 'while';
  {normal, formula -> normal} if = 'if';
  {normal, formula -> normal} else = 'else';

  {normal, formula -> normal} procedure = 'procedure' ;
  {normal -> formula, formula -> normal} precondition = 'precondition' ;
  {normal -> formula, formula -> normal} postcondition = 'postcondition' ;
  {normal, formula -> normal} implementation = 'implementation' ;
  {normal, formula -> normal} typing = 'typing' ;

  {normal} primitive = 'NAT1' | 'NAT' | 'INT' | 'BOOL';
  {normal} var = 'var';
  {normal -> formula, formula -> normal} type = 'type';
  {normal -> formula, formula -> normal} init = 'init';


	{normal} identifier_literal = identifier;
	{label} label = label;

	{normal, label -> formula, formula} white_space = line_break | layout_char+;

	{formula} formula = all_formula_chars+ ;


/*******************************************************************
 * Ignored Tokens                                                  *
 *******************************************************************/
Ignored Tokens

	white_space,
	comment_start,
	comment_end,
	multi_comment_start,
	multi_comment_body, // this is converted to comment by the lexer
	multi_comment_end;


/*******************************************************************
 * Productions                                                     *
 *******************************************************************/
Productions

parse_unit {-> parse_unit} =
	{machine} [parse_unit]:P.machine {-> parse_unit.parse_unit} |
	{context} [parse_unit]:P.context {-> parse_unit.parse_unit} |
	{procedure} [parse_unit]:P.procedure {-> parse_unit.parse_unit};

/*
	Structure of a machine file
*/
machine {-> parse_unit} =
	T.machine [name]:identifier_literal
	[comment]:comment*
	[refines]:refines_clause?
	[sees]:sees_clause?
    [typedvars]:typed_variables?
	[variables]:variables_clause?
	[invariants]:invariants_clause?
	[variant]:variant_clause?
	[events]:events_clause?
    [algorithm]:P.algorithm?
	end {-> New parse_unit.machine([comment], name, [refines.identifier_literal], [sees.identifier_literal], [typedvars.typed_var], [variables.variable], [invariants.invariant], variant.variant, [events.event], [algorithm.algorithm])};

refines_clause {-> identifier_literal*} = T.refines [first]:identifier_literal [rest]:refines_clause_tail* {-> [first, rest.identifier_literal]} ;
refines_clause_tail {-> identifier_literal} = [name]:identifier_literal {-> name};

sees_clause {-> identifier_literal*} = T.sees [first]:identifier_literal [rest]:sees_clause_tail* {-> [first, rest.identifier_literal]} ;
sees_clause_tail {-> identifier_literal} = [name]:identifier_literal {-> name};

typed_variables {-> typed_var*} = {sequence} [first]:typed_variable semicolon [rest]:typed_variables {-> [first.typed_var, rest.typed_var]} |
    {single} [only]:typed_variable {-> [only.typed_var]};

typed_variable {-> typed_var} = {primitive} [p]:primitive [id]:identifier_literal bcmeq [f]:formula [comment]:comment* {-> New typed_var.primitive([comment], p, id, f)} |
  {complex} T.var [id]:identifier_literal [c1]:comment* T.type [pred]:formula [c2]:comment* T.init [ini]:formula [c3]:comment* {-> New typed_var.complex([c1], id, [c2], pred, [c3], ini)};

variables_clause {-> variable*} = [token]:T.variables [variables]:variable_list {-> [variables.variable]} ;
variable_list {-> variable*} =
	{single} [identifier]:identifier_literal [comment]:comment*  {-> [New variable([comment], identifier)]} |
	{multi} [rest]:variable_list [identifier]:identifier_literal [comment]:comment* {-> [rest.variable, New variable([comment], identifier)]} ;

invariants_clause {-> P.invariant*} = T.invariants [first]:P.invariant [rest]:invariants_tail* {-> [first.invariant, rest.invariant]} ;
invariants_tail {-> P.invariant} = [invariant]:P.invariant {-> invariant.invariant} ;
invariant {-> P.invariant} =
	[label]:P.label [predicate]:formula [comment]:comment* {-> New invariant([comment], label.label, predicate)} |
	{derived} theorem [label]:P.label [predicate]:formula [comment]:comment* {-> New invariant.derived([comment], label.label, predicate)} ;

variant_clause {-> P.variant} = T.variant [expression]:formula [comment]:comment* {-> New variant([comment], expression)} ;

events_clause {-> P.event*} = T.events [first]:P.event [rest]:events_tail* {-> [first.event, rest.event]} ;
events_tail {-> P.event} = [event]:P.event {-> event.event} ;

event {-> P.event} =
	[convergence]:convergence?
	T.event [name]:identifier_literal
	[comment]:comment*
	[refinement]:event_refinement?
	[parameters]:event_any?
	[guards]:event_where?
	[witnesses]:event_with?
	[actions]:event_then?
	end {-> New event([comment], name, convergence.convergence, refinement.event_refinement, [parameters.parameter], [guards.guard], [witnesses.witness], [actions.action])} ;

convergence {-> convergence} =
	{ordinary} ordinary {-> New convergence.ordinary()} |
	{convergent} convergent {-> New convergence.convergent()} |
	{anticipated} anticipated {-> New convergence.anticipated()} ;

event_refinement {-> event_refinement} =
	{refines} [names]:event_refines {-> New event_refinement.refines([names.identifier_literal])} |
	{extended} extends [name]:identifier_literal {-> New event_refinement.extended(name)} ;

event_refines {-> identifier_literal*} = refines [first]:identifier_literal [rest]:event_refines_tail* {-> [first, rest.identifier_literal]} ;
event_refines_tail {-> identifier_literal} = [refines]:identifier_literal {-> refines};

event_any {-> parameter*} = any [first]:parameter [rest]:event_any_tail* {-> [first.parameter, rest.parameter]};
event_any_tail {-> parameter} = [parameter]:parameter {-> parameter.parameter};
parameter {-> parameter} =[name]:identifier_literal [comment]:comment*  {-> New parameter([comment], name)};

event_where {-> guard*} = where [first]:guard [rest]:event_where_tail* {-> [first.guard, rest.guard]};
event_where_tail {-> guard} = [guard]:guard {-> guard.guard};
guard {-> guard} =
	 [label]:P.label [predicate]:formula [comment]:comment* {-> New guard([comment], label.label, predicate)} |
	 {derived} theorem [label]:P.label [predicate]:formula [comment]:comment* {-> New guard.derived([comment], label.label, predicate)};


event_with {-> witness*} = with [first]:witness [rest]:event_with_tail* {-> [first.witness, rest.witness]};
event_with_tail {-> witness} = [witness]:witness {-> witness.witness};
witness {-> witness} = [label]:P.label [predicate]:formula [comment]:comment* {-> New witness([comment], label.label, predicate)};

event_then {-> action*} = then [first]:action [rest]:event_then_tail* {-> [first.action, rest.action]};
event_then_tail {-> action} = [action]:action {-> action.action};
action {-> action} = [label]:P.label [action]:formula [comment]:comment* {-> New action([comment], label.label, action)} ;

/*
	Algorithm and procedures
*/

procedure {-> parse_unit} =
	T.procedure [name]:identifier_literal
	[comment]:comment*
	paranl	[arguments]:identifier_list? paranr T.returns
	[results]:identifier_list?
	[typing]:typing_list?
	[pre]:parse_precondition
	[post]:parse_postcondition
	[mch]:simple_machine_body
	end
	{-> New parse_unit.procedure([comment], name, [arguments.identifier_definition],
	       [results.identifier_definition], [typing.typing_stmt], pre.precondition, post.postcondition, mch.simplified_machine)} ;

simple_machine_body {-> simplified_machine} = 
	T.implementation [comment]:comment*
	[typedvars]:typed_variables?
	[variables]:variables_clause?
	[invariants]:invariants_clause?
	[variant]:variant_clause?
	[events]:events_clause?
    [algorithm]:P.algorithm
	end
	{-> New simplified_machine([comment], [typedvars.typed_var], [variables.variable], 
	[invariants.invariant], variant.variant, [events.event], algorithm.algorithm)};

identifier_list {-> identifier_definition*} = {sequence} [first]:identifier_def comma [rest]:identifier_list {-> [first.identifier_definition, rest.identifier_definition]} |
    {single} [only]:identifier_def {-> [only.identifier_definition]};

identifier_def {-> identifier_definition} = 
	{typed} [prim]:primitive [id]:identifier_literal {-> New identifier_definition.typed(prim, id)} | {untyped} [id]:identifier_literal {-> New identifier_definition.untyped(id)};

typing_list {-> typing_stmt*} = {sequence} [first]:typing_statement [rest]:typing_list {-> [first.typing_stmt, rest.typing_stmt]} |
	{single} [only]:typing_statement {-> [only.typing_stmt]};

typing_statement {-> typing_stmt} = T.typing [name]:identifier_literal colon [expression]:formula [comment]:comment* {-> New typing_stmt([comment], name, expression)};

parse_precondition {-> P.precondition} = T.precondition [pre]:formula [comment]:comment* {-> New precondition([comment], pre)};

parse_postcondition {-> P.postcondition} = T.postcondition [post]:formula [comment]:comment* {-> New postcondition([comment], post)};

algorithm {-> P.algorithm} = T.algorithm [block]:alg_block end {-> New algorithm([block.stmt])};

alg_block {-> stmt*} = {sequence} [first]:statement semicolon [second]:statement [rest]:stmt_tail? {-> [first.stmt, second.stmt, rest.stmt]} |
      {next_level} statement {-> [statement.stmt]};

statement {-> stmt} = {assert} T.assert colon [predicate]:formula [comment]:comment* {-> New stmt.assert([comment],predicate)} |
					{assume} T.assume colon [predicate]:formula [comment]:comment* {-> New stmt.assume([comment],predicate)} |
                    {assign} [label]:P.label [action]:formula [comment]:comment* {-> New stmt.assign([comment], label.label, action)} |
                    {simple} T.assign colon [action]:formula [comment]:comment* {-> New stmt.simple_assign([comment], action)} |
                    {while} while colon [condition]:formula [comment]:comment* [inv]:loop_invariant? [var]:loop_variant? do [block]:alg_block end {-> New stmt.while([comment], condition, [block.stmt], inv, var)} |
                    {if} T.if colon [condition]: formula [comment]:comment* then [normal]:alg_block [else]:if_else? end {-> New stmt.if([comment], condition, [normal.stmt], [else.stmt])} |
                    {return} T.return [ids]:id_list? [comment]:comment* {-> New stmt.return([comment], [ids.id]) };

if_else {-> stmt*} = else [block]:alg_block {-> [block.stmt]};

stmt_tail {-> stmt*} = {single} semicolon [stmt]:statement {-> [stmt.stmt]} |
                         {multi} semicolon [first]:statement [rest]:stmt_tail {-> [first.stmt, rest.stmt]};

loop_invariant {-> P.loop_invariant} = T.invariant [predicate]:formula [comment]:comment* {-> New loop_invariant([comment], predicate)};
loop_variant {-> P.loop_variant} = T.variant [expression]:formula [comment]:comment* {-> New loop_variant([comment], expression)};

id_list {-> id*} = {multiple} [first]:identifier_literal comma [rest]:id_list {-> [New id(first), rest.id]} |
     {single} [only]:identifier_literal {-> [New id(only)]};



/*
	Structure of a context file
*/

context {-> parse_unit} =
	T.context [name]:identifier_literal
	[comment]:comment*
	[extends]:extends_clause?
	[sets]:sets_clause?
    [constants]:constants_clause?
	[axioms]:axioms_clause?
	end	{-> New parse_unit.context([comment], name, [extends.identifier_literal], [sets.carrier_set], [constants.constant], [axioms.axiom])} ;



extends_clause {-> identifier_literal*} = T.extends [first]:identifier_literal [rest]:extends_clause_tail* {-> [first, rest.identifier_literal]} ;
extends_clause_tail {-> identifier_literal} = [name]:identifier_literal {-> name};

sets_clause {-> carrier_set*} = T.sets [first]:set [rest]:sets_clause_tail* {-> [first.carrier_set, rest.carrier_set]} ;
sets_clause_tail {-> carrier_set} = [set]:set {-> set.carrier_set};
set {-> carrier_set} = [name]:identifier_literal [comment]:comment* {-> New carrier_set([comment], name)};

constants_clause {-> P.constant*} = constants [first]:P.constant [rest]:constants_clause_tail* {-> [first.constant, rest.constant]} ;
constants_clause_tail {-> P.constant} = [constant]:P.constant {-> constant.constant};
constant {-> P.constant} = [name]:identifier_literal [comment]:comment* {-> New constant([comment], name)};

axioms_clause {-> axiom*} = T.axioms [first]:axiom [rest]:axioms_clause_tail* {-> [first.axiom, rest.axiom]} ;
axioms_clause_tail {-> axiom} = [axiom]:axiom {-> axiom.axiom} ;
axiom {-> axiom} =
	[label]:P.label [predicate]:formula [comment]:comment* {-> New axiom([comment], label.label, predicate)} |
	{derived} theorem [label]:P.label [predicate]:formula [comment]:comment* {-> New axiom.derived([comment], label.label, predicate)} ;


label {-> label} = at [identifier]:T.label {-> identifier};


/*******************************************************************
 * Abstract Syntax Tree                                            *
 *******************************************************************/
Abstract Syntax Tree

parse_unit =
	{machine}
		[comments]:comment*
		[name]:identifier_literal
		[refines_names]:identifier_literal*
		[seen_names]:identifier_literal*
    [typedvars]:typed_var*
		[variables]:variable*
		[invariants]:P.invariant*
		[variant]:P.variant?
		[events]:P.event*
    [algorithm]:P.algorithm* |

	{context}
		[comments]:comment*
		[name]:identifier_literal
		[extends_names]:identifier_literal*
		[sets]:carrier_set*
  	    [constants]:P.constant*
		[axioms]:axiom* |

	{procedure}
		[comments]:comment*
		[name]:identifier_literal
		[arguments]:identifier_definition*
		[results]:identifier_definition*
		[typing]:typing_stmt*
		[precondition]:P.precondition
		[postcondition]:P.postcondition
		[implementation]:simplified_machine;

simplified_machine = 
		[comments]:comment*
    	[typedvars]:typed_var*
		[variables]:variable*
		[invariants]:P.invariant*
		[variant]:P.variant?
		[events]:P.event*
    	[algorithm]:P.algorithm;

typed_var = {primitive} [comments]:comment* [type]:primitive [name]:identifier_literal [expression]:formula |
       {complex} [cmts1]:comment* [name]:identifier_literal [cmts2]:comment* [typingpred]:formula [cmts3]:comment* [init]:formula;

identifier_definition = {typed} [type]:primitive [name]:identifier_literal |
        {untyped} [name]:identifier_literal;

typing_stmt = [comments]:comment* [name]:identifier_literal [expression]:formula;

precondition = [comments]:comment* [expression]:formula;
postcondition = [comments]:comment* [expression]:formula;

variable = [comments]:comment* [name]:identifier_literal ;
variant = [comments]:comment* [expression]:formula ;
invariant =
	[comments]:comment* [name]:label [predicate]:formula |
	{derived} [comments]:comment* [name]:label [predicate]:formula ;

carrier_set = [comments]:comment* [name]:identifier_literal;
constant = [comments]:comment* [name]:identifier_literal;
axiom =
	[comments]:comment* [name]:label [predicate]:formula |
	{derived} [comments]:comment* [name]:label [predicate]:formula ;

event =
	[comments]:comment*
	[name]:identifier_literal
	[convergence]:convergence?
	[refinement]:event_refinement?
	[parameters]:parameter*
	[guards]:guard*
	[witnesses]:witness*
	[actions]:action* ;

convergence = {ordinary} | {convergent} | {anticipated} ;

event_refinement =
	{refines} [names]:identifier_literal* |
	{extended} [name]:identifier_literal ;

parameter = [comments]:comment* [name]:identifier_literal;

guard =
	[comments]:comment* [name]:label [predicate]:formula |
	{derived} [comments]:comment* [name]:label [predicate]:formula;

witness = [comments]:comment* [name]:label [predicate]:formula ;
action = [comments]:comment* [name]:label [action]:formula ;

algorithm = [block]:stmt* ;

loop_invariant = [comments]:comment* [predicate]:formula;
loop_variant = [comments]:comment* [expression]:formula;

stmt = {assert} [comments]:comment* [predicate]:formula |
	   {assume} [comments]:comment* [predicate]:formula |
       {assign} [comments]:comment* [name]:label [action]:formula |
       {simple_assign} [comments]:comment* [action]:formula |
       {while} [comments]:comment* [condition]:formula [statements]:stmt* [invariant]:loop_invariant? [variant]:loop_variant? |
       {if}     [comments]:comment* [condition]:formula [then]:stmt* [else]:stmt* |
       {return} [comments]:comment* [identifiers]:id*;

id = [name]:identifier_literal;