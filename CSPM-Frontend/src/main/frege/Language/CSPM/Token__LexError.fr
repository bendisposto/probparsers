--- This module "forward declares" LexError so that the make script can compile the java dependencies.
module Language.CSPM.Token__LexError
where

import Data.Data

--- LexError data type. This has an wrapping LexErrorException.
{-# derive DataTypeable #-}
data LexError = ! LexError {
   lexEPos :: AlexPosn
  ,lexEMsg :: String
  }
derive Show LexError

{-# derive DataTypeable #-}
data AlexPosn = ! AlexPn {
   alexPos :: Int
  ,alexLine   :: Int 
  ,alexCol    :: Int
  }
derive Eq AlexPosn
derive Ord AlexPosn
derive Show AlexPosn






{-# autogenerated by DataDeriver #-}
tc_LexError :: TyCon
tc_LexError = mkTyCon3 "Language.CSPM" "Token__LexError" "LexError"
instance Typeable (LexError ) where
    typeOf _ = mkTyConApp tc_LexError []
con_LexError_LexError :: Constr
con_LexError_LexError = mkConstr ty_LexError "LexError" [] Prefix
ty_LexError :: DataType
ty_LexError = mkDataType "Language.CSPM.Token__LexError.LexError" [con_LexError_LexError]
instance Data (LexError ) where
    toConstr (LexError _ _) = con_LexError_LexError
    dataTypeOf _ = ty_LexError
    gunfold k z c = case constrIndex c of
                         1 -> k (k (z LexError))
                         _ -> error "gunfold(LexError)"
    gfoldl f z x = case x of
                         (LexError a1 a2) -> ((z LexError) `f` a1) `f` a2

tc_AlexPosn :: TyCon
tc_AlexPosn = mkTyCon3 "Language.CSPM" "Token__LexError" "AlexPosn"
instance Typeable (AlexPosn ) where
    typeOf _ = mkTyConApp tc_AlexPosn []
con_AlexPosn_AlexPn :: Constr
con_AlexPosn_AlexPn = mkConstr ty_AlexPosn "AlexPn" [] Prefix
ty_AlexPosn :: DataType
ty_AlexPosn = mkDataType "Language.CSPM.Token__LexError.AlexPosn" [con_AlexPosn_AlexPn]
instance Data (AlexPosn ) where
    toConstr (AlexPn _ _ _) = con_AlexPosn_AlexPn
    dataTypeOf _ = ty_AlexPosn
    gunfold k z c = case constrIndex c of
                         1 -> k (k (k (z AlexPn)))
                         _ -> error "gunfold(AlexPosn)"
    gfoldl f z x = case x of
                         (AlexPn a1 a2 a3) -> (((z AlexPn) `f` a1) `f` a2) `f` a3


