{-# OPTIONS_GHC -cpp                  #-}
{-# LANGUAGE Rank2Types               #-}
{-# LANGUAGE ScopedTypeVariables      #-}

{--
    "Scrap your boilerplate" â€” Generic programming in Haskell 
    
    See 'http://www.cs.vu.nl/boilerplate/'. The present module provides
    frequently used generic traversal schemes.
    
    [Module]      Data.Generics.Schemes
    [Copyright]   (c) The University of Glasgow, CWI 2001--2003
    [License]     BSD-style (see the LICENSE file)
    
    [Maintainer]  generics@haskell.org
    [Stability]   experimental
    [Portability] non-portable (local universal quantification)
-}

module Data.Generics.Schemes {-(

        everywhere,
        everywhere',
        everywhereBut,
        everywhereM,
        somewhere,
        everything,
        everythingBut,
        listify,
        something,
        synthesize,
        gsize,
        glength,
        gdepth,
        gcount,
        gnodecount,
        gtypecount,
        gfindtype

 )-} where

import frege.Prelude hiding (GT, orElse)
import Data.Data
import Data.Generics.Aliases
-- import Control.Monad


--- Apply a transformation everywhere in bottom-up manner
everywhere :: (forall a. Data a => a -> a)
           -> (forall c. Data c => c -> c)

--- Use gmapT to recurse into immediate subterms;
--- recall: gmapT preserves the outermost constructor;
--- post-process recursively transformed result via f 
everywhere f = f . gmapT (everywhere f)


--- Apply a transformation everywhere in top-down manner
everywhere' :: (forall a. Data a => a -> a)
            -> (forall a. Data a => a -> a)

-- Arguments of (.) are flipped compared to everywhere
everywhere' f = gmapT (everywhere' f) . f


--- Variation on everywhere with an extra stop condition
everywhereBut :: GenericQ Bool -> GenericT -> GenericT

-- Guarded to let traversal cease if predicate q holds for x
everywhereBut q f x
    | q x       = x
    | otherwise = f (gmapT (everywhereBut q f) x)


-- - Monadic variation on everywhere
-- everywhereM :: Monad m => GenericM m -> GenericM m

-- Bottom-up order is also reflected in order of do-actions
-- everywhereM f x = do x' <- gmapM (everywhereM f) x
--                      f x'


-- - Apply a monadic transformation at least somewhere
-- somewhere :: MonadPlus m => GenericM m -> GenericM m

-- We try "f" in top-down manner, but descent into "x" when we fail
-- at the root of the term. The transformation fails if "f" fails
-- everywhere, say succeeds nowhere.
-- 
-- somewhere f x = f x `mplus` gmapMp (somewhere f) x


--- Summarise all nodes in top-down, left-to-right order
everything :: forall a2 b6. Data b6 => (a2 -> a2 -> a2) -> (forall a6. Data a6 => a6 -> a2) -> b6 -> a2
-- everything :: (ar -> ar -> ar) -> GenericQ ar -> GenericQ ar

--- Apply f to x to summarise top-level node;
--- use gmapQ to recurse into immediate subterms;
--- use ordinary foldl to reduce list of intermediate results
everything k f x = fold k (f x) (gmapQ (everything k f) x)

--- Variation of "everything" with an added stop condition
everythingBut :: (r -> r -> r) -> GenericQ (r, Bool) -> GenericQ r
everythingBut k f x = let (v, stop) = f x
                      in if stop
                           then v
                           else foldl k v (gmapQ (everythingBut k f) x)

--- Get a list of all entities that meet a predicate
listify :: (Data a6', Typeable o1) => (o1 -> Bool) -> a6' -> [o1]
-- listify :: Typeable or => (or -> Bool) -> GenericQ [or]
listify p = everything (++) ([] `mkQ` (\x -> if p x then [x] else []))


--- Look up a subterm by means of a maybe-typed filter
something :: GenericQ (Maybe u) -> GenericQ (Maybe u)

--- "something" can be defined in terms of "everything"
--- when a suitable "choice" operator is used for reduction
something = everything orElse


--- Bottom-up synthesis of a data structure;
---   1st argument z is the initial element for the synthesis;
---   2nd argument o is for reduction of results from subterms;
---   3rd argument f updates the synthesised data according to the given term
synthesize :: s  -> (t -> s -> s) -> GenericQ (s -> t) -> GenericQ t
synthesize z o f x = f x (foldr o z (gmapQ (synthesize z o f) x))


--- Compute size of an arbitrary data structure
gsize :: Data a => a -> Int
gsize t = 1 + sum (gmapQ gsize t)


--- Count the number of immediate subterms of the given term
glength :: GenericQ Int
glength = length . gmapQ (const ())


--- Determine depth of the given term
gdepth :: GenericQ Int
gdepth = (+) 1 . foldr max 0 . gmapQ gdepth


--- Determine the number of all suitable nodes in a given term
gcount :: GenericQ Bool -> GenericQ Int
gcount p =  everything (+) (\x -> if p x then 1 else 0)


--- Determine the number of all nodes in a given term
gnodecount :: GenericQ Int
gnodecount = gcount (const True)


-- - Determine the number of nodes of a given type in a given term
-- gtypecount :: Typeable a => a -> GenericQ Int TODO
-- gtypecount (_::a) = gcount (False `mkQ` (\(_::a) -> True))


--- Find (unambiguously) an immediate subterm of a given type
gfindtype :: (Data x, Typeable y) => x -> Maybe y
gfindtype = singleton
          . foldl unJust []
          . gmapQ (Nothing `mkQ` Just)
 where
  unJust l (Just x) = x:l
  unJust l Nothing  = l
  singleton [s] = Just s
  singleton _   = Nothing
