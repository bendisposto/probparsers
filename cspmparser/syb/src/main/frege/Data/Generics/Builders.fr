{-# LANGUAGE ScopedTypeVariables  #-}
{-# LANGUAGE FlexibleContexts     #-}

{--
    This module provides generic builder functions. These functions construct
    values of a given type.
    
    [Module]     Data.Generics.Builders
    [Copyright]  (c) 2008 Universiteit Utrecht
    [License]    BSD-style
    
    [Maintainer] generics@haskell.org
    [Stability]  experimental
-}

module Data.Generics.Builders where

import frege.Prelude hiding (empty)
import Data.Data
import Data.Generics.Aliases (extB)

--- Construct the empty value for a datatype. For algebraic datatypes, the
--- leftmost constructor is chosen.
empty :: forall a. Data a => a
empty = ((((general 
      `extB` char) 
      `extB` int)
      `extB` integer)
      `extB` float)
      `extB` double where
  -- Generic case
  general :: forall a. Data a => a
  general = undefined--TODO fromConstrB empty (indexConstr (dataTypeOf general) 1)
  
  -- Base cases
  char    = '\000'
  int     = 0      :: Int
  integer = 0      :: Integer
  float   = 0.0    :: Float
  double  = 0.0    :: Double


--- Return a list of values of a datatype. Each value is one of the possible
--- constructors of the datatype, populated with 'empty' values.
constrs :: forall a. Data a => [a]
constrs = ((((general
      `extB` char)
      `extB` int)
      `extB` integer)
      `extB` float)
      `extB` double where
  -- Generic case
  general :: forall a. Data a => [a]
  general = undefined
--   general = map (fromConstrB empty) TODO
--               (dataTypeConstrs (dataTypeOf (undefined general))) --where
--     unList :: forall a. Data a => [a] -> a
--     unList = undefined

  -- Base cases
  char    = ['\000']
  int     = [0   :: Int]
  integer = [0   :: Integer]
  float   = [0.0 :: Float]
  double  = [0.0 :: Double]
