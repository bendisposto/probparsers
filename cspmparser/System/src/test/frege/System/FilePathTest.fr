module FilePath.Test where

import System.FilePath
import Data.Maybe
import Data.List
import Test.QuickCheck

--- Tests that the documented identities hold.
--- All tests have been taken from the documentation, some have been modified
--- to work with Frege (ie. conversions between String and [Char] have been
--- added where necessary).
tests :: Property
tests =
    -- only one test should succeed on your system
    once(null failingUnix || null failingWin)
  where
    getFailing  = filter ((== false) . snd)
    failingUnix = getFailing unix
    failingWin  = getFailing win

--- identities which hold on a Unix system
unix = [
    ("pathSeparator", pathSeparator ==  '/'),
    ("isPathSeparator", isPathSeparator pathSeparator),
    ("pathSeparators", pathSeparators == ['/']),
    ("pathSeparator", pathSeparator `elem` pathSeparators),
    ("isPathSeparator", isPathSeparator '/' == ('/' `elem` pathSeparators)),
    ("searchPathSeparator", searchPathSeparator == ':'),
    ("isSearchPathSeparator", isSearchPathSeparator '/' == ('/' == searchPathSeparator)),
    ("isSearchPathSeparator", isSearchPathSeparator '}' == ('}' == searchPathSeparator)),
    ("extSeparator", extSeparator == '.'),
    ("isExtSeparator", isExtSeparator '/' == ('/' == extSeparator)),
    ("splitSearchPath", splitSearchPath "File1:File2:File3"  == ["File1","File2","File3"]),
    ("splitSearchPath", splitSearchPath "File1::File2:File3" == ["File1",".","File2","File3"]),
    ("splitExtension", splitExtension "/directory/path.ext" == ("/directory/path",".ext")),
    ("uncurry", uncurry (++) (splitExtension "/tmp/../var/foo.bar") == "/tmp/../var/foo.bar"),
    ("addExtension", uncurry addExtension (splitExtension "/tmp/../var/foo.bar") == "/tmp/../var/foo.bar"),
    ("splitExtension", splitExtension "file.txt" == ("file",".txt")),
    ("splitExtension", splitExtension "file" == ("file","")),
    ("splitExtension", splitExtension "file/file.txt" == ("file/file",".txt")),
    ("splitExtension", splitExtension "file.txt/boris" == ("file.txt/boris","")),
    ("splitExtension", splitExtension "file.txt/boris.ext" == ("file.txt/boris",".ext")),
    ("splitExtension", splitExtension "file/path.txt.bob.fred" == ("file/path.txt.bob",".fred")),
    ("splitExtension", splitExtension "file/path.txt/" == ("file/path.txt/","")),
    ("takeExtension", takeExtension "/directory/path.ext" == ".ext"),
    ("takeExtension", takeExtension "/tmp/../var/foo.bar" == snd (splitExtension "/tmp/../var/foo.bar")),
    ("Valid", takeExtension (addExtension "/tmp/../var/foo.bar" "ext") == ".ext"),
    ("Valid", takeExtension (replaceExtension "/tmp/../var/foo.bar" "ext") == ".ext"),
    ("(/directory/path.txt", ("/directory/path.txt" -<.> "ext") == "/directory/path.ext"),
    ("(/directory/path.txt", ("/directory/path.txt" -<.> ".ext") == "/directory/path.ext"),
    ("(foo.o", ("foo.o" -<.> "c") == "foo.c"),
    ("replaceExtension", replaceExtension "/directory/path.txt" "ext" == "/directory/path.ext"),
    ("replaceExtension", replaceExtension "/directory/path.txt" ".ext" == "/directory/path.ext"),
    ("replaceExtension", replaceExtension "file.txt" ".bob" == "file.bob"),
    ("replaceExtension", replaceExtension "file.txt" "bob" == "file.bob"),
    ("replaceExtension", replaceExtension "file" ".bob" == "file.bob"),
    ("replaceExtension", replaceExtension "file.txt" "" == "file"),
    ("replaceExtension", replaceExtension "file.fred.bob" "txt" == "file.fred.txt"),
    ("replaceExtension", replaceExtension "/tmp/../var/foo.bar" ".ext" == addExtension (dropExtension "/tmp/../var/foo.bar") ".ext"),
    ("(/directory/path", ("/directory/path" <.> "ext") == "/directory/path.ext"),
    ("(/directory/path", ("/directory/path" <.> ".ext") == "/directory/path.ext"),
    ("dropExtension", dropExtension "/directory/path.ext" == "/directory/path"),
    ("dropExtension", dropExtension "/tmp/../var/foo.bar" == fst (splitExtension "/tmp/../var/foo.bar")),
    ("addExtension", addExtension "/directory/path" "ext" == "/directory/path.ext"),
    ("addExtension", addExtension "file.txt" "bib" == "file.txt.bib"),
    ("addExtension", addExtension "file." ".bib" == "file..bib"),
    ("addExtension", addExtension "file" ".bib" == "file.bib"),
    ("addExtension", addExtension "/" "x" == "/.x"),
    ("Valid", takeFileName (addExtension (addTrailingPathSeparator "/tmp/../var/foo.bar") "ext") == ".ext"),
    ("hasExtension", hasExtension "/directory/path.ext" == True),
    ("hasExtension", hasExtension "/directory/path" == False),
    ("null", null (takeExtension "/tmp/../var/foo.bar") == not (hasExtension "/tmp/../var/foo.bar")),
    ("stripExtension", stripExtension "hs.o" "foo.x.hs.o" == Just "foo.x"),
    ("stripExtension", stripExtension "hi.o" "foo.x.hs.o" == Nothing),
    ("dropExtension", dropExtension "/tmp/../var/foo.bar" == fromJust (stripExtension (takeExtension "/tmp/../var/foo.bar") "/tmp/../var/foo.bar")),
    ("dropExtensions", dropExtensions "/tmp/../var/foo.bar" == fromJust (stripExtension (takeExtensions "/tmp/../var/foo.bar") "/tmp/../var/foo.bar")),
    ("stripExtension", stripExtension ".c.d" "a.b.c.d"  == Just "a.b"),
    ("stripExtension", stripExtension ".c.d" "a.b..c.d" == Just "a.b."),
    ("stripExtension", stripExtension "baz"  "foo.bar"  == Nothing),
    ("stripExtension", stripExtension "bar"  "foobar"   == Nothing),
    ("stripExtension", stripExtension ""     "/tmp/../var/foo.bar"          == Just "/tmp/../var/foo.bar"),
    ("splitExtensions", splitExtensions "/directory/path.ext" == ("/directory/path",".ext")),
    ("splitExtensions", splitExtensions "file.tar.gz" == ("file",".tar.gz")),
    ("uncurry", uncurry (++) (splitExtensions "/tmp/../var/foo.bar") == "/tmp/../var/foo.bar"),
    ("Valid", uncurry addExtension (splitExtensions "/tmp/../var/foo.bar") == "/tmp/../var/foo.bar"),
    ("splitExtensions", splitExtensions "file.tar.gz" == ("file",".tar.gz")),
    ("dropExtensions", dropExtensions "/directory/path.ext" == "/directory/path"),
    ("dropExtensions", dropExtensions "file.tar.gz" == "file"),
    ("not", not $ hasExtension $ dropExtensions "/tmp/../var/foo.bar"),
    ("not", not $ any isExtSeparator $ unpacked $ takeFileName $ dropExtensions "/tmp/../var/foo.bar"),
    ("takeExtensions", takeExtensions "/directory/path.ext" == ".ext"),
    ("takeExtensions", takeExtensions "file.tar.gz" == ".tar.gz"),
    ("replaceExtensions", replaceExtensions "file.fred.bob" "txt" == "file.txt"),
    ("replaceExtensions", replaceExtensions "file.fred.bob" "tar.gz" == "file.tar.gz"),
    ("uncurry", uncurry (++) (splitDrive "/tmp/../var/foo.bar") == "/tmp/../var/foo.bar"),
    ("splitDrive", splitDrive "/test" == ("/","test")),
    ("splitDrive", splitDrive "//test" == ("//","test")),
    ("splitDrive", splitDrive "test/file" == ("","test/file")),
    ("splitDrive", splitDrive "file" == ("","file")),
    ("Valid", uncurry joinDrive (splitDrive "/tmp/../var/foo.bar") == "/tmp/../var/foo.bar"),
    ("takeDrive", takeDrive "/tmp/../var/foo.bar" == fst (splitDrive "/tmp/../var/foo.bar")),
    ("dropDrive", dropDrive "/tmp/../var/foo.bar" == snd (splitDrive "/tmp/../var/foo.bar")),
    ("not", not (hasDrive "/tmp/../var/foo.bar") == null (takeDrive "/tmp/../var/foo.bar")),
    ("hasDrive", hasDrive "/foo" == True),
    ("isDrive", isDrive "/" == True),
    ("isDrive", isDrive "/foo" == False),
    ("splitFileName", splitFileName "/directory/file.ext" == ("/directory/","file.ext")),
    ("Valid", uncurry (</>) (splitFileName "/tmp/../var/foo.bar") == "/tmp/../var/foo.bar" || fst (splitFileName "/tmp/../var/foo.bar") == "./"),
    ("Valid", isValid (fst (splitFileName "/tmp/../var/foo.bar"))),
    ("splitFileName", splitFileName "file/bob.txt" == ("file/", "bob.txt")),
    ("splitFileName", splitFileName "file/" == ("file/", "")),
    ("splitFileName", splitFileName "bob" == ("./", "bob")),
    ("splitFileName", splitFileName "/" == ("/","")),
    ("replaceFileName", replaceFileName "/directory/other.txt" "file.ext" == "/directory/file.ext"),
    ("Valid", replaceFileName "/tmp/../var/foo.bar" (takeFileName "/tmp/../var/foo.bar") == "/tmp/../var/foo.bar"),
    ("dropFileName", dropFileName "/directory/file.ext" == "/directory/"),
    ("dropFileName", dropFileName "/tmp/../var/foo.bar" == fst (splitFileName "/tmp/../var/foo.bar")),
    ("takeFileName", takeFileName "/directory/file.ext" == "file.ext"),
    ("takeFileName", takeFileName "test/" == ""),
    ("takeFileName", toList (takeFileName "/tmp/../var/foo.bar") `isSuffixOf` "/tmp/../var/foo.bar".toList),
    ("takeFileName", takeFileName "/tmp/../var/foo.bar" == snd (splitFileName "/tmp/../var/foo.bar")),
    ("Valid", takeFileName (replaceFileName "/tmp/../var/foo.bar" "fred") == "fred"),
    ("Valid", takeFileName ("/tmp/" </> "fred") == "fred"),
    ("Valid", isRelative (takeFileName "/tmp/../var/foo.bar")),
    ("takeBaseName", takeBaseName "/directory/file.ext" == "file"),
    ("takeBaseName", takeBaseName "file/test.txt" == "test"),
    ("takeBaseName", takeBaseName "dave.ext" == "dave"),
    ("takeBaseName", takeBaseName "" == ""),
    ("takeBaseName", takeBaseName "test" == "test"),
    ("takeBaseName", takeBaseName (addTrailingPathSeparator "/tmp/../var/foo.bar") == ""),
    ("takeBaseName", takeBaseName "file/file.tar.gz" == "file.tar"),
    ("replaceBaseName", replaceBaseName "/directory/other.ext" "file" == "/directory/file.ext"),
    ("replaceBaseName", replaceBaseName "file/test.txt" "bob" == "file/bob.txt"),
    ("replaceBaseName", replaceBaseName "fred" "bill" == "bill"),
    ("replaceBaseName", replaceBaseName "/dave/fred/bob.gz.tar" "new" == "/dave/fred/new.tar"),
    ("Valid", replaceBaseName "/tmp/../var/foo.bar" (takeBaseName "/tmp/../var/foo.bar") == "/tmp/../var/foo.bar"),
    ("hasTrailingPathSeparator1", hasTrailingPathSeparator "test" == False),
    ("hasTrailingPathSeparator2", hasTrailingPathSeparator "test/" == True),
    ("hasTrailingPathSeparator3", hasTrailingPathSeparator (addTrailingPathSeparator "/tmp/../var/foo.bar")),
    ("hasTrailingPathSeparator4", addTrailingPathSeparator "/tmp/../var/foo.bar" == "/tmp/../var/foo.bar/"),
    ("addTrailingPathSeparator5", addTrailingPathSeparator "test/rest" == "test/rest/"),
    ("dropTrailingPathSeparator6", dropTrailingPathSeparator "file/test/" == "file/test"),
    ("dropTrailingPathSeparator7", dropTrailingPathSeparator "/" == "/"),
    ("not", not (hasTrailingPathSeparator (dropTrailingPathSeparator "/tmp/../var/foo.bar")) || isDrive "/tmp/../var/foo.bar"),
    ("takeDirectory", takeDirectory "/directory/other.ext" == "/directory"),
    ("takeDirectory", toList (takeDirectory "/tmp/../var/foo.bar") `isPrefixOf` "/tmp/../var/foo.bar".toList || takeDirectory "/tmp/../var/foo.bar" == "."),
    ("takeDirectory", takeDirectory "foo" == "."),
    ("takeDirectory", takeDirectory "/" == "/"),
    ("takeDirectory", takeDirectory "/foo" == "/"),
    ("takeDirectory", takeDirectory "/foo/bar/baz" == "/foo/bar"),
    ("takeDirectory", takeDirectory "/foo/bar/baz/" == "/foo/bar/baz"),
    ("takeDirectory", takeDirectory "foo/bar/baz" == "foo/bar"),
    ("replaceDirectory", replaceDirectory "root/file.ext" "/directory/" == "/directory/file.ext"),
    ("Valid", replaceDirectory "/tmp/../var/foo.bar" (takeDirectory "/tmp/../var/foo.bar") `equalFilePath` "/tmp/../var/foo.bar"),
    ("(/directory", ("/directory" </> "file.ext") == "/directory/file.ext"),
    ("Valid", (takeDirectory "/tmp/../var/foo.bar" </> takeFileName "/tmp/../var/foo.bar") `equalFilePath` "/tmp/../var/foo.bar"),
    ("(/", ("/" </> "test") == "/test"),
    ("(home", ("home" </> "bob") == "home/bob"),
    ("(x:", ("x:" </> "foo") == "x:/foo"),
    ("(home", ("home" </> "/bob") == "/bob"),
    ("splitPath", splitPath "/directory/file.ext" == ["/","directory/","file.ext"]),
    ("concat", concat (splitPath "/tmp/../var/foo.bar") == "/tmp/../var/foo.bar"),
    ("splitPath", splitPath "test//item/" == ["test//","item/"]),
    ("splitPath", splitPath "test/item/file" == ["test/","item/","file"]),
    ("splitPath", splitPath "" == []),
    ("splitPath", splitPath "/file/test" == ["/","file/","test"]),
    ("splitDirectories", splitDirectories "/directory/file.ext" == ["/","directory","file.ext"]),
    ("splitDirectories", splitDirectories "test/file" == ["test","file"]),
    ("splitDirectories", splitDirectories "/test/file" == ["/","test","file"]),
    ("joinPath", joinPath ["/","directory/","file.ext"] == "/directory/file.ext"),
    ("Valid", joinPath (splitPath "/tmp/../var/foo.bar") == "/tmp/../var/foo.bar"),
    ("joinPath", joinPath [] == ""),
    ("joinPath", joinPath ["test","file","path"] == "test/file/path"),
    ("/tmp/../var/foo.bar", equalFilePath "/var/foo.bar" "/var/foo.bar"),
    ("normalise", equalFilePath (normalise "/./var/foo.bar") (normalise "/var/./foo.bar")),
    ("equalFilePath", equalFilePath "foo" "foo/"),
    ("not", not (equalFilePath "foo" "/foo")),
    ("not", not (equalFilePath "foo" "FOO")),
    ("makeRelative", makeRelative "/Home" "/home/bob" == "/home/bob"),
    ("makeRelative", makeRelative "/home/" "/home/bob/foo/bar" == "bob/foo/bar"),
    ("makeRelative", makeRelative "/fred" "bob" == "bob"),
    ("makeRelative", makeRelative "/file/test" "/file/test/fred" == "fred"),
    ("makeRelative", makeRelative "/file/test" "/file/test/fred/" == "fred/"),
    ("makeRelative", makeRelative "some/path" "some/path/a/b/c" == "a/b/c"),
    ("normalise", normalise "/file/\\test////" == "/file/\\test/"),
    ("normalise", normalise "/file/./test" == "/file/test"),
    ("normalise", normalise "/test/file/../bob/fred/" == "/test/file/../bob/fred/"),
    ("normalise", normalise "../bob/fred/" == "../bob/fred/"),
    ("normalise", normalise "./bob/fred/" == "bob/fred/"),
    ("normalise", normalise "./" == "./"),
    ("normalise", normalise "./." == "./"),
    ("normalise", normalise "/./" == "/"),
    ("normalise", normalise "/" == "/"),
    ("normalise", normalise "bob/fred/." == "bob/fred/"),
    ("normalise", normalise "//home" == "/home"),
    ("isValid", isValid "" == False),
    ("isValid", isValid "\0" == False),
    ("isValid", isValid "/random_ path:*" == True),
    ("isValid", isValid "/tmp/../var/foo.bar" == not (null "/tmp/../var/foo.bar")),
    ("isValid", isValid (makeValid "/tmp/../var/foo.bar")),
    ("isValid", makeValid "/tmp/../var/foo.bar" == "/tmp/../var/foo.bar"),
    ("makeValid", makeValid "" == "_"),
    ("makeValid", makeValid "file\0name" == "file_name"),
    ("isRelative", isRelative "test/path" == True),
    ("isRelative", isRelative "/test" == False),
    ("isRelative", isRelative "/" == False),
    ("isAbsolute", isAbsolute "/tmp/../var/foo.bar" == not (isRelative "/tmp/../var/foo.bar"))
    ]

--- identities which hold on a Windows system
win = [
    ("pathSeparator", pathSeparator == '\\'),
    ("pathSeparators", pathSeparators == ['\\', '/']),
    ("searchPathSeparator", searchPathSeparator == ';'),
    ("splitSearchPath", splitSearchPath "File1;File2;File3"  == ["File1","File2","File3"]),
    ("splitSearchPath", splitSearchPath "File1;;File2;File3" == ["File1","File2","File3"]),
    ("splitSearchPath", splitSearchPath "File1;\"File2\";File3" == ["File1","File2","File3"]),
    ("addExtension", addExtension "\\\\share" ".txt" == "\\\\share\\.txt"),
    ("splitDrive", splitDrive "file" == ("","file")),
    ("splitDrive", splitDrive "c:/file" == ("c:/","file")),
    ("splitDrive", splitDrive "c:\\file" == ("c:\\","file")),
    ("splitDrive", splitDrive "\\\\shared\\test" == ("\\\\shared\\","test")),
    ("splitDrive", splitDrive "\\\\shared" == ("\\\\shared","")),
    ("splitDrive", splitDrive "\\\\?\\UNC\\shared\\file" == ("\\\\?\\UNC\\shared\\","file")),
    ("splitDrive", splitDrive "\\\\?\\UNCshared\\file" == ("\\\\?\\","UNCshared\\file")),
    ("splitDrive", splitDrive "\\\\?\\d:\\file" == ("\\\\?\\d:\\","file")),
    ("splitDrive", splitDrive "/d" == ("","/d")),
    ("joinDrive", joinDrive "C:" "foo" == "C:foo"),
    ("joinDrive", joinDrive "C:\\" "bar" == "C:\\bar"),
    ("joinDrive", joinDrive "\\\\share" "foo" == "\\\\share\\foo"),
    ("joinDrive", joinDrive "/:" "foo" == "/:\\foo"),
    ("hasDrive", hasDrive "C:\\foo" == True),
    ("hasDrive", hasDrive "C:foo" == True),
    ("hasDrive", hasDrive "foo" == False),
    ("hasDrive", hasDrive "" == False),
    ("isDrive", isDrive "C:\\" == True),
    ("isDrive", isDrive "C:\\foo" == False),
    ("isDrive", isDrive "" == False),
    ("splitFileName", splitFileName "c:" == ("c:","")),
    ("dropTrailingPathSeparator", dropTrailingPathSeparator "\\" == "\\"),
    ("takeDirectory", takeDirectory "foo\\bar" == "foo"),
    ("takeDirectory", takeDirectory "foo\\bar\\\\" == "foo\\bar"),
    ("takeDirectory", takeDirectory "C:\\" == "C:\\"),
    ("(/directory", ("/directory" </> "file.ext") == "/directory\\file.ext"),
    ("(directory", ("directory" </> "/file.ext") == "/file.ext"),
    ("(C:\\foo", ("C:\\foo" </> "bar") == "C:\\foo\\bar"),
    ("(home", ("home" </> "bob") == "home\\bob"),
    ("(home", ("home" </> "C:\\bob") == "C:\\bob"),
    ("(home", ("home" </> "/bob") == "/bob"),
    ("(home", ("home" </> "\\bob") == "\\bob"),
    ("(C:\\home", ("C:\\home" </> "\\bob") == "\\bob"),
    ("(D:\\foo", ("D:\\foo" </> "C:bar") == "C:bar"),
    ("(C:\\foo", ("C:\\foo" </> "C:bar") == "C:bar"),
    ("splitPath", splitPath "c:\\test\\path" == ["c:\\","test\\","path"]),
    ("splitDirectories", splitDirectories "C:\\test\\file" == ["C:\\", "test", "file"]),
    ("Valid", joinPath (splitDirectories "/tmp/../var/foo.bar") `equalFilePath` "/tmp/../var/foo.bar"),
    ("splitDirectories", splitDirectories "" == []),
    ("splitDirectories", splitDirectories "C:\\test\\\\\\file" == ["C:\\", "test", "file"]),
    ("splitDirectories", splitDirectories "/test///file" == ["/","test","file"]),
    ("equalFilePath", equalFilePath "foo" "FOO"),
    ("not", not (equalFilePath "C:" "C:/")),
    ("makeRelative", makeRelative "/directory" "/directory/file.ext" == "file.ext"),
    ("Valid", makeRelative (takeDirectory "/tmp/../var/foo.bar") "/tmp/../var/foo.bar" `equalFilePath` takeFileName "/tmp/../var/foo.bar"),
    ("makeRelative", makeRelative "/tmp/../var/foo.bar" "/tmp/../var/foo.bar" == "."),
    ("Valid", equalFilePath "/tmp/../var/foo.bar" ".ext" || (isRelative "/tmp/../var/foo.bar" && makeRelative ".ext" "/tmp/../var/foo.bar" == "/tmp/../var/foo.bar") || equalFilePath ("tmp" </> makeRelative ".ext" "/tmp/../var/foo.bar") "/tmp/../var/foo.bar"),
    ("makeRelative", makeRelative "C:\\Home" "c:\\home\\bob" == "bob"),
    ("makeRelative", makeRelative "C:\\Home" "c:/home/bob" == "bob"),
    ("makeRelative", makeRelative "C:\\Home" "D:\\Home\\Bob" == "D:\\Home\\Bob"),
    ("makeRelative", makeRelative "C:\\Home" "C:Home\\Bob" == "C:Home\\Bob"),
    ("makeRelative", makeRelative "/Home" "/home/bob" == "bob"),
    ("makeRelative", makeRelative "/" "//" == "//"),
    ("normalise", normalise "c:\\file/bob\\" == "C:\\file\\bob\\"),
    ("normalise", normalise "c:\\" == "C:\\"),
    ("normalise", normalise "C:.\\" == "C:"),
    ("normalise", normalise "\\\\server\\test" == "\\\\server\\test"),
    ("normalise", normalise "//server/test" == "\\\\server\\test"),
    ("normalise", normalise "c:/file" == "C:\\file"),
    ("normalise", normalise "/file" == "\\file"),
    ("normalise", normalise "\\" == "\\"),
    ("normalise", normalise "/./" == "\\"),
    ("normalise", normalise "." == "."),
    ("isValid", isValid "c:\\test" == True),
    ("isValid", isValid "c:\\test:of_test" == False),
    ("isValid", isValid "test*" == False),
    ("isValid", isValid "c:\\test\\nul" == False),
    ("isValid", isValid "c:\\test\\prn.txt" == False),
    ("isValid", isValid "c:\\nul\\file" == False),
    ("isValid", isValid "\\\\" == False),
    ("isValid", isValid "\\\\\\foo" == False),
    ("isValid", isValid "\\\\?\\D:file" == False),
    ("isValid", isValid "foo\tbar" == False),
    ("isValid", isValid "nul .txt" == False),
    ("isValid", isValid " nul.txt" == True),
    ("makeValid", makeValid "c:\\already\\/valid" == "c:\\already\\/valid"),
    ("makeValid", makeValid "c:\\test:of_test" == "c:\\test_of_test"),
    ("makeValid", makeValid "test*" == "test_"),
    ("makeValid", makeValid "c:\\test\\nul" == "c:\\test\\nul_"),
    ("makeValid", makeValid "c:\\test\\prn.txt" == "c:\\test\\prn_.txt"),
    ("makeValid", makeValid "c:\\test/prn.txt" == "c:\\test/prn_.txt"),
    ("makeValid", makeValid "c:\\nul\\file" == "c:\\nul_\\file"),
    ("makeValid", makeValid "\\\\\\foo" == "\\\\drive"),
    ("makeValid", makeValid "\\\\?\\D:file" == "\\\\?\\D:\\file"),
    ("makeValid", makeValid "nul .txt" == "nul _.txt"),
    ("isRelative", isRelative "path\\test" == True),
    ("isRelative", isRelative "c:\\test" == False),
    ("isRelative", isRelative "c:test" == True),
    ("isRelative", isRelative "c:\\" == False),
    ("isRelative", isRelative "c:/" == False),
    ("isRelative", isRelative "c:" == True),
    ("isRelative", isRelative "\\\\foo" == False),
    ("isRelative", isRelative "\\\\?\\foo" == False),
    ("isRelative", isRelative "\\\\?\\UNC\\foo" == False),
    ("isRelative", isRelative "/foo" == True),
    ("isRelative", isRelative "\\foo" == True)
    ]
