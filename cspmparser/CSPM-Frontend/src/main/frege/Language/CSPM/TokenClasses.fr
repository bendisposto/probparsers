{-
    This module contains the data type PrimToken.
    
    [Module]     Language.CSPM.TokenClasses
    [Copyright]  (c) Fontaine 2008 - 2011
    [License]    BSD
    
    [Maintainer] Fontaine@cs.uni-duesseldorf.de
    [Stability]  provisional
-}

module Language.CSPM.TokenClasses
where

import Data.Data
import Data.Ix

--- The token classes of the CSP-M lexer
{-# derive DataTypeable #-}
data PrimToken
  = L_Newline
  | T_WhiteSpace
  | L_LComment
  | L_BComment
  | L_Pragma
  | L_Include
  | L_EOF
  | L_Integer
  | L_String
  | L_Ident
-- keywords
  | T_channel
  | T_datatype
  | T_nametype
  | T_subtype
  | T_assert
  | T_pragma
  | T_transparent
  | T_external
  | T_print
  | T_if
  | T_then
  | T_else
  | T_let
  | T_within
-- constants and builtins
  | T_true
  | T_false
  | T_not
  | T_and
  | T_or
  -- | T_union
  -- | T_inter
  -- | T_diff
  -- | T_Union
  -- | T_Inter
  -- | T_member
  -- | T_card
  -- | T_empty
  -- | T_set
  -- | T_seq
  -- | T_Set
  -- | T_Seq
  -- | T_null
  -- | T_head
  -- | T_tail
  -- | T_concat
  -- | T_elem
  -- | T_length
  | T_STOP
  | T_SKIP
  | T_Events
  | T_Int
  | T_Bool
  | T_CHAOS
-- symbols
  | T_hat          --- "^"
  | T_hash         --- "#"
  | T_times        --- "*"
  | T_slash        --- "/"
  | T_percent      --- "%"
  | T_plus         --- "+"
  | T_minus        --- "-"
  | T_eq           --- "=="
  | T_neq          --- "!="
  | T_ge           --- ">="
  | T_le           --- "<="
  | T_lt           --- "<"
  | T_gt           --- ">"
  | T_amp          --- "&"
  | T_semicolon    --- ";"
  | T_comma        --- ","
  | T_triangle     --- "/\\"
  | T_box          --- "[]"
  | T_rhd          --- "[>"
  | T_exp          --- "|>"
  | T_sqcap        --- "|~|"
  | T_interleave   --- "|||"
  | T_backslash    --- "\\"
  | T_parallel     --- "||"
  | T_mid          --- "|"
  | T_at           --- "@"
  | T_atat         --- "@@"
  | T_rightarrow   --- "->"
  | T_leftarrow    --- "<-"
  | T_leftrightarrow --- "<->"
  | T_dot          --- "."
  | T_dotdot       --- ".."
  | T_exclamation  --- "!"
  | T_questionmark --- "?"
  | T_colon        --- ":"
  | T_openParen    --- "("
  | T_closeParen   --- ")"
  | T_openBrace    --- "{"
  | T_closeBrace   --- "}"
  | T_openBrack    --- "["
  | T_closeBrack   --- "]"
  | T_openAssertBrack  --- ":["
  | T_closeAssertBrack --- "]:"
  | T_closeSpecialBrack --- "]" used only for assert declarations
  | T_openOxBrack  --- "[|"
  | T_closeOxBrack --- "|]"
  | T_openBrackBrack  --- "[["
  | T_closeBrackBrack --- "]]"
  | T_openPBrace   --- "{|"
  | T_closePBrace  --- "|}"
  | T_underscore   --- "_"
  | T_is           --- "="
-- assert List refinement Operators
  | T_Refine --- "[="
  | T_trace  --- "[T="
  | T_failure --- "[F="
  | T_failureDivergence --- "[FD="
  | T_refusalTesting --- "[R="
  | T_refusalTestingDiv --- "[RD="
  | T_revivalTesting --- "[V="
  | T_revivalTestingDiv --- "[VD="
  | T_tauPriorityOp --- "[TP="
  | T_model_check --- "|="
  | T_tau
  | T_priority
  | T_over
  | T_deadlock
  | T_deterministic
  | T_livelock
  | T_free
  | T_F
  | T_T
  | T_FD
  | T_LTL
  | T_CTL
derive Show PrimToken
derive Eq PrimToken
derive Ord PrimToken
derive Enum PrimToken
derive Bounded PrimToken

instance Ix PrimToken where
    range (m,n) = [(applyN succ i) minBound | i <- [fromEnum m .. fromEnum n]]
    unsafeIndex (l,_) i = fromEnum i - fromEnum l
    index b i | inRange b i =  unsafeIndex b i
              | otherwise   =  indexError b i "Bool"
    inRange (l,u) i = fromEnum i >= fromEnum l && fromEnum i <= fromEnum u

applyN :: (a -> a) -> Int -> (a -> a)
applyN f n = foldr (.) id (replicate n f)

{-# autogenerated by DataDeriver #-}
tc_PrimToken :: TyCon
tc_PrimToken = mkTyCon3 "Language.CSPM" "TokenClasses" "PrimToken"
instance Typeable (PrimToken ) where
    typeOf _ = mkTyConApp tc_PrimToken []
con_PrimToken_L_Newline :: Constr
con_PrimToken_L_Newline = mkConstr ty_PrimToken "L_Newline" [] Prefix
con_PrimToken_T_WhiteSpace :: Constr
con_PrimToken_T_WhiteSpace = mkConstr ty_PrimToken "T_WhiteSpace" [] Prefix
con_PrimToken_L_LComment :: Constr
con_PrimToken_L_LComment = mkConstr ty_PrimToken "L_LComment" [] Prefix
con_PrimToken_L_BComment :: Constr
con_PrimToken_L_BComment = mkConstr ty_PrimToken "L_BComment" [] Prefix
con_PrimToken_L_Pragma :: Constr
con_PrimToken_L_Pragma = mkConstr ty_PrimToken "L_Pragma" [] Prefix
con_PrimToken_L_Include :: Constr
con_PrimToken_L_Include = mkConstr ty_PrimToken "L_Include" [] Prefix
con_PrimToken_L_EOF :: Constr
con_PrimToken_L_EOF = mkConstr ty_PrimToken "L_EOF" [] Prefix
con_PrimToken_L_Integer :: Constr
con_PrimToken_L_Integer = mkConstr ty_PrimToken "L_Integer" [] Prefix
con_PrimToken_L_String :: Constr
con_PrimToken_L_String = mkConstr ty_PrimToken "L_String" [] Prefix
con_PrimToken_L_Ident :: Constr
con_PrimToken_L_Ident = mkConstr ty_PrimToken "L_Ident" [] Prefix
con_PrimToken_T_channel :: Constr
con_PrimToken_T_channel = mkConstr ty_PrimToken "T_channel" [] Prefix
con_PrimToken_T_datatype :: Constr
con_PrimToken_T_datatype = mkConstr ty_PrimToken "T_datatype" [] Prefix
con_PrimToken_T_nametype :: Constr
con_PrimToken_T_nametype = mkConstr ty_PrimToken "T_nametype" [] Prefix
con_PrimToken_T_subtype :: Constr
con_PrimToken_T_subtype = mkConstr ty_PrimToken "T_subtype" [] Prefix
con_PrimToken_T_assert :: Constr
con_PrimToken_T_assert = mkConstr ty_PrimToken "T_assert" [] Prefix
con_PrimToken_T_pragma :: Constr
con_PrimToken_T_pragma = mkConstr ty_PrimToken "T_pragma" [] Prefix
con_PrimToken_T_transparent :: Constr
con_PrimToken_T_transparent = mkConstr ty_PrimToken "T_transparent" [] Prefix
con_PrimToken_T_external :: Constr
con_PrimToken_T_external = mkConstr ty_PrimToken "T_external" [] Prefix
con_PrimToken_T_print :: Constr
con_PrimToken_T_print = mkConstr ty_PrimToken "T_print" [] Prefix
con_PrimToken_T_if :: Constr
con_PrimToken_T_if = mkConstr ty_PrimToken "T_if" [] Prefix
con_PrimToken_T_then :: Constr
con_PrimToken_T_then = mkConstr ty_PrimToken "T_then" [] Prefix
con_PrimToken_T_else :: Constr
con_PrimToken_T_else = mkConstr ty_PrimToken "T_else" [] Prefix
con_PrimToken_T_let :: Constr
con_PrimToken_T_let = mkConstr ty_PrimToken "T_let" [] Prefix
con_PrimToken_T_within :: Constr
con_PrimToken_T_within = mkConstr ty_PrimToken "T_within" [] Prefix
con_PrimToken_T_true :: Constr
con_PrimToken_T_true = mkConstr ty_PrimToken "T_true" [] Prefix
con_PrimToken_T_false :: Constr
con_PrimToken_T_false = mkConstr ty_PrimToken "T_false" [] Prefix
con_PrimToken_T_not :: Constr
con_PrimToken_T_not = mkConstr ty_PrimToken "T_not" [] Prefix
con_PrimToken_T_and :: Constr
con_PrimToken_T_and = mkConstr ty_PrimToken "T_and" [] Prefix
con_PrimToken_T_or :: Constr
con_PrimToken_T_or = mkConstr ty_PrimToken "T_or" [] Prefix
con_PrimToken_T_STOP :: Constr
con_PrimToken_T_STOP = mkConstr ty_PrimToken "T_STOP" [] Prefix
con_PrimToken_T_SKIP :: Constr
con_PrimToken_T_SKIP = mkConstr ty_PrimToken "T_SKIP" [] Prefix
con_PrimToken_T_Events :: Constr
con_PrimToken_T_Events = mkConstr ty_PrimToken "T_Events" [] Prefix
con_PrimToken_T_Int :: Constr
con_PrimToken_T_Int = mkConstr ty_PrimToken "T_Int" [] Prefix
con_PrimToken_T_Bool :: Constr
con_PrimToken_T_Bool = mkConstr ty_PrimToken "T_Bool" [] Prefix
con_PrimToken_T_CHAOS :: Constr
con_PrimToken_T_CHAOS = mkConstr ty_PrimToken "T_CHAOS" [] Prefix
con_PrimToken_T_hat :: Constr
con_PrimToken_T_hat = mkConstr ty_PrimToken "T_hat" [] Prefix
con_PrimToken_T_hash :: Constr
con_PrimToken_T_hash = mkConstr ty_PrimToken "T_hash" [] Prefix
con_PrimToken_T_times :: Constr
con_PrimToken_T_times = mkConstr ty_PrimToken "T_times" [] Prefix
con_PrimToken_T_slash :: Constr
con_PrimToken_T_slash = mkConstr ty_PrimToken "T_slash" [] Prefix
con_PrimToken_T_percent :: Constr
con_PrimToken_T_percent = mkConstr ty_PrimToken "T_percent" [] Prefix
con_PrimToken_T_plus :: Constr
con_PrimToken_T_plus = mkConstr ty_PrimToken "T_plus" [] Prefix
con_PrimToken_T_minus :: Constr
con_PrimToken_T_minus = mkConstr ty_PrimToken "T_minus" [] Prefix
con_PrimToken_T_eq :: Constr
con_PrimToken_T_eq = mkConstr ty_PrimToken "T_eq" [] Prefix
con_PrimToken_T_neq :: Constr
con_PrimToken_T_neq = mkConstr ty_PrimToken "T_neq" [] Prefix
con_PrimToken_T_ge :: Constr
con_PrimToken_T_ge = mkConstr ty_PrimToken "T_ge" [] Prefix
con_PrimToken_T_le :: Constr
con_PrimToken_T_le = mkConstr ty_PrimToken "T_le" [] Prefix
con_PrimToken_T_lt :: Constr
con_PrimToken_T_lt = mkConstr ty_PrimToken "T_lt" [] Prefix
con_PrimToken_T_gt :: Constr
con_PrimToken_T_gt = mkConstr ty_PrimToken "T_gt" [] Prefix
con_PrimToken_T_amp :: Constr
con_PrimToken_T_amp = mkConstr ty_PrimToken "T_amp" [] Prefix
con_PrimToken_T_semicolon :: Constr
con_PrimToken_T_semicolon = mkConstr ty_PrimToken "T_semicolon" [] Prefix
con_PrimToken_T_comma :: Constr
con_PrimToken_T_comma = mkConstr ty_PrimToken "T_comma" [] Prefix
con_PrimToken_T_triangle :: Constr
con_PrimToken_T_triangle = mkConstr ty_PrimToken "T_triangle" [] Prefix
con_PrimToken_T_box :: Constr
con_PrimToken_T_box = mkConstr ty_PrimToken "T_box" [] Prefix
con_PrimToken_T_rhd :: Constr
con_PrimToken_T_rhd = mkConstr ty_PrimToken "T_rhd" [] Prefix
con_PrimToken_T_exp :: Constr
con_PrimToken_T_exp = mkConstr ty_PrimToken "T_exp" [] Prefix
con_PrimToken_T_sqcap :: Constr
con_PrimToken_T_sqcap = mkConstr ty_PrimToken "T_sqcap" [] Prefix
con_PrimToken_T_interleave :: Constr
con_PrimToken_T_interleave = mkConstr ty_PrimToken "T_interleave" [] Prefix
con_PrimToken_T_backslash :: Constr
con_PrimToken_T_backslash = mkConstr ty_PrimToken "T_backslash" [] Prefix
con_PrimToken_T_parallel :: Constr
con_PrimToken_T_parallel = mkConstr ty_PrimToken "T_parallel" [] Prefix
con_PrimToken_T_mid :: Constr
con_PrimToken_T_mid = mkConstr ty_PrimToken "T_mid" [] Prefix
con_PrimToken_T_at :: Constr
con_PrimToken_T_at = mkConstr ty_PrimToken "T_at" [] Prefix
con_PrimToken_T_atat :: Constr
con_PrimToken_T_atat = mkConstr ty_PrimToken "T_atat" [] Prefix
con_PrimToken_T_rightarrow :: Constr
con_PrimToken_T_rightarrow = mkConstr ty_PrimToken "T_rightarrow" [] Prefix
con_PrimToken_T_leftarrow :: Constr
con_PrimToken_T_leftarrow = mkConstr ty_PrimToken "T_leftarrow" [] Prefix
con_PrimToken_T_leftrightarrow :: Constr
con_PrimToken_T_leftrightarrow = mkConstr ty_PrimToken "T_leftrightarrow" [] Prefix
con_PrimToken_T_dot :: Constr
con_PrimToken_T_dot = mkConstr ty_PrimToken "T_dot" [] Prefix
con_PrimToken_T_dotdot :: Constr
con_PrimToken_T_dotdot = mkConstr ty_PrimToken "T_dotdot" [] Prefix
con_PrimToken_T_exclamation :: Constr
con_PrimToken_T_exclamation = mkConstr ty_PrimToken "T_exclamation" [] Prefix
con_PrimToken_T_questionmark :: Constr
con_PrimToken_T_questionmark = mkConstr ty_PrimToken "T_questionmark" [] Prefix
con_PrimToken_T_colon :: Constr
con_PrimToken_T_colon = mkConstr ty_PrimToken "T_colon" [] Prefix
con_PrimToken_T_openParen :: Constr
con_PrimToken_T_openParen = mkConstr ty_PrimToken "T_openParen" [] Prefix
con_PrimToken_T_closeParen :: Constr
con_PrimToken_T_closeParen = mkConstr ty_PrimToken "T_closeParen" [] Prefix
con_PrimToken_T_openBrace :: Constr
con_PrimToken_T_openBrace = mkConstr ty_PrimToken "T_openBrace" [] Prefix
con_PrimToken_T_closeBrace :: Constr
con_PrimToken_T_closeBrace = mkConstr ty_PrimToken "T_closeBrace" [] Prefix
con_PrimToken_T_openBrack :: Constr
con_PrimToken_T_openBrack = mkConstr ty_PrimToken "T_openBrack" [] Prefix
con_PrimToken_T_closeBrack :: Constr
con_PrimToken_T_closeBrack = mkConstr ty_PrimToken "T_closeBrack" [] Prefix
con_PrimToken_T_openAssertBrack :: Constr
con_PrimToken_T_openAssertBrack = mkConstr ty_PrimToken "T_openAssertBrack" [] Prefix
con_PrimToken_T_closeAssertBrack :: Constr
con_PrimToken_T_closeAssertBrack = mkConstr ty_PrimToken "T_closeAssertBrack" [] Prefix
con_PrimToken_T_closeSpecialBrack :: Constr
con_PrimToken_T_closeSpecialBrack = mkConstr ty_PrimToken "T_closeSpecialBrack" [] Prefix
con_PrimToken_T_openOxBrack :: Constr
con_PrimToken_T_openOxBrack = mkConstr ty_PrimToken "T_openOxBrack" [] Prefix
con_PrimToken_T_closeOxBrack :: Constr
con_PrimToken_T_closeOxBrack = mkConstr ty_PrimToken "T_closeOxBrack" [] Prefix
con_PrimToken_T_openBrackBrack :: Constr
con_PrimToken_T_openBrackBrack = mkConstr ty_PrimToken "T_openBrackBrack" [] Prefix
con_PrimToken_T_closeBrackBrack :: Constr
con_PrimToken_T_closeBrackBrack = mkConstr ty_PrimToken "T_closeBrackBrack" [] Prefix
con_PrimToken_T_openPBrace :: Constr
con_PrimToken_T_openPBrace = mkConstr ty_PrimToken "T_openPBrace" [] Prefix
con_PrimToken_T_closePBrace :: Constr
con_PrimToken_T_closePBrace = mkConstr ty_PrimToken "T_closePBrace" [] Prefix
con_PrimToken_T_underscore :: Constr
con_PrimToken_T_underscore = mkConstr ty_PrimToken "T_underscore" [] Prefix
con_PrimToken_T_is :: Constr
con_PrimToken_T_is = mkConstr ty_PrimToken "T_is" [] Prefix
con_PrimToken_T_Refine :: Constr
con_PrimToken_T_Refine = mkConstr ty_PrimToken "T_Refine" [] Prefix
con_PrimToken_T_trace :: Constr
con_PrimToken_T_trace = mkConstr ty_PrimToken "T_trace" [] Prefix
con_PrimToken_T_failure :: Constr
con_PrimToken_T_failure = mkConstr ty_PrimToken "T_failure" [] Prefix
con_PrimToken_T_failureDivergence :: Constr
con_PrimToken_T_failureDivergence = mkConstr ty_PrimToken "T_failureDivergence" [] Prefix
con_PrimToken_T_refusalTesting :: Constr
con_PrimToken_T_refusalTesting = mkConstr ty_PrimToken "T_refusalTesting" [] Prefix
con_PrimToken_T_refusalTestingDiv :: Constr
con_PrimToken_T_refusalTestingDiv = mkConstr ty_PrimToken "T_refusalTestingDiv" [] Prefix
con_PrimToken_T_revivalTesting :: Constr
con_PrimToken_T_revivalTesting = mkConstr ty_PrimToken "T_revivalTesting" [] Prefix
con_PrimToken_T_revivalTestingDiv :: Constr
con_PrimToken_T_revivalTestingDiv = mkConstr ty_PrimToken "T_revivalTestingDiv" [] Prefix
con_PrimToken_T_tauPriorityOp :: Constr
con_PrimToken_T_tauPriorityOp = mkConstr ty_PrimToken "T_tauPriorityOp" [] Prefix
con_PrimToken_T_model_check :: Constr
con_PrimToken_T_model_check = mkConstr ty_PrimToken "T_model_check" [] Prefix
con_PrimToken_T_tau :: Constr
con_PrimToken_T_tau = mkConstr ty_PrimToken "T_tau" [] Prefix
con_PrimToken_T_priority :: Constr
con_PrimToken_T_priority = mkConstr ty_PrimToken "T_priority" [] Prefix
con_PrimToken_T_over :: Constr
con_PrimToken_T_over = mkConstr ty_PrimToken "T_over" [] Prefix
con_PrimToken_T_deadlock :: Constr
con_PrimToken_T_deadlock = mkConstr ty_PrimToken "T_deadlock" [] Prefix
con_PrimToken_T_deterministic :: Constr
con_PrimToken_T_deterministic = mkConstr ty_PrimToken "T_deterministic" [] Prefix
con_PrimToken_T_livelock :: Constr
con_PrimToken_T_livelock = mkConstr ty_PrimToken "T_livelock" [] Prefix
con_PrimToken_T_free :: Constr
con_PrimToken_T_free = mkConstr ty_PrimToken "T_free" [] Prefix
con_PrimToken_T_F :: Constr
con_PrimToken_T_F = mkConstr ty_PrimToken "T_F" [] Prefix
con_PrimToken_T_T :: Constr
con_PrimToken_T_T = mkConstr ty_PrimToken "T_T" [] Prefix
con_PrimToken_T_FD :: Constr
con_PrimToken_T_FD = mkConstr ty_PrimToken "T_FD" [] Prefix
con_PrimToken_T_LTL :: Constr
con_PrimToken_T_LTL = mkConstr ty_PrimToken "T_LTL" [] Prefix
con_PrimToken_T_CTL :: Constr
con_PrimToken_T_CTL = mkConstr ty_PrimToken "T_CTL" [] Prefix
ty_PrimToken :: DataType
ty_PrimToken = mkDataType "Language.CSPM.TokenClasses.PrimToken" [con_PrimToken_L_Newline, con_PrimToken_T_WhiteSpace, con_PrimToken_L_LComment, con_PrimToken_L_BComment, con_PrimToken_L_Pragma, con_PrimToken_L_Include, con_PrimToken_L_EOF, con_PrimToken_L_Integer, con_PrimToken_L_String, con_PrimToken_L_Ident, con_PrimToken_T_channel, con_PrimToken_T_datatype, con_PrimToken_T_nametype, con_PrimToken_T_subtype, con_PrimToken_T_assert, con_PrimToken_T_pragma, con_PrimToken_T_transparent, con_PrimToken_T_external, con_PrimToken_T_print, con_PrimToken_T_if, con_PrimToken_T_then, con_PrimToken_T_else, con_PrimToken_T_let, con_PrimToken_T_within, con_PrimToken_T_true, con_PrimToken_T_false, con_PrimToken_T_not, con_PrimToken_T_and, con_PrimToken_T_or, con_PrimToken_T_STOP, con_PrimToken_T_SKIP, con_PrimToken_T_Events, con_PrimToken_T_Int, con_PrimToken_T_Bool, con_PrimToken_T_CHAOS, con_PrimToken_T_hat, con_PrimToken_T_hash, con_PrimToken_T_times, con_PrimToken_T_slash, con_PrimToken_T_percent, con_PrimToken_T_plus, con_PrimToken_T_minus, con_PrimToken_T_eq, con_PrimToken_T_neq, con_PrimToken_T_ge, con_PrimToken_T_le, con_PrimToken_T_lt, con_PrimToken_T_gt, con_PrimToken_T_amp, con_PrimToken_T_semicolon, con_PrimToken_T_comma, con_PrimToken_T_triangle, con_PrimToken_T_box, con_PrimToken_T_rhd, con_PrimToken_T_exp, con_PrimToken_T_sqcap, con_PrimToken_T_interleave, con_PrimToken_T_backslash, con_PrimToken_T_parallel, con_PrimToken_T_mid, con_PrimToken_T_at, con_PrimToken_T_atat, con_PrimToken_T_rightarrow, con_PrimToken_T_leftarrow, con_PrimToken_T_leftrightarrow, con_PrimToken_T_dot, con_PrimToken_T_dotdot, con_PrimToken_T_exclamation, con_PrimToken_T_questionmark, con_PrimToken_T_colon, con_PrimToken_T_openParen, con_PrimToken_T_closeParen, con_PrimToken_T_openBrace, con_PrimToken_T_closeBrace, con_PrimToken_T_openBrack, con_PrimToken_T_closeBrack, con_PrimToken_T_openAssertBrack, con_PrimToken_T_closeAssertBrack, con_PrimToken_T_closeSpecialBrack, con_PrimToken_T_openOxBrack, con_PrimToken_T_closeOxBrack, con_PrimToken_T_openBrackBrack, con_PrimToken_T_closeBrackBrack, con_PrimToken_T_openPBrace, con_PrimToken_T_closePBrace, con_PrimToken_T_underscore, con_PrimToken_T_is, con_PrimToken_T_Refine, con_PrimToken_T_trace, con_PrimToken_T_failure, con_PrimToken_T_failureDivergence, con_PrimToken_T_refusalTesting, con_PrimToken_T_refusalTestingDiv, con_PrimToken_T_revivalTesting, con_PrimToken_T_revivalTestingDiv, con_PrimToken_T_tauPriorityOp, con_PrimToken_T_model_check, con_PrimToken_T_tau, con_PrimToken_T_priority, con_PrimToken_T_over, con_PrimToken_T_deadlock, con_PrimToken_T_deterministic, con_PrimToken_T_livelock, con_PrimToken_T_free, con_PrimToken_T_F, con_PrimToken_T_T, con_PrimToken_T_FD, con_PrimToken_T_LTL, con_PrimToken_T_CTL]
instance Data (PrimToken ) where
    toConstr (L_Newline) = con_PrimToken_L_Newline
    toConstr (T_WhiteSpace) = con_PrimToken_T_WhiteSpace
    toConstr (L_LComment) = con_PrimToken_L_LComment
    toConstr (L_BComment) = con_PrimToken_L_BComment
    toConstr (L_Pragma) = con_PrimToken_L_Pragma
    toConstr (L_Include) = con_PrimToken_L_Include
    toConstr (L_EOF) = con_PrimToken_L_EOF
    toConstr (L_Integer) = con_PrimToken_L_Integer
    toConstr (L_String) = con_PrimToken_L_String
    toConstr (L_Ident) = con_PrimToken_L_Ident
    toConstr (T_channel) = con_PrimToken_T_channel
    toConstr (T_datatype) = con_PrimToken_T_datatype
    toConstr (T_nametype) = con_PrimToken_T_nametype
    toConstr (T_subtype) = con_PrimToken_T_subtype
    toConstr (T_assert) = con_PrimToken_T_assert
    toConstr (T_pragma) = con_PrimToken_T_pragma
    toConstr (T_transparent) = con_PrimToken_T_transparent
    toConstr (T_external) = con_PrimToken_T_external
    toConstr (T_print) = con_PrimToken_T_print
    toConstr (T_if) = con_PrimToken_T_if
    toConstr (T_then) = con_PrimToken_T_then
    toConstr (T_else) = con_PrimToken_T_else
    toConstr (T_let) = con_PrimToken_T_let
    toConstr (T_within) = con_PrimToken_T_within
    toConstr (T_true) = con_PrimToken_T_true
    toConstr (T_false) = con_PrimToken_T_false
    toConstr (T_not) = con_PrimToken_T_not
    toConstr (T_and) = con_PrimToken_T_and
    toConstr (T_or) = con_PrimToken_T_or
    toConstr (T_STOP) = con_PrimToken_T_STOP
    toConstr (T_SKIP) = con_PrimToken_T_SKIP
    toConstr (T_Events) = con_PrimToken_T_Events
    toConstr (T_Int) = con_PrimToken_T_Int
    toConstr (T_Bool) = con_PrimToken_T_Bool
    toConstr (T_CHAOS) = con_PrimToken_T_CHAOS
    toConstr (T_hat) = con_PrimToken_T_hat
    toConstr (T_hash) = con_PrimToken_T_hash
    toConstr (T_times) = con_PrimToken_T_times
    toConstr (T_slash) = con_PrimToken_T_slash
    toConstr (T_percent) = con_PrimToken_T_percent
    toConstr (T_plus) = con_PrimToken_T_plus
    toConstr (T_minus) = con_PrimToken_T_minus
    toConstr (T_eq) = con_PrimToken_T_eq
    toConstr (T_neq) = con_PrimToken_T_neq
    toConstr (T_ge) = con_PrimToken_T_ge
    toConstr (T_le) = con_PrimToken_T_le
    toConstr (T_lt) = con_PrimToken_T_lt
    toConstr (T_gt) = con_PrimToken_T_gt
    toConstr (T_amp) = con_PrimToken_T_amp
    toConstr (T_semicolon) = con_PrimToken_T_semicolon
    toConstr (T_comma) = con_PrimToken_T_comma
    toConstr (T_triangle) = con_PrimToken_T_triangle
    toConstr (T_box) = con_PrimToken_T_box
    toConstr (T_rhd) = con_PrimToken_T_rhd
    toConstr (T_exp) = con_PrimToken_T_exp
    toConstr (T_sqcap) = con_PrimToken_T_sqcap
    toConstr (T_interleave) = con_PrimToken_T_interleave
    toConstr (T_backslash) = con_PrimToken_T_backslash
    toConstr (T_parallel) = con_PrimToken_T_parallel
    toConstr (T_mid) = con_PrimToken_T_mid
    toConstr (T_at) = con_PrimToken_T_at
    toConstr (T_atat) = con_PrimToken_T_atat
    toConstr (T_rightarrow) = con_PrimToken_T_rightarrow
    toConstr (T_leftarrow) = con_PrimToken_T_leftarrow
    toConstr (T_leftrightarrow) = con_PrimToken_T_leftrightarrow
    toConstr (T_dot) = con_PrimToken_T_dot
    toConstr (T_dotdot) = con_PrimToken_T_dotdot
    toConstr (T_exclamation) = con_PrimToken_T_exclamation
    toConstr (T_questionmark) = con_PrimToken_T_questionmark
    toConstr (T_colon) = con_PrimToken_T_colon
    toConstr (T_openParen) = con_PrimToken_T_openParen
    toConstr (T_closeParen) = con_PrimToken_T_closeParen
    toConstr (T_openBrace) = con_PrimToken_T_openBrace
    toConstr (T_closeBrace) = con_PrimToken_T_closeBrace
    toConstr (T_openBrack) = con_PrimToken_T_openBrack
    toConstr (T_closeBrack) = con_PrimToken_T_closeBrack
    toConstr (T_openAssertBrack) = con_PrimToken_T_openAssertBrack
    toConstr (T_closeAssertBrack) = con_PrimToken_T_closeAssertBrack
    toConstr (T_closeSpecialBrack) = con_PrimToken_T_closeSpecialBrack
    toConstr (T_openOxBrack) = con_PrimToken_T_openOxBrack
    toConstr (T_closeOxBrack) = con_PrimToken_T_closeOxBrack
    toConstr (T_openBrackBrack) = con_PrimToken_T_openBrackBrack
    toConstr (T_closeBrackBrack) = con_PrimToken_T_closeBrackBrack
    toConstr (T_openPBrace) = con_PrimToken_T_openPBrace
    toConstr (T_closePBrace) = con_PrimToken_T_closePBrace
    toConstr (T_underscore) = con_PrimToken_T_underscore
    toConstr (T_is) = con_PrimToken_T_is
    toConstr (T_Refine) = con_PrimToken_T_Refine
    toConstr (T_trace) = con_PrimToken_T_trace
    toConstr (T_failure) = con_PrimToken_T_failure
    toConstr (T_failureDivergence) = con_PrimToken_T_failureDivergence
    toConstr (T_refusalTesting) = con_PrimToken_T_refusalTesting
    toConstr (T_refusalTestingDiv) = con_PrimToken_T_refusalTestingDiv
    toConstr (T_revivalTesting) = con_PrimToken_T_revivalTesting
    toConstr (T_revivalTestingDiv) = con_PrimToken_T_revivalTestingDiv
    toConstr (T_tauPriorityOp) = con_PrimToken_T_tauPriorityOp
    toConstr (T_model_check) = con_PrimToken_T_model_check
    toConstr (T_tau) = con_PrimToken_T_tau
    toConstr (T_priority) = con_PrimToken_T_priority
    toConstr (T_over) = con_PrimToken_T_over
    toConstr (T_deadlock) = con_PrimToken_T_deadlock
    toConstr (T_deterministic) = con_PrimToken_T_deterministic
    toConstr (T_livelock) = con_PrimToken_T_livelock
    toConstr (T_free) = con_PrimToken_T_free
    toConstr (T_F) = con_PrimToken_T_F
    toConstr (T_T) = con_PrimToken_T_T
    toConstr (T_FD) = con_PrimToken_T_FD
    toConstr (T_LTL) = con_PrimToken_T_LTL
    toConstr (T_CTL) = con_PrimToken_T_CTL
    dataTypeOf _ = ty_PrimToken
    gunfold k z c = case constrIndex c of
                         1 -> z L_Newline
                         2 -> z T_WhiteSpace
                         3 -> z L_LComment
                         4 -> z L_BComment
                         5 -> z L_Pragma
                         6 -> z L_Include
                         7 -> z L_EOF
                         8 -> z L_Integer
                         9 -> z L_String
                         10 -> z L_Ident
                         11 -> z T_channel
                         12 -> z T_datatype
                         13 -> z T_nametype
                         14 -> z T_subtype
                         15 -> z T_assert
                         16 -> z T_pragma
                         17 -> z T_transparent
                         18 -> z T_external
                         19 -> z T_print
                         20 -> z T_if
                         21 -> z T_then
                         22 -> z T_else
                         23 -> z T_let
                         24 -> z T_within
                         25 -> z T_true
                         26 -> z T_false
                         27 -> z T_not
                         28 -> z T_and
                         29 -> z T_or
                         30 -> z T_STOP
                         31 -> z T_SKIP
                         32 -> z T_Events
                         33 -> z T_Int
                         34 -> z T_Bool
                         35 -> z T_CHAOS
                         36 -> z T_hat
                         37 -> z T_hash
                         38 -> z T_times
                         39 -> z T_slash
                         40 -> z T_percent
                         41 -> z T_plus
                         42 -> z T_minus
                         43 -> z T_eq
                         44 -> z T_neq
                         45 -> z T_ge
                         46 -> z T_le
                         47 -> z T_lt
                         48 -> z T_gt
                         49 -> z T_amp
                         50 -> z T_semicolon
                         51 -> z T_comma
                         52 -> z T_triangle
                         53 -> z T_box
                         54 -> z T_rhd
                         55 -> z T_exp
                         56 -> z T_sqcap
                         57 -> z T_interleave
                         58 -> z T_backslash
                         59 -> z T_parallel
                         60 -> z T_mid
                         61 -> z T_at
                         62 -> z T_atat
                         63 -> z T_rightarrow
                         64 -> z T_leftarrow
                         65 -> z T_leftrightarrow
                         66 -> z T_dot
                         67 -> z T_dotdot
                         68 -> z T_exclamation
                         69 -> z T_questionmark
                         70 -> z T_colon
                         71 -> z T_openParen
                         72 -> z T_closeParen
                         73 -> z T_openBrace
                         74 -> z T_closeBrace
                         75 -> z T_openBrack
                         76 -> z T_closeBrack
                         77 -> z T_openAssertBrack
                         78 -> z T_closeAssertBrack
                         79 -> z T_closeSpecialBrack
                         80 -> z T_openOxBrack
                         81 -> z T_closeOxBrack
                         82 -> z T_openBrackBrack
                         83 -> z T_closeBrackBrack
                         84 -> z T_openPBrace
                         85 -> z T_closePBrace
                         86 -> z T_underscore
                         87 -> z T_is
                         88 -> z T_Refine
                         89 -> z T_trace
                         90 -> z T_failure
                         91 -> z T_failureDivergence
                         92 -> z T_refusalTesting
                         93 -> z T_refusalTestingDiv
                         94 -> z T_revivalTesting
                         95 -> z T_revivalTestingDiv
                         96 -> z T_tauPriorityOp
                         97 -> z T_model_check
                         98 -> z T_tau
                         99 -> z T_priority
                         100 -> z T_over
                         101 -> z T_deadlock
                         102 -> z T_deterministic
                         103 -> z T_livelock
                         104 -> z T_free
                         105 -> z T_F
                         106 -> z T_T
                         107 -> z T_FD
                         108 -> z T_LTL
                         109 -> z T_CTL
                         _ -> error "gunfold(PrimToken)"
    gfoldl f z x = case x of
                         (L_Newline) -> z L_Newline
                         (T_WhiteSpace) -> z T_WhiteSpace
                         (L_LComment) -> z L_LComment
                         (L_BComment) -> z L_BComment
                         (L_Pragma) -> z L_Pragma
                         (L_Include) -> z L_Include
                         (L_EOF) -> z L_EOF
                         (L_Integer) -> z L_Integer
                         (L_String) -> z L_String
                         (L_Ident) -> z L_Ident
                         (T_channel) -> z T_channel
                         (T_datatype) -> z T_datatype
                         (T_nametype) -> z T_nametype
                         (T_subtype) -> z T_subtype
                         (T_assert) -> z T_assert
                         (T_pragma) -> z T_pragma
                         (T_transparent) -> z T_transparent
                         (T_external) -> z T_external
                         (T_print) -> z T_print
                         (T_if) -> z T_if
                         (T_then) -> z T_then
                         (T_else) -> z T_else
                         (T_let) -> z T_let
                         (T_within) -> z T_within
                         (T_true) -> z T_true
                         (T_false) -> z T_false
                         (T_not) -> z T_not
                         (T_and) -> z T_and
                         (T_or) -> z T_or
                         (T_STOP) -> z T_STOP
                         (T_SKIP) -> z T_SKIP
                         (T_Events) -> z T_Events
                         (T_Int) -> z T_Int
                         (T_Bool) -> z T_Bool
                         (T_CHAOS) -> z T_CHAOS
                         (T_hat) -> z T_hat
                         (T_hash) -> z T_hash
                         (T_times) -> z T_times
                         (T_slash) -> z T_slash
                         (T_percent) -> z T_percent
                         (T_plus) -> z T_plus
                         (T_minus) -> z T_minus
                         (T_eq) -> z T_eq
                         (T_neq) -> z T_neq
                         (T_ge) -> z T_ge
                         (T_le) -> z T_le
                         (T_lt) -> z T_lt
                         (T_gt) -> z T_gt
                         (T_amp) -> z T_amp
                         (T_semicolon) -> z T_semicolon
                         (T_comma) -> z T_comma
                         (T_triangle) -> z T_triangle
                         (T_box) -> z T_box
                         (T_rhd) -> z T_rhd
                         (T_exp) -> z T_exp
                         (T_sqcap) -> z T_sqcap
                         (T_interleave) -> z T_interleave
                         (T_backslash) -> z T_backslash
                         (T_parallel) -> z T_parallel
                         (T_mid) -> z T_mid
                         (T_at) -> z T_at
                         (T_atat) -> z T_atat
                         (T_rightarrow) -> z T_rightarrow
                         (T_leftarrow) -> z T_leftarrow
                         (T_leftrightarrow) -> z T_leftrightarrow
                         (T_dot) -> z T_dot
                         (T_dotdot) -> z T_dotdot
                         (T_exclamation) -> z T_exclamation
                         (T_questionmark) -> z T_questionmark
                         (T_colon) -> z T_colon
                         (T_openParen) -> z T_openParen
                         (T_closeParen) -> z T_closeParen
                         (T_openBrace) -> z T_openBrace
                         (T_closeBrace) -> z T_closeBrace
                         (T_openBrack) -> z T_openBrack
                         (T_closeBrack) -> z T_closeBrack
                         (T_openAssertBrack) -> z T_openAssertBrack
                         (T_closeAssertBrack) -> z T_closeAssertBrack
                         (T_closeSpecialBrack) -> z T_closeSpecialBrack
                         (T_openOxBrack) -> z T_openOxBrack
                         (T_closeOxBrack) -> z T_closeOxBrack
                         (T_openBrackBrack) -> z T_openBrackBrack
                         (T_closeBrackBrack) -> z T_closeBrackBrack
                         (T_openPBrace) -> z T_openPBrace
                         (T_closePBrace) -> z T_closePBrace
                         (T_underscore) -> z T_underscore
                         (T_is) -> z T_is
                         (T_Refine) -> z T_Refine
                         (T_trace) -> z T_trace
                         (T_failure) -> z T_failure
                         (T_failureDivergence) -> z T_failureDivergence
                         (T_refusalTesting) -> z T_refusalTesting
                         (T_refusalTestingDiv) -> z T_refusalTestingDiv
                         (T_revivalTesting) -> z T_revivalTesting
                         (T_revivalTestingDiv) -> z T_revivalTestingDiv
                         (T_tauPriorityOp) -> z T_tauPriorityOp
                         (T_model_check) -> z T_model_check
                         (T_tau) -> z T_tau
                         (T_priority) -> z T_priority
                         (T_over) -> z T_over
                         (T_deadlock) -> z T_deadlock
                         (T_deterministic) -> z T_deterministic
                         (T_livelock) -> z T_livelock
                         (T_free) -> z T_free
                         (T_F) -> z T_F
                         (T_T) -> z T_T
                         (T_FD) -> z T_FD
                         (T_LTL) -> z T_LTL
                         (T_CTL) -> z T_CTL


