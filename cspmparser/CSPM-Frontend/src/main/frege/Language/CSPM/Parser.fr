{--
    This modules defines a Parser for CSP-M
    
    [Module]     Parser
    [Copyright]  (c) Fontaine 2008 - 2011
    [License]    BSD3
    
    [Maintainer] fontaine@cs.uni-duesseldorf.de, me@dobrikov.biz
    [Stability]  experimental
-}

module Language.CSPM.Parser

where

import frege.Prelude hiding (try, pzero, <|>)

import Language.CSPM.AST
import Language.CSPM.Token (Token,AlexPosn)
import Language.CSPM.TokenClasses as TokenClasses
import Language.CSPM.Token as Token()
import Language.CSPM.Parser__ParseError public
import Language.CSPM.Parser__ParseErrorException
import Language.CSPM.CspmException

import Language.CSPM.SrcLoc

import Language.CSPM.LexHelper (removeIgnoredToken)
import Text.ParserCombinators.Parsec.ExprM

import Text.ParserCombinators.Parsec.Parsec
  hiding (parse,eof,notFollowedBy,anyToken,label,ParseError,errorPos,token,newline)
import Text.ParserCombinators.Parsec.Pos
import Text.ParserCombinators.Parsec.Error as ParsecError hiding (ParseError, Show_ParseError)
import Data.List

type PT a = GenParser Token PState a

--- The 'parse' function parses a List of 'Token'.
--- It returns a 'ParseError' or a 'Labled' 'Module'.
--- The 'SourceName' argument is currently not used.
parse :: 
      SourceName
   -> [Token]
   -> Either ParseError ModuleFromParser
parse filename tokenList
  = wrapParseError tokenList $
      runParser
        (parseModule tokenList)
        initialPState
        filename
        (removeIgnoredToken tokenList)

--- Wrapper for testing sub parsers
testParser :: PT a -> [Token] -> Either ParsecError.ParseError a
testParser p tokenList
  = runParser p initialPState ""
       $ removeIgnoredToken tokenList

data ParseErrorException = pure native frege.language.CSPM.Parser__ParseErrorException.ParseErrorException where
    pure native new new           :: ParseError -> ParseErrorException
    pure native get getParseError :: ParseErrorException -> ParseError
derive Exceptional ParseErrorException

instance CspmException ParseError where
    throwCspm :: ParseError -> IO a
    throwCspm = throwIO . ParseErrorException.new

data PState
 = PState {
  lastTok        :: Token
 ,gtCounter      :: Int
 ,gtLimit        :: Maybe Int
 ,nodeIdSupply   :: NodeId
 }
derive Show PState

private initialPState :: PState
private initialPState = PState {
   lastTok = Token.tokenSentinel 
  ,gtCounter = 0
  ,gtLimit = Nothing
  ,nodeIdSupply = mkNodeId 0
  }

private mkLabeledNode :: SrcLoc -> t -> PT (Labeled t)
private mkLabeledNode loc node = do
  i <- getStates PState.nodeIdSupply
  updateState $ \s -> s.{ nodeIdSupply = succ' $ s.nodeIdSupply}
  return $ Labeled {
    nodeId = i
   ,srcLoc = loc
   ,unLabel = node }

private getStates :: (PState -> x) -> PT x
private getStates sel = do
  st <- getState
  return $ sel st

private getNextPos :: PT Token
private getNextPos = do
  tokenList <-getInput
  case tokenList of
    (hd:_) -> return hd
    [] -> return Token.tokenSentinel

private getLastPos :: PT Token
private getLastPos = getStates PState.lastTok

private getPos :: PT SrcLoc
private getPos = do
  t<-getNextPos 
  return $ mkSrcPos t

private mkSrcSpan :: Token -> Token -> SrcLoc
private mkSrcSpan b e = SrcLoc.mkTokSpan b e

{-# DEPRECATED mkSrcPos "simplify alternatives for sourcelocations" #-}
private mkSrcPos :: Token -> SrcLoc
private mkSrcPos l = SrcLoc.mkTokPos l

private withLoc :: PT a -> PT (Labeled a)
private withLoc a = do
  s <- getNextPos
  av <- a
  e <- getLastPos
  mkLabeledNode (mkSrcSpan s e) av

private inSpan :: (a -> b) -> PT a -> PT (Labeled b) 
private inSpan constr exp = do
  s <- getNextPos
  l <- exp
  e <- getLastPos
  mkLabeledNode (mkSrcSpan s e) $ constr l

private parseModule :: [Token] -> PT ModuleFromParser
private parseModule tokenList = do
  s <- getNextPos
  skipMany newline
  moduleDecls <- topDeclList
  eof <?> "end of module"
  e <- getLastPos
  let
    moduleTokens = Just tokenList
    moduleSrcLoc = mkSrcSpan s e
    modulePragmas = mapMaybe getPragma tokenList
    moduleComments = mapMaybe getComment tokenList
  return $ Module { moduleTokens = moduleTokens,
                    moduleSrcLoc = moduleSrcLoc,
                    modulePragmas = modulePragmas,
                    moduleComments = moduleComments,
                    moduleDecls = moduleDecls }
 where
    getComment :: Token -> Maybe LocComment
    getComment t = case t.tokenClass of
      L_LComment -> Just (LineComment str, loc)
      L_BComment -> Just (BlockComment str, loc)
      L_Pragma -> Just (PragmaComment str, loc)
      _ -> Nothing
     where
        loc = mkSrcPos t
        str = t.tokenString
    getPragma :: Token -> Maybe String
    getPragma t = case t.tokenClass of
      L_Pragma -> Just $ take (t.tokenLen - 6) $ drop 3 $ t.tokenString
      _ -> Nothing

private token :: TokenClasses.PrimToken -> PT ()
private token t = tokenPrimExDefault tokenTest
  where
    tokenTest tok = if tok.tokenClass == t
      then Just ()
      else Nothing

{-
private builtInFunctions :: Set TokenClasses.PrimToken
private builtInFunctions = Set.fromList
      [ T_union ,T_inter, T_diff, T_Union, T_Inter,
        T_member, T_card, T_empty, T_set, T_Set,
        T_Seq, T_null, T_head, T_tail, T_concat,
        T_elem, T_length, T_CHAOS ]
-}

private newline :: PT ()
private newline = token L_Newline

private refineOp :: PT LRefineOp
private refineOp = withLoc $ do 
  tok <- tokenPrimExDefault (\t -> Just $ t.tokenClass)
  case tok of
    T_trace  -> return Trace
    T_failure  -> return Failure
    T_failureDivergence   -> return FailureDivergence
    T_refusalTesting -> return RefusalTesting
    T_refusalTestingDiv -> return RefusalTestingDiv
    T_revivalTesting -> return RevivalTesting
    T_revivalTestingDiv -> return RevivalTestingDiv
    T_tauPriorityOp -> return TauPriorityOp
    _              -> fail "Unexpected Token"
  
private anyBuiltIn :: PT Const
private anyBuiltIn = do
  tok <- tokenPrimExDefault (\t -> Just $ t.tokenClass)
  case tok of
    -- T_union  -> return F_union
    -- T_inter  -> return F_inter
    -- T_diff   -> return F_diff
    -- T_Union  -> return F_Union
    -- T_Inter  -> return F_Inter
    -- T_member -> return F_member
    -- T_card   -> return F_card
    -- T_empty  -> return F_empty
    -- T_set    -> return F_set
    -- T_seq    -> return F_seq
    -- T_Set    -> return F_Set
    -- T_Seq    -> return F_Seq
    -- T_null   -> return F_null
    -- T_head   -> return F_head
    -- T_tail   -> return F_tail
    -- T_concat -> return F_concat
    -- T_elem   -> return F_elem
    -- T_length -> return F_length
    T_CHAOS  -> return F_CHAOS
    _        -> fail "not a built-in function"

private blockBuiltIn :: PT a
private blockBuiltIn = do
  bi <- try anyBuiltIn
  fail $ "can not use built-in '"++ show bi ++ "' here" -- todo fix: better error -message

private lIdent :: PT String
private lIdent =
  tokenPrimExDefault testToken
  <?> "identifier"
  where
    testToken t = case t.tokenClass of
      L_Ident -> Just $ t.tokenString
      _ -> Nothing

private ident :: PT LIdent
private ident = withLoc (lIdent >>= return . Ident)

private varExp :: PT LExp
private varExp= withLoc (ident >>= return . Var)

private commaSeperator :: PT ()
private commaSeperator = token T_comma

private sepByComma :: PT x -> PT [x]
private sepByComma a = sepBy a commaSeperator

private sepBy1Comma :: PT x -> PT [x]
private sepBy1Comma a = sepBy1 a commaSeperator

private sepByNewLine :: PT x -> PT [x]
private sepByNewLine d = sepBy d newline

private parseComprehension :: PT [LCompGen]
private parseComprehension = token T_mid >> sepByComma (compGenerator <|> compGuard )

private compGuard :: PT LCompGen
private compGuard= withLoc (parseExp_noPrefix >>= return . Guard)

private compGenerator :: PT LCompGen
private compGenerator = try $ withLoc $ do
  pat <- parsePattern
  token T_leftarrow
  exp <- parseExp_noPrefix
  return $ Generator pat exp

--- replicated operations use comprehensions with a different Syntax
private comprehensionRep :: PT LCompGenList
private comprehensionRep = withLoc $ do
  l <- sepByComma (repGenerator <|> compGuard)
  token T_at
  return l
 where
    repGenerator :: PT LCompGen
    repGenerator = try $ withLoc $ do
      pat <- parsePattern
      (token T_colon) <|> (token T_leftarrow)
      exp <- parseExp_noPrefix
      return $ Generator pat exp

private inBraces :: PT x -> PT x
private inBraces = between (token T_openBrace) (token T_closeBrace)

private inParens :: PT x -> PT x
private inParens = between (token T_openParen) (token T_closeParen)

private setExp :: PT LExp
private setExp = withLoc $ inBraces $ do
  (range,comp) <- lsBody
  return $ SetExp range comp

private listExp :: PT LExp
private listExp = withLoc $ betweenLtGt $ do
  (range,comp) <- lsBody
  return $ ListExp range comp

private lsBody :: PT (LRange, Maybe [LCompGen])
private lsBody = liftM2 (,) parseRangeExp (optionMaybe parseComprehension)
  where
    parseRangeExp :: PT LRange
    parseRangeExp = withLoc (rangeClosed <|> rangeOpen <|> rangeEnum)

    rangeEnum = liftM RangeEnum $ sepByComma parseExp_noPrefix

    rangeClosed :: PT Range
    rangeClosed = try $ do
      s <-parseExp_noPrefix
      token T_dotdot
      e <- parseExp_noPrefix
      return $ RangeClosed s e

    rangeOpen :: PT Range
    rangeOpen = try $ do
      s <- parseExp_noPrefix
      token T_dotdot
      return $ RangeOpen s

private closureExp :: PT LExp
private closureExp = withLoc $ do
  token T_openPBrace
  expList <- sepByComma parseExp
  gens <- optionMaybe $ parseComprehension
  token T_closePBrace
  case gens of
    Nothing -> return $ Closure expList
    Just l -> return  $ ClosureComprehension (expList,l)

private intLit :: PT Integer
private intLit =
   -- " - {-comment-} 10 " is parsed as Integer(-10) "
      (token T_minus >> linteger >>= return . negate)
  <|> linteger
  where 
    linteger :: PT Integer
    linteger = tokenPrimExDefault testToken
    testToken t = if t.tokenClass == L_Integer
      then Just $ String.aton $ t.tokenString
      else Nothing 

private negateExp :: PT LExp
private negateExp = withLoc $ do
  token T_minus
  body <- parseExp
  return $ NegExp body

private litExp :: PT LExp
private litExp = inSpan IntExp intLit

private litPat :: PT LPattern
private litPat = inSpan IntPat intLit

private letExp :: PT LExp
private letExp = withLoc $ do
  token T_let
  declList <- sepByNewLine (funBind <|> patBind)
  token T_within
  expo <- parseExp
  return $ Let declList expo

private ifteExp :: PT LExp
private ifteExp = withLoc $ do
  token T_if
  cond <- parseExp
  token T_then
  thenExp <- parseExp
  token T_else
  elseExp <- parseExp
  return $ Ifte cond thenExp elseExp


private funCall :: PT LExp
private funCall = try (funCallFkt <|> funCallBi)
  where
    funCallFkt :: PT LExp
    funCallFkt = withLoc $ do
      fkt <- varExp 
      args <- parseFunArgs
      return $ CallFunction fkt args

    funCallBi :: PT LExp
    funCallBi = withLoc $ do
      fkt <- inSpan BuiltIn anyBuiltIn
      args <- parseFunArgs
      return $ CallBuiltIn fkt args

private parseFunArgs :: PT [[LExp]]
private parseFunArgs =  do
  argsL <- many1 funArgsT
  return argsL

{-
fun application in tuple form f(1,2,3)
if the tuple is follwed by "=", it  belongs to the next declaration
g = h
(a,b) = (1,2)
-}

private funArgsT :: PT [LExp]
private funArgsT = try $ do
   tArgs <- inParens $ sepByComma parseExp
   notFollowedBy' token_is
   return tArgs

private lambdaExp :: PT LExp
private lambdaExp = withLoc $ do
  token T_backslash
  patList <- sepBy1 parsePattern $ token T_comma
  token T_at
  expo <- parseExp
  return $ Lambda patList expo

private parseExpBase :: PT LExp
private parseExpBase =
         parenExpOrTupleEnum 
     <|> funCall
     <|> withLoc ( token T_STOP >> return Stop)
     <|> withLoc ( token T_SKIP >> return Skip)
     <|> withLoc ( token T_true >> return CTrue)
     <|> withLoc ( token T_false >> return CFalse)
     <|> withLoc ( token T_Events >> return Events)
     <|> withLoc ( token T_Bool >> return BoolSet)
     <|> withLoc ( token T_Int >> return IntSet)
     <|> ifteExp
     <|> letExp
     <|> try litExp       -- -10 is Integer(-10) 
     <|> negateExp        -- -(10) is NegExp(Integer(10))
     <|> varExp
     <|> lambdaExp
     <|> closureExp
     <|> listExp
     <|> setExp
     <|> blockBuiltIn
     <?> "core-expression" 


{--
maybe need a Ast-node for parenExp for prettyPrint-Printing
parenExps are now a special case of TupleExps
-}

private parenExpOrTupleEnum :: PT LExp
private parenExpOrTupleEnum = withLoc $ do
  body <- inParens $ sepByComma parseExp
  case body of
    [] -> return $ TupleExp []
    [x] -> return $ Parens x
    _ -> return  $ TupleExp body


{--
Warning :
the expression parser does not accept nested Postfix and Prefix expressions
 "not not true" does not parse !!
-}
private type OpTable = [[ExprM.Operator Token PState LExp]]
private opTable :: OpTable
private opTable = baseTable ++ procTable

private baseTable :: OpTable
private procTable :: OpTable
private (baseTable, procTable) = (
   [
    [ postfixM funApplyImplicit ]
   ,[ postfixM procRenaming ]
   ,[ infixM (nfun2 T_hat     F_Concat ) AssocLeft,
     prefixM (nfun1 T_hash    F_Len2 ) -- different from Roscoe Book
    ]
   ,[ infixM (nfun2 T_times   F_Mult ) AssocLeft
     ,infixM (nfun2 T_slash   F_Div ) AssocLeft
     ,infixM (nfun2 T_percent F_Mod  ) AssocLeft
    ]
   ,[ infixM (nfun2 T_plus    F_Add ) AssocLeft,
      infixM (nfun2 T_minus   F_Sub ) AssocLeft
    ]
   ,[ infixM (nfun2 T_eq      F_Eq ) AssocLeft
     ,infixM (nfun2 T_neq     F_NEq) AssocLeft
     ,infixM (nfun2 T_ge      F_GE ) AssocLeft
     ,infixM (nfun2 T_le      F_LE ) AssocLeft
     ,infixM (nfun2 T_lt      F_LT ) AssocLeft
     ,infixM (do
        s <- getNextPos
        gtSym
        e <- getLastPos
        op <- mkLabeledNode (mkSrcSpan s e) (BuiltIn F_GT)
        return $ \a b -> mkLabeledNode
            (mkSrcSpan (SrcLoc.getStartToken $ a.srcLoc) (SrcLoc.getEndToken $ b.srcLoc))
--            SrcLoc.NoLocation
            (Fun2 op a b)
      ) AssocLeft
    ]
   ,[ prefixM ( token T_not >> unOp NotExp )]
   ,[ infixM ( token T_and >> binOp AndExp) AssocLeft ]
   ,[ infixM ( token T_or >> binOp OrExp) AssocLeft ]
   ],
   [[ infixM proc_op_aparallel AssocLeft ]
   ,[ infixM proc_op_lparallel AssocLeft ]

   ,[infixM procOpSharing AssocLeft ]
   ,[infixM (nfun2 T_backslash  F_Hiding     ) AssocLeft]
   ,[infixM (nfun2 T_amp        F_Guard      ) AssocLeft]
   ,[infixM (nfun2 T_semicolon  F_Sequential ) AssocLeft]
   ,[infixM (nfun2 T_triangle   F_Interrupt  ) AssocLeft]
   ,[infixM (nfun2 T_box        F_ExtChoice  ) AssocLeft]
   ,[infixM (nfun2 T_rhd        F_Timeout    ) AssocLeft]
   ,[infixM (nfun2 T_sqcap      F_IntChoice  ) AssocLeft]
   ,[infixM procOpException AssocLeft]
   ,[infixM (nfun2 T_interleave F_Interleave ) AssocLeft]
  ]
  )
  where
  nfun1 :: TokenClasses.PrimToken -> Const -> PT (LExp -> PT LExp)
  nfun1 tok cst = do
    fkt <- biOp tok cst
    pos <- getPos
    return $ \a -> mkLabeledNode pos $ Fun1 fkt a

  nfun2 :: TokenClasses.PrimToken -> Const -> PT (LExp -> LExp -> PT LExp)
  nfun2 tok cst = do
    fkt <- biOp tok cst
    return $ \a b -> mkLabeledNode
--     (mkSrcSpan (SrcLoc.getStartToken $ srcLoc a) (SrcLoc.getEndToken $ srcLoc b))
     SrcLoc.NoLocation
     (Fun2 fkt a b)

  binOp :: (LExp -> LExp -> Exp) -> PT (LExp -> LExp -> PT LExp)
  binOp op = return $ \a b -> mkLabeledNode (posFromTo a b) $ op a b

  unOp :: (LExp -> Exp) -> PT (LExp -> PT LExp )
  unOp op = do
    pos<-getLastPos
    return $ \a -> mkLabeledNode (mkSrcPos pos) $ op a

  biOp :: TokenClasses.PrimToken -> Const -> PT LBuiltIn
  biOp tok cst = inSpan BuiltIn (token tok >> return cst)

  posFromTo :: LExp -> LExp -> SrcLoc.SrcLoc
  posFromTo a b = SrcLoc.srcLocFromTo (a.srcLoc) (b.srcLoc)

  procOpSharing :: PT (LProc -> LProc -> PT LProc)
  procOpSharing = try $ do
    spos <- getNextPos
    al <- between ( token T_openOxBrack) (token T_closeOxBrack) parseExp
    epos <- getLastPos
    return $ (\a b  -> mkLabeledNode (mkSrcSpan spos epos) $ ProcSharing al a b)

  procOpException :: PT (LProc -> LProc -> PT LProc)
  procOpException = do
    spos <- getNextPos
    al <- between ( token T_openOxBrack) (token T_exp) parseExp
    epos <- getLastPos
    return $ (\a b  -> mkLabeledNode (mkSrcSpan spos epos) $ ProcException al a b)

{-
We count the occurences of gt-symbols
and accept it only if it is followed by an expression.
If a gtLimit is set, we only accept a maximum number of gt symbols
-}
  gtSym :: PT ()
  gtSym = try $ do
    token T_gt
    updateState (\env -> env.{gtCounter = env.gtCounter +1 })
    next <- testFollows parseExp
    case next of
      Nothing -> fail "Gt token not followed by an expression"
      Just _  -> do
        mode <- getStates PState.gtLimit
        case mode of
          Nothing -> return ()
          Just x  -> do
            cnt <- getStates PState.gtCounter
            if cnt < x then return ()
                       else fail "(Gt token belongs to sequence expression)"

--- Parser for CSP-M expressions
parseExp :: PT LExp
parseExp
  = do (parseDotExpOf $ buildExpressionParser procTable parseProcReplicatedExp)
  <?> "expression"


--- todo : check if we need parseExp_noPrefix or if we can use parseExp_noProc
parseExp_noPrefix :: PT LExp
parseExp_noPrefix = parseDotExpOf parseExp_noPrefix_NoDot
   where
     parseExp_noPrefix_NoDot :: PT LExp
     parseExp_noPrefix_NoDot = buildExpressionParser opTable parseExpBase

--- todo :: parseExpBase does include STOP and SKIP 
private parseExp_noProc :: PT LExp
private parseExp_noProc
  = parseDotExpOf $ buildExpressionParser baseTable parseExpBase

private parseDotExpOf :: PT LExp -> PT LExp
private parseDotExpOf baseExp = do
  sPos <-getNextPos
  dotExp <- sepBy1 baseExp $ token T_dot
  ePos <-getLastPos
  case dotExp of 
     [x] -> return x
     l -> mkLabeledNode (mkSrcSpan sPos ePos) $ DotTuple l

{--
place (term) as a suffix behind any term to
make a function application
used a lot in CspBook -examples
notice : we do not destict between f(a,b,c) and f(a)(b)(c) or f(a,b)(c)
this is buggy for f(a)(b)(c)
this may interact with normal function -application !
-}
private funApplyImplicit :: PT (LExp -> PT LExp)
private funApplyImplicit = do
  args <- parseFunArgs
  pos <-getPos
  return $ (\fkt -> mkLabeledNode pos $ CallFunction fkt args )

{--
parse an sequenceexpression <...>
we have to be carefull not to parse the end of sequence ">"
as comparision
-}

private token_gt :: PT ()
private token_gt = token T_gt

private token_lt :: PT ()
private token_lt = token T_lt

private betweenLtGt :: PT a -> PT a
private betweenLtGt parser = do
  token_lt
  st <- getParserState  -- maybe we need to backtrack
  body <- parser           -- even if this is successfull
  cnt <- getStates PState.gtCounter
  endSym <-testFollows token_gt
  case endSym of
    Just () -> do
      token_gt
      return body   -- gtSym could make distinction between endOfSequence and GtSym
    Nothing -> do  -- last comparision expression was indeed end of sequence
      _ <- setParserState st --backtrack
      s <- parseWithGtLimit (cnt) parser
      token_gt
      return s
{--
parse an expression which contains as most count Greater-symbols (">"
the last ">" is left as end of sequence
attention: this can be nested !!
-}

private parseWithGtLimit :: Int -> PT a -> PT a
private parseWithGtLimit maxGt parser = do
  oldLimit <- getStates PState.gtLimit
  setGtLimit $ Just maxGt
  res <- optionMaybe parser
  setGtLimit oldLimit
  case res of
    Just p -> return p
    Nothing -> fail "contents of sequence expression"
 where
    setGtLimit g = updateState $ \env -> env.{gtLimit = g}

private proc_op_aparallel :: PT (LExp -> LExp -> PT LExp)
private proc_op_aparallel = try $ do
  s <- getNextPos
  token T_openBrack
  a1 <- parseExp_noPrefix
  token T_parallel
  a2 <- parseExp_noPrefix
  token T_closeBrack
  e <- getLastPos
  return $ (\p1 p2 -> mkLabeledNode (mkSrcSpan s e ) $ ProcAParallel a1 a2 p1 p2 )

private proc_op_lparallel :: PT (LExp -> LExp -> PT LExp)
private proc_op_lparallel = try $ do
  ren <- parseLinkList
  p <- getPos
  return $ (\p1 p2 -> mkLabeledNode p $ ProcLinkParallel ren p1 p2)

private procRenaming :: PT (LExp -> PT LExp)
private procRenaming = do
  rens <- many1 procOneRenaming
  return $ (\x -> foldl' (>>=) (return x) rens)

private procOneRenaming :: PT (LExp -> PT LExp )
private procOneRenaming = try $ do
  s <- getNextPos
  token T_openBrackBrack
  ren<-(sepBy parseRename commaSeperator)
  gens <- optionMaybe $ withLoc parseComprehension
  token T_closeBrackBrack
  e<-getLastPos
  return $ (\p1 -> mkLabeledNode (mkSrcSpan s e ) $ ProcRenaming ren gens p1 )

private parseLinkList :: PT LLinkList
private parseLinkList = withLoc $ do
  token T_openBrack
  linkList<-(sepBy parseLink commaSeperator)
  gens <- optionMaybe parseComprehension
  token T_closeBrack
  case gens of
    Nothing -> return $ LinkList linkList
    Just g -> return $ LinkListComprehension g linkList

private parseLink :: PT LLink
private parseLink= withLoc $ do
  e1<-parseExp_noPrefix
  token T_leftrightarrow
  e2<-parseExp_noPrefix
  return $ Link e1 e2

private parseRename :: PT LRename
private parseRename= withLoc $ do
  e1<-parseExp_noPrefix
  token T_leftarrow
  e2<-parseExp_noPrefix
  return $ Rename e1 e2

--- Parser for CSP-M patterns
parsePattern :: PT LPattern
parsePattern = (<?> "pattern")  $ do
  sPos <- getNextPos
  concList <- sepBy1 parsePatternDot $ token T_atat
  ePos <- getLastPos
  case concList of 
    [x] -> return x
    l -> mkLabeledNode  (mkSrcSpan sPos ePos) $ Also l

private parsePatternAppend :: PT LPattern
private parsePatternAppend = do
  sPos <- getNextPos
  concList <- sepBy1 parsePatternCore $ token T_hat
  ePos <- getLastPos
  case concList of 
    [x] -> return x
    l -> mkLabeledNode (mkSrcSpan sPos ePos) $ Append l

private parsePatternDot :: PT LPattern
private parsePatternDot = do
  s <- getNextPos
  dList <- sepBy1 parsePatternAppend $ token T_dot
  e <- getLastPos
  case dList of
      [p] -> return p
      l -> mkLabeledNode (mkSrcSpan s e) $ DotPat l

private parsePatternCore :: PT LPattern
private parsePatternCore =
      nestedPattern
  <|> withLoc ( token T_true >> return TruePat)
  <|> withLoc ( token T_false >> return FalsePat)
  <|> litPat
  <|> varPat
  <|> tuplePatEnum
  <|> listPatEnum
  <|> singleSetPat
  <|> emptySetPat
  <|> withLoc ( token T_underscore >> return WildCard)
  <|> blockBuiltIn
  <?> "pattern"
  where
    nestedPattern = try $ inParens parsePattern
    varPat = inSpan VarPat ident
    singleSetPat = try $ inSpan SingleSetPat $ inBraces parsePattern
    emptySetPat = withLoc ( token T_openBrace >> token T_closeBrace >> return EmptySetPat )
    listPatEnum =  inSpan ListEnumPat $ between token_lt token_gt (sepByComma parsePattern)
    tuplePatEnum = inSpan TuplePat $ inParens (sepByComma parsePattern)


--- FixMe: do not use patBind to parse variable bindings ?

private patBind :: PT LDecl
private patBind = withLoc $ do
  pat <- parsePattern
  token_is
  expo <- parseExp
  return $ PatBind pat expo

--- parse a single function-case
private funBind :: PT LDecl
private funBind = try $ do
  fname <- ident
  patl <- parseFktCurryPat
  token_is <?> "rhs of function clause"
  expo <-parseExp
  mkLabeledNode fname.srcLoc $ FunBind fname [FunCase patl expo]

{--
in CSP f(x)(y), f(x,y) , f((x,y)) are all different
we parse a function pattern as a list of curryargs (a)(b)( )( )..
each of with can be a comma-seperated list of args that do not allow
currying in-between
i,e (a,b,c)(d,e,f) -> [[a,b,c][d,e,f]]
-}

private parseFktCurryPat :: PT [[LPattern]]
private parseFktCurryPat = many1 parseFktCspPat

private parseFktCspPat :: PT [LPattern]
private parseFktCspPat = inParens $ sepByComma parsePattern

topDeclList :: PT [LDecl]
topDeclList = sepByNewLine topDecl 
 where
  topDecl :: PT LDecl
  topDecl = choice
      [
        funBind
      , patBind
      , parseAssertDecl
      , parseTransparent
      , parseDatatype
      , parseSubtype
      , parseNametype
      , parseChannel
      , parsePrint
      ] <?> "top-level declaration"

  assertPolarity = fmap (odd . length) $ many $ token T_not

  assertListRef = withLoc $ do
    token T_assert
    negated <- assertPolarity
    p1 <- parseExp
    op <- refineOp
    p2 <- parseExp
    return $ AssertRefine negated p1 op p2

  assertBool = withLoc $ do
    token T_assert
    b <- parseExp
    return $ AssertBool b

  assertTauPrio = withLoc $ do
    token T_assert
    negated <- assertPolarity
    p1 <- parseExp
    op <- tauRefineOp
    p2 <- parseExp
    token T_openAssertBrack
    token T_tau
    token T_priority
    optional $ token T_over
    token T_closeAssertBrack
    set <- parseExp
    return $ AssertTauPrio negated p1 op p2 set
   where
      tauRefineOp :: PT LTauRefineOp
      tauRefineOp = withLoc $ do 
        tok <- tokenPrimExDefault (\t -> Just $ t.tokenClass)
        case tok of
         T_trace  -> return TauTrace
         T_Refine -> return TauRefine
         _        -> fail "Unexpected Token"

  assertIntFDRChecks = withLoc $ do
    token T_assert
    negated <- assertPolarity
    p       <- parseExp
    token T_openAssertBrack
    model   <- fdrModel
    extmode <- many $ extsMode
    ext     <-  case extmode of
               []   -> return Nothing
               [x]  -> return $ Just x
               _    -> fail "More than one model extension."
    token T_closeSpecialBrack
    return $ AssertModelCheck negated p model ext
   where
       fdrModel :: PT LFDRModels
       fdrModel = withLoc $ do
        tok <- tokenPrimExDefault (\t -> Just $ t.tokenClass)
        case tok of 
         T_deadlock  -> token T_free >> return DeadlockFree
         T_deterministic -> return Deterministic
         T_livelock  -> token T_free >> return LivelockFree
         _ -> fail "Modus is not supported by this parser."
  
       extsMode :: PT LFdrExt
       extsMode =  withLoc $ tokenPrimExDefault test
         where 
          test tok = case tok.tokenClass of
                  T_F   -> Just F
                  T_FD  -> Just FD
                  T_T   -> Just T
                  _     -> Nothing

  assertLTLCTL = withLoc $ do
    token T_assert
    negated <- assertPolarity
    p <- parseExp
    token T_model_check
    t <- parseFormulaType
    -- get LTL/CTL formula as a string
    s <- lstring
    return $ AssertLTLCTL negated p t s
   where
        parseFormulaType :: PT LFormulaType
        parseFormulaType = withLoc $ do
          tok <- tokenPrimExDefault (\t -> Just $ t.tokenClass)
          case tok of
            T_LTL -> return LTL
            T_CTL -> return CTL
            _     -> fail "Unexpected Token"

        lstring :: PT String
        lstring = tokenPrimExDefault testToken

        testToken t = if t.tokenClass == L_String
                      then Just $ readString $ t.tokenString
                      else Nothing
        
        -- Frege does not have read
        readString :: String -> String
        readString s = case s =~~ ´"(.*)"´ of
            [_ ,Just v] -> v
            _           -> error $ s ++ ": no parse as String"

  parseAssert :: PT LAssertDecl
  parseAssert =  try assertTauPrio
             <|> try assertIntFDRChecks
             <|> try assertListRef
             <|> try assertLTLCTL
             <|> assertBool
             <?> "assert Declaration"

  parseAssertDecl :: PT LDecl
  parseAssertDecl = withLoc $ do
    e <- parseAssert
    return $ Assert e

  parseTransparent :: PT LDecl
  parseTransparent = withLoc $ do
    token T_transparent
    l <- sepBy1Comma ident
    return $ Transparent l

  parseSubtype :: PT LDecl
  parseSubtype = withLoc $ do
    token T_subtype
    i <- ident
    token_is
    conList<-sepBy1 constrDef $ token T_mid
    return $ SubType i conList

  parseDatatype :: PT LDecl
  parseDatatype = withLoc $ do
    token T_datatype
    i <- ident
    token_is
    conList<-sepBy1 constrDef $ token T_mid -- A | B.S.S | C.(S,S)
    return $ DataType i conList

  constrDef :: PT LConstructor
  constrDef = withLoc $ do
    i <- ident
    ty <- optionMaybe constrType
    return $ Constructor i ty

  constrType = try ( token T_dot >> typeExp) -- rec.A.B...

  parseNametype :: PT LDecl
  parseNametype = withLoc $ do
    token T_nametype
    i <- ident
    token_is
    t <- typeExp
    return $ NameType i t

  parseChannel :: PT LDecl
  parseChannel = withLoc $ do
    token T_channel
    identl<-sepBy1Comma ident
    t<-optionMaybe typeDef
    return $ Channel identl t

  {- Functions for parsing typeDef expressions -}

  typeDef = token T_colon >> typeExp

  typeExp = withLoc $ do
    dotArgs <- sepBy1 dotArgs $ token T_dot
    return $ TypeDot dotArgs 

  dotArgs = typeTuple <|> typeSingleExp

  typeSingleExp = inSpan SingleValue $ parseExpBase

  typeTuple = inSpan TypeTuple $ inParens $ sepBy1Comma parseExpBase
 
{-  typeExp = typeTuple <|> typeDot

  typeDot = inSpan TypeDot $ sepBy1 parseExpBase $ token T_dot
-}

  parsePrint :: PT LDecl
  parsePrint = withLoc $ do
    token T_print
    e <- parseExp
    return $ Print e

{-- Replicated Expressions in Prefix form -}

private parseProcReplicatedExp :: PT LProc
private parseProcReplicatedExp
  = choice
    [ 
      procRep T_semicolon   ProcRepSequence
    , procRep T_sqcap ProcRepInternalChoice
    , procRep T_box   ProcRepExternalChoice
    , procRep T_interleave ProcRepInterleave
    , procRepAParallel
    , procRepLinkParallel
    , procRepSharing
    , parsePrefixExp
    ] <?> "parseProcReplicatedExp"
  where
  -- todo : refactor all these to using inSpan
  procRep :: TokenClasses.PrimToken -> (LCompGenList -> LProc -> Exp) -> PT LProc
  procRep sym fkt = withLoc $ do
    token sym
    l<-comprehensionRep
    body <- parseExp
    return $ fkt l body

  procRepAParallel = withLoc $ do
    token T_parallel
    l<-comprehensionRep
    token T_openBrack
    alph <- parseExp
    token T_closeBrack
    body <- parseExp
    return $ ProcRepAParallel l alph body

  procRepLinkParallel = withLoc $ do
    link <- parseLinkList
    gen <-comprehensionRep
    body <- parseExp
    return $ ProcRepLinkParallel gen link body

  procRepSharing = withLoc $ do
    al <- between (token T_openOxBrack ) (token T_closeOxBrack) parseExp
    gen <- comprehensionRep
    body <- parseExp
    return $ ProcRepSharing gen al body

{--
parsePrefixExp either parses a prefix, or just an regular expression

prefix binds stronger than any operator (except dot-operator)
either another prefix or an expression without prefix
expo <-(parsePrefixExp <|> parseExpBase ) <?> "rhs of prefix operation"

-}
private parsePrefixExp :: PT LExp
private parsePrefixExp = do
  spos <- getNextPos
  start <- parseExp_noProc -- channel or just an expression
  rest <- parsePrefix
  epos <- getLastPos
  case rest of
    Nothing -> return start
    Just (comm,body) -> mkLabeledNode (mkSrcSpan spos epos) $
                           PrefixExp start comm body
 where 
  parsePrefix :: PT (Maybe ([LCommField],LExp))
  parsePrefix = optionMaybe $ do
    commfields <- many parseCommField
    token T_rightarrow
    expo <- parseProcReplicatedExp <?> "rhs of prefix operation"
    return (commfields,expo)


{--
this is not what fdr really does
fdr parse ch?x.y:a as ch?((x.y):a)
-}
private parseCommField :: PT LCommField
private parseCommField = inComm <|> outComm <?> "communication field"
  where
  inComm = withLoc $ do
    token T_questionmark
    pat<-parsePattern
    mguard <- optionMaybe (token T_colon >> parseExp_noProc)
--    mguard <- optionMaybe (token T_colon >> parseExp_noPrefix_NoDot)
    case mguard of
      Nothing -> return $ InComm pat
      Just g  -> return $ InCommGuarded pat g

  outComm = withLoc $ do
    token T_exclamation
    e <- parseExp_noProc
    return $ OutComm e


{-
Helper routines for connecting the Token with the parser
and general Helper routines
The following is not related to CSPM-Syntax
-}


--maybe this is Combinator.lookAhead ?

private testFollows :: PT x -> PT (Maybe x)
private testFollows p = do
  oldState <- getParserState
  res <-optionMaybe p
  _ <- setParserState oldState
  return res

private primExUpdatePos :: SourcePos -> Token -> t -> SourcePos
private primExUpdatePos pos (t@(Token {})) _
  = newPos (sourceName pos) (-1) t.tokenId.unTokenId

private primExUpdateState :: t -> Token -> t1 -> PState -> PState
private primExUpdateState _ tok _ st = st.{ lastTok =tok}

{-
replicating existing combinators, just to work with our lexer
improve this
-}

private anyToken :: PT Token
private anyToken = tokenPrimEx Token.showToken primExUpdatePos (Just primExUpdateState) Just

private notFollowedBy :: GenParser tok st Token -> GenParser tok st ()
private notFollowedBy p 
  = try (do{ c <- p; unexpected $ Token.showToken c }
         <|> return ()
        )

private notFollowedBy' :: GenParser tok st a -> GenParser tok st ()
private notFollowedBy' p
  = try $ ( p >> pzero ) <|> return ()

private eof :: PT ()
private eof = notFollowedBy anyToken <?> "end of input"

private pprintParsecError :: ParsecError.ParseError -> String
private pprintParsecError err
  = ParsecError.showErrorMessages "or" "unknown parse error" 
      "expecting" "unexpected" "end of input"
        (ParsecError.errorMessages err)

private wrapParseError ::
     [Token]
  -> Either ParsecError.ParseError ModuleFromParser
  -> Either ParseError ModuleFromParser
private wrapParseError _ (Right ast) = Right ast
private wrapParseError tl (Left err) = Left $ ParseError {
   parseErrorMsg = pprintParsecError err
  ,parseErrorToken = errorTok
  ,parseErrorPos = errorTok.tokenStart
  }
  where 
    tokId = Token.mkTokenId $ sourceColumn $ ParsecError.errorPos err
    errorTok = maybe Token.tokenSentinel id  $ find (\t -> t.tokenId ==  tokId) tl

private token_is :: PT ()
private token_is = token T_is

private tokenPrimExDefault :: (Token -> Maybe a) -> GenParser Token PState a
private tokenPrimExDefault = tokenPrimEx Token.showToken primExUpdatePos (Just primExUpdateState)
