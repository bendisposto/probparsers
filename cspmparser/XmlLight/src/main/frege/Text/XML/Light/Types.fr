{--
    Basic XML types.
    
    [Module]     Text.XML.Light.Types
    [Copyright]  (c) Galois, Inc. 2007
    [License]    BSD3
    
    [Maintainer] Iavor S. Diatchki <diatchki@galois.com>
    [Stability]  provisional
-}

module Text.XML.Light.Types where

import Data.Typeable
import Data.Data

--- A line is an Integer
type Line     = Integer

--- XML content
{-# derive DataTypeable #-}
data Content  = Elem Element
              | Text CData
              | CRef String
derive Show Content

--- XML elements
{-# derive DataTypeable #-}
data Element  = Element {
                  elName      :: QName,
                  elAttribs   :: [Attr],
                  elContent   :: [Content],
                  elLine      :: Maybe Line
                }
derive Show Element

--- XML attributes
{-# derive DataTypeable #-}
data Attr     = Attr {
                  attrKey :: QName,
                  attrVal :: String
                }
derive Show Attr
derive Ord Attr
derive Eq Attr

--- XML CData
{-# derive DataTypeable #-}
data CData    = CData {
                  cdVerbatim  :: CDataKind,
                  cdData      :: String,
                  cdLine      :: Maybe Line
                }
derive Show CData

{-# derive DataTypeable #-}
data CDataKind
 = CDataText      -- ^ Ordinary character data; pretty printer escapes &, < etc.
 | CDataVerbatim  -- ^ Unescaped character data; pretty printer embeds it in <![CDATA[..
 | CDataRaw       -- ^ As-is character data; pretty printer passes it along without any escaping or CDATA wrap-up.
derive Show CDataKind
derive Eq CDataKind

--- XML qualified names
{-# derive DataTypeable #-}
data QName    = QName {
                  qName   :: String,
                  qURI    :: Maybe String,
                  qPrefix :: Maybe String
                }
derive Show QName


instance Eq QName where
  q1 == q2  = compare q1 q2 == EQ
  hashCode qn = hashCode (qn.qName, qn.qURI, qn.qPrefix)

instance Ord QName where
  q1 <=> q2 =
    case compare q1.qName q2.qName of
      EQ  -> case (q1.qURI, q2.qURI) of
               (Nothing,Nothing) -> compare q1.qPrefix q2.qPrefix
               (u1,u2)           -> compare u1 u2
      x   -> x


-- blank elements --------------------------------------------------------------

--- Blank names
blank_name :: QName
blank_name = QName { qName = "", qURI = Nothing, qPrefix = Nothing }

--- Blank cdata
blank_cdata :: CData
blank_cdata = CData { cdVerbatim = CDataText, cdData = "", cdLine = Nothing }

--- Blank elements
blank_element :: Element
blank_element = Element
                  { elName    = blank_name
                  , elAttribs = []
                  , elContent = []
                  , elLine    = Nothing
                  }


-- generated by DataDeriver

tc_Content :: TyCon
tc_Content = mkTyCon3 "Text.XML.Light" "Types" "Content"
instance Typeable (Content ) where
    typeOf _ = mkTyConApp tc_Content []
con_Content_Elem :: Constr
con_Content_Elem = mkConstr ty_Content "con_Content_Elem" [] Prefix
con_Content_Text :: Constr
con_Content_Text = mkConstr ty_Content "con_Content_Text" [] Prefix
con_Content_CRef :: Constr
con_Content_CRef = mkConstr ty_Content "con_Content_CRef" [] Prefix
ty_Content :: DataType
ty_Content = mkDataType "Text.XML.Light.Types.Content" [con_Content_Elem, con_Content_Text, con_Content_CRef]
instance Data (Content ) where
    toConstr (Elem _) = con_Content_Elem
    toConstr (Text _) = con_Content_Text
    toConstr (CRef _) = con_Content_CRef
    dataTypeOf _ = ty_Content
    gunfold k z c = case constrIndex c of
                         1 -> k (z Elem)
                         2 -> k (z Text)
                         3 -> k (z CRef)
                         _ -> error "gunfold(Content)"
    gfoldl f z x = case x of
                         (Elem a1) -> (z Elem) `f` a1
                         (Text a1) -> (z Text) `f` a1
                         (CRef a1) -> (z CRef) `f` a1

tc_Element :: TyCon
tc_Element = mkTyCon3 "Text.XML.Light" "Types" "Element"
instance Typeable (Element ) where
    typeOf _ = mkTyConApp tc_Element []
con_Element_Element :: Constr
con_Element_Element = mkConstr ty_Element "con_Element_Element" [] Prefix
ty_Element :: DataType
ty_Element = mkDataType "Text.XML.Light.Types.Element" [con_Element_Element]
instance Data (Element ) where
    toConstr (Element _ _ _ _) = con_Element_Element
    dataTypeOf _ = ty_Element
    gunfold k z c = case constrIndex c of
                         1 -> k (k (k (k (z Element))))
                         _ -> error "gunfold(Element)"
    gfoldl f z x = case x of
                         (Element a1 a2 a3 a4) -> ((((z Element) `f` a1) `f` a2) `f` a3) `f` a4

tc_Attr :: TyCon
tc_Attr = mkTyCon3 "Text.XML.Light" "Types" "Attr"
instance Typeable (Attr ) where
    typeOf _ = mkTyConApp tc_Attr []
con_Attr_Attr :: Constr
con_Attr_Attr = mkConstr ty_Attr "con_Attr_Attr" [] Prefix
ty_Attr :: DataType
ty_Attr = mkDataType "Text.XML.Light.Types.Attr" [con_Attr_Attr]
instance Data (Attr ) where
    toConstr (Attr _ _) = con_Attr_Attr
    dataTypeOf _ = ty_Attr
    gunfold k z c = case constrIndex c of
                         1 -> k (k (z Attr))
                         _ -> error "gunfold(Attr)"
    gfoldl f z x = case x of
                         (Attr a1 a2) -> ((z Attr) `f` a1) `f` a2

tc_CData :: TyCon
tc_CData = mkTyCon3 "Text.XML.Light" "Types" "CData"
instance Typeable (CData ) where
    typeOf _ = mkTyConApp tc_CData []
con_CData_CData :: Constr
con_CData_CData = mkConstr ty_CData "con_CData_CData" [] Prefix
ty_CData :: DataType
ty_CData = mkDataType "Text.XML.Light.Types.CData" [con_CData_CData]
instance Data (CData ) where
    toConstr (CData _ _ _) = con_CData_CData
    dataTypeOf _ = ty_CData
    gunfold k z c = case constrIndex c of
                         1 -> k (k (k (z CData)))
                         _ -> error "gunfold(CData)"
    gfoldl f z x = case x of
                         (CData a1 a2 a3) -> (((z CData) `f` a1) `f` a2) `f` a3

tc_CDataKind :: TyCon
tc_CDataKind = mkTyCon3 "Text.XML.Light" "Types" "CDataKind"
instance Typeable (CDataKind ) where
    typeOf _ = mkTyConApp tc_CDataKind []
con_CDataKind_CDataText :: Constr
con_CDataKind_CDataText = mkConstr ty_CDataKind "con_CDataKind_CDataText" [] Prefix
con_CDataKind_CDataVerbatim :: Constr
con_CDataKind_CDataVerbatim = mkConstr ty_CDataKind "con_CDataKind_CDataVerbatim" [] Prefix
con_CDataKind_CDataRaw :: Constr
con_CDataKind_CDataRaw = mkConstr ty_CDataKind "con_CDataKind_CDataRaw" [] Prefix
ty_CDataKind :: DataType
ty_CDataKind = mkDataType "Text.XML.Light.Types.CDataKind" [con_CDataKind_CDataText, con_CDataKind_CDataVerbatim, con_CDataKind_CDataRaw]
instance Data (CDataKind ) where
    toConstr (CDataText) = con_CDataKind_CDataText
    toConstr (CDataVerbatim) = con_CDataKind_CDataVerbatim
    toConstr (CDataRaw) = con_CDataKind_CDataRaw
    dataTypeOf _ = ty_CDataKind
    gunfold k z c = case constrIndex c of
                         1 -> z CDataText
                         2 -> z CDataVerbatim
                         3 -> z CDataRaw
                         _ -> error "gunfold(CDataKind)"
    gfoldl f z x = case x of
                         (CDataText) -> z CDataText
                         (CDataVerbatim) -> z CDataVerbatim
                         (CDataRaw) -> z CDataRaw

tc_QName :: TyCon
tc_QName = mkTyCon3 "Text.XML.Light" "Types" "QName"
instance Typeable (QName ) where
    typeOf _ = mkTyConApp tc_QName []
con_QName_QName :: Constr
con_QName_QName = mkConstr ty_QName "con_QName_QName" [] Prefix
ty_QName :: DataType
ty_QName = mkDataType "Text.XML.Light.Types.QName" [con_QName_QName]
instance Data (QName ) where
    toConstr (QName _ _ _) = con_QName_QName
    dataTypeOf _ = ty_QName
    gunfold k z c = case constrIndex c of
                         1 -> k (k (k (z QName)))
                         _ -> error "gunfold(QName)"
    gfoldl f z x = case x of
                         (QName a1 a2 a3) -> (((z QName) `f` a1) `f` a2) `f` a3
